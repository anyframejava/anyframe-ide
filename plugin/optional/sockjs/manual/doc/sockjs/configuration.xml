	<chapter id="sockjs_configuration">
		<title>Configuration</title>
		<para>
			Spring Framework 4.0 버전부터 Java EE 7의 핵심기능인 WebSocket 기능을 지원한다.
			WebSocket 기능을 사용하기 위해서는 다음과 같은 환경이 제공되어야 한다.				
		</para>
		<section id="sockjs_configuration_envirenment">
			<title>사용환경</title>
			<itemizedlist>
				<listitem>
					<para>JVM : Java 7+</para>
				</listitem>
				<listitem>
					<para>Servlet Container : Apache Tomcat 7.0.47+, Eclipse Jetty 9.0+, GlassFish 4.0+</para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="sockjs_configuration_protocol">
			<title>Protocol</title>
			<itemizedlist>
				<listitem>
					<para>SockJS : http://</para>
				</listitem>
				<listitem>
					<para>Secure SockJS : https://</para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="sockjs_configuration_transport">
			<title>데이터 전송방식</title>
			<itemizedlist>
				<listitem>
					<para>WebSocket : 웹소켓</para>
				</listitem>
				<listitem>
					<para>xhr-polling : XmlHttpRequest 폴링</para>
				</listitem>
				<listitem>
					<para>xhr-streaming : XmlHttpRequest 스트리밍</para>
				</listitem>
				<listitem>
					<para>iframe-eventsource, iframe-htmlfile</para>
				</listitem>
				<listitem>
					<para>jsonp-polling : jsonp 폴링</para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="sockjs_configuration_plugin">
			<title>Anyframe Plugin Config</title>
			<itemizedlist>
				<listitem>
					<para>pom.xml</para>
					<para>
						Anyframe 기반으로 프로젝트를 생성하고 spring-websocket 및 Java EE API 라이브러리와 JSON 처리 시 사용된 Jackson 라이브러리를 추가한다.
					</para>
					<programlisting language="xml"><![CDATA[<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-websocket</artifactId>
    <version>${spring.version}</version>
</dependency>
<dependency>
    <groupId>javax</groupId>
    <artifactId>javaee-web-api</artifactId>
    <version>7.0</version>
    <scope>provided</scope>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.2.3</version>
</dependency>]]></programlisting>
				</listitem>
				<listitem>
					<para>web.xml</para>
					<para>
						SockJS는 Servlet 3.0 이상의 스펙에서 동작하며 반드시 async-supported 가 지원되어야 한다.
					</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns="http://java.sun.com/xml/ns/javaee" 
xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
id="WebApp_ID"
version="3.0">

<filter>
    <filter-name>encodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <async-supported>true</async-supported>
      <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
      </init-param>
  </filter>]]></programlisting>
				</listitem>
				<listitem>
					<para>Xml Config</para>
					<para>
						Spring context의 namespace에 spring-websocket을 선언하고 websocket handler를 등록하여 handshake url을 매핑시킨다.
					</para>
					<para>
						아래 등록으로 클라이언트와 서버 간의 websocket 연결을 한다.
					</para>
					<programlisting language="xml"><![CDATA[<beans xmlns:websocket=http://www.springframework.org/schema/websocket
xsi:schemaLocation="http://www.springframework.org/schema/websocket
http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd">

<websocket:handlers>
    <websocket:mapping path="/getSockJSMovieList.do" handler="myHandler"/>
	<websocket:sockjs />
</websocket:handlers>]]></programlisting>
				</listitem>
				<listitem>
					<para>Java Config</para>
					<para>
						WebSocketConfigurer 인터페이스를 구현하여 WebSocket의 handshake URL을 매핑시켜 주고, WebMvcConfigurerAdapter를 확장하여 servlet handler 및 Web MVC를 활성화 시킨다.
					</para>
					<programlisting language="java"><![CDATA[@Configuration
@EnableWebMvc
@EnableWebSocket
public class WebConfig extends WebMvcConfigurerAdapter implements WebSocketConfigurer {
    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(myHandler(), "getSockJSMovieList.do").withSockJS();
    }
    @Bean
    public WebSocketHandler myHandler() {
        return new MovieFinderWebSocketHandler();
    }
    @Override
    public void configureDefaultServletHandling(
DefaultServletHandlerConfigurer configurer) {
        configurer.enable();
    }
}
]]></programlisting>
				</listitem>
				<listitem>
					<para>Annotation 목록</para>
					<informaltable>
						<caption>Available caching SpEL evaluation context</caption>
						<tgroup cols="4">
							<colspec colnum="1" colname="col1" colwidth="3*" />
							<colspec colnum="2" colname="col2" colwidth="7*" />

							<thead>
								<row>
									<entry align="center">annotation</entry>
									<entry align="center">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="center">@Configuration</entry>
									<entry>Java Configuration 설정</entry>
								</row>
								<row>
									<entry align="center">@EnableWebMvc</entry>
									<entry>Spring MVC 사용 가능</entry>
								</row>
								<row>
									<entry align="center">@EnableWebSocket</entry>
									<entry>WebSocket 사용 가능</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
				</listitem>
			</itemizedlist>
		</section>
	</chapter>