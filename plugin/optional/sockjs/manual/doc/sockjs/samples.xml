	<chapter id="sockjs_samples">
		<title>Samples</title>
		<para>
			다음은 SockJS의 속성 설정 및 구현 코드에 대한 예제이다.
		</para>
		<section id="sockjs_samples_configuration">
			<title>Configuration</title>
			<para>
				Spring환경에서 SockJS 서비스를 사용하기 위해 정의한 sockjs-servlet.xml의 일부이다.
			</para>
			<para>
				websocket handler를 집합을 정의 하고 handler와의 연결을 위한 path를 지정한다.
			</para>
			<programlisting language="xml"><![CDATA[<websocket:handlers>
        <websocket:mapping path="/getSockJSMovieList.do" handler="sockjsMyHandler"/>
        <websocket:sockjs/>
    </websocket:handlers>
    
    <bean id="sockjsMyHandler" class="org.anyframe.sockjs.handler.MovieFinderWebSocketHandler"/>]]></programlisting>
		</section>
		<section id="sockjs_samples_client">
			<title>client</title>
			<para>
				클라이언트의 javascript로 WebSocket을 생성하고 서버와 메시지를 송수신한다. 생성된 WebSocket에 onopen, onmessage, onclose, onerror 등의 이벤트를 등록한다.
			</para>
			<programlisting language="xml"><![CDATA[<script>
var sock = new SockJS(‘http://mydomain.com/_sockjs_/getSockJSMovieList.do’);
  sock.onopen = function() {
    console.log('open');
};
sock.onmessage = function(e) {
    console.log('message', e.data);
  };
  sock.onclose = function() {
    console.log('close');
  };
</script>]]></programlisting>
		</section>
		<section id="sockjs_samples_server">
			<title>server</title>
			<para>
				WebSocketHandler를 구현하여 Text 메시지 전송 모듈인 TextWebSocketHandler와 바이너리 메시지 전송 모듈인 BinaryWebSocketHandler를 제공하며 handlerMessage 메소드에서 WebSocket메시지를 처리한다.(WebSocket과 동일)
			</para>
			<programlisting language="java"><![CDATA[public class MovieFinderWebSocketHandler extends TextWebSocketHandler {
    @Autowired
    private MovieFinder movieFinder;
 
    @Override
    public void handleMessage(
WebSocketSession session, WebSocketMessage<?> message) 
throws Exception {

        String payloadMessage = (String) message.getPayload();
        try {
            ObjectMapper mapper = new ObjectMapper();
            Movie movie = mapper.readValue(payloadMessage, Movie.class);
        
            Page page = movieFinder.getPagingList(movie, pageIndex);
            StringWriter movieList = new StringWriter();
            mapper.writeValue(movieList, page);
        
            session.sendMessage(new TextMessage(movieList.toString()));
        
        } catch (JsonParseException jpe) {
            jpe.printStackTrace();
        } catch (JsonMappingException jme) {
            jme.printStackTrace();
        }
    }
}
]]></programlisting>
		</section>
	</chapter>