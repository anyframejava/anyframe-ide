<chapter id="jasperreports_integration_controller">
	<title>Controller</title>
	<para>
		Anyframe 에서 제공하는 Reporting 기능은 기본적으로 JasperReports 기능을 모두 제공하나
    	Spring MVC와 통합된 형태로 기능이 제공되고 있기 때문에 Spring MVC를 통해서 제공되지 않은 JasperReports
    	일부 기능이 있다. 이 때 개발자는 뷰 클래스를 확장하거나, Controller 클래스에 부가 작업을 해줘야 하는데 아래의  경우의
    	경우 Anyframe 에서 이미 확장하여 제공하므로 개발자의 추가 작업 부담을 줄일 수 있다.
    </para>

    <itemizedlist>
    	<listitem>
        	<para>
        		HTML Reporting- 개발자 추가 작업 일부 필요
        	</para>
      	</listitem>
    </itemizedlist>

    <section id="jasperreports_integration_controller_html">
		<title>HTML Reporting</title>

		<para>
			이미지 파일을 html 내에서 디스플레이 해주기 위해서 Spring MVC에서 제공해주는 뷰 클래스를 확장하고,
      		Controller 클래스에 부가 작업을 해줘야 한다. Spring MVC에서 제공해주는 뷰 클래스를 확장한 것은 Anyframe
      		을 통해 제공될 것이므로, 개발자는 신경쓸 필요가 없다. 그러나 Controller 클래스에 부가 작업을 해야 하는 것은
      		개발자가 개발할 Controller내에 request 정보를 Model 객체 내에 저장시켜주는 작업으로 아래에 보여지는 코드와
      		같이 작성하도록 한다.
      	</para>

      	<itemizedlist>
        	<listitem>
          		<para>
          			ReportsMultiFormatView 확장 - renderReport 메소드 내에서 아래와 같이
          			request로부터 세션 객체를 얻어낸 후, 객체 내 어트리뷰트로 populatedReport 값을 저장한다. 이는 후에
          			HTML Reporting 시 이미지 파일을 디스플레이하기 위해 필요하다.(내용을 참고만 한다. 실제 개발자가 할 일은
          			없다.) 
          			<programlisting language="java">protected void renderReport(JasperPrint populatedReport, Map model,
	HttpServletResponse response) throws Exception {

// Check for request object and set image servlet
if (model.containsKey("requestObject")) {
    HttpServletRequest request = (HttpServletRequest) model
            .get("requestObject");
    request.getSession().setAttribute(
            ImageServlet.DEFAULT_JASPER_PRINT_SESSION_ATTRIBUTE,
            populatedReport);
}</programlisting></para>
        	</listitem>

        	<listitem>
          		<para>
          			<emphasis role="bold">Controller </emphasis>추가 작업 - 위에서와 같이
          			model 객채 내에서 "requestObject" 값을 얻어오기 위해서는 Controller 클래스의 Model 객체에
          			request 객체를 저장해주는 작업이 필요하다. 장르별 영화 등록 현황 Reporting을 위한
          			ReportContoller 클래스의 예는 다음과 같다. 
          			<programlisting language="java">@Controller("reportController")
@RequestMapping("/movieReport.*")
public class ReportController{

    @RequestMapping
    public String viewReport(HttpServletRequest request, Model model) throws Exception {

        String uri = request.getRequestURI();
        String format = "html";
        try {
            format = uri.substring(uri.lastIndexOf(".") + 1);
        } catch (IndexOutOfBoundsException e) {
            // ignore - html format will be used
        }

        <emphasis role="bold">model.addAttribute</emphasis>("format", format);
        <emphasis role="bold">model.addAttribute("requestObject", request);</emphasis>

        return "reportView";
    }
}</programlisting>
				</para>
			</listitem>

        	<listitem>
				<para>
					<emphasis role="bold">JSP </emphasis>추가 작업 - JSP 상에서 Report 를 호출하기 위한 예는 다음과 같다. movieReport.html 또는 movieReport.pdf 형태로 호출한다.
					<programlisting><![CDATA[<a href="${ctx}/reports/movieReport.html"><font size="2">HTML Report</font></a><br/>
<a href="${ctx}/reports/movieReport.pdf"><font size="2">PDF Report</font></a><br/>]]>
</programlisting>
				</para>
			</listitem>
		</itemizedlist>
	</section>
</chapter>
