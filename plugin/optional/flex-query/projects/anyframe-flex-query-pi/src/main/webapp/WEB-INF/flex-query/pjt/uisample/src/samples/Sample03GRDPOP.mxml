<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:local="anyframe.common.*"
		   xmlns:domain="anyframe.samples.domain.*" 
		   width="100%" height="100%" initialize="init()">
	
	<fx:Script>
		<![CDATA[
			import samples.renderer.ResultHandler;
			import samples.event.BoardEvent;
			import samples.domain.Board;
			import mx.events.ListEvent;
			import mx.events.DataGridEvent;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import org.anyframe.pagination.Page;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import samples.domain.SearchVO;
			import samples.domain.Community;
			import samples.util.Util;
			import mx.managers.PopUpManager; 
			import samples.sample03.Sample03Detail;
			import mx.core.IFlexDisplayObject;
			
			[Bindable] 
			private var boardList:ArrayCollection;
			
			[Bindable] 
			private var communityList:ArrayCollection;
			
			private var deleteBoardList:ArrayCollection = new ArrayCollection();
			
			private function init():void{
				if (communityList == null){
					communityService.getList(new SearchVO("Community"));
				}
				getBoardList();
			}
			private function getBoardListResultHandler(event:ResultEvent):void {
				boardList = event.result as ArrayCollection;
				setTotalCount(boardList.length);
			}
			private function setTotalCount(count:int):void{
				totalCount.text = "Total : " + count + "Row";
			} 
			private function getBoardList():void {
				var searchVO:SearchVO = new SearchVO();
				searchVO.searchCondition = searchCondition.selectedItem.data;
				searchVO.searchKeyword = searchKeyword.text;
				searchVO.tableName = "Board"
				boardService.getList(searchVO);
			}
			
			private function openPopBoardDetail(board:Board):void{
				if ( grdBoard.selectedIndex != -1 ){
					var boardDetailPopup:IFlexDisplayObject = PopUpManager.createPopUp(this as DisplayObject, Sample03Detail, true);
					var popUp:Sample03Detail = boardDetailPopup as Sample03Detail;
					popUp.addEventListener( BoardEvent.UPDATE, updateBoard );
					popUp.communityList = communityList;
					popUp.board = board;
					PopUpManager.centerPopUp(popUp);
				}
			}
            
            private function addBoard():void{
            	var addBoard:Board = new Board();
				addBoard.status = 1;
				addBoard.regDate = Util.getToday();
				addBoard.regId = parentDocument.loginUser.userId;
				grdBoard.dataProvider.addItem(addBoard);
				grdBoard.selectedIndex = boardList.length;
				openPopBoardDetail(addBoard);
            }
            
			private function deleteBoard():void{
				if(grdBoard.selectedIndex != -1){
					var countSelectedItem:int = grdBoard.selectedItems.length;
					var selectedBoards:Array = grdBoard.selectedItems;
					for ( var i:int = 0 ; i < countSelectedItem ; i++){
						var deleteBoard:Board = selectedBoards[i] as Board;
						var rowStatus:int = deleteBoard.status;
					
						if (rowStatus != 1){
							deleteBoard.status = 3;
							deleteBoardList.addItem(deleteBoard);
						}
						
						grdBoard.dataProvider.removeItemAt(boardList.getItemIndex(deleteBoard));
					}
				}
		    }
		    
		    private function updateBoard(event:BoardEvent):void{
		    	if ( event.board.status == 1 && event.board != grdBoard.selectedItem as Board ){
					grdBoard.dataProvider.addItem(event.board);
					grdBoard.selectedItem = event.board;
				}else if( event.board == grdBoard.selectedItem as Board ){
					grdBoard.selectedItem = event.board;
					var updateBoard:Board = grdBoard.selectedItem as Board;
				
					var rowStatus:Number = updateBoard.status;
				
					if( rowStatus == 0 ){
						updateBoard.status = 2;
					}
				}
		    }
		    
		    private function saveBoard():void{
		    	var saveBoardList:ArrayCollection = new ArrayCollection();
		    	for ( var j:int = 0 ; j < deleteBoardList.length ; j ++ ){
		    		saveBoardList.addItem(deleteBoardList.getItemAt(j));
		    	}
		    	for ( var i:int = 0 ; i < boardList.length ; i ++ ){
		    		var board:Board = boardList.getItemAt(i) as Board;
					if ( board.status != 0 ){
						saveBoardList.addItem(board);
					}
		    	}
		    	if ( saveBoardList.length == 0 ){
		    		Alert.show("변경된 데이터가 없습니다.");
		    		return;
		    	}
		    	boardService.saveAll(saveBoardList);
		    }
		    
		    private function getCommunityListResultHandler(event:ResultEvent):void{
            	communityList = event.result as ArrayCollection;
            }
            
            private function saveAllResultHandler(event:ResultEvent):void{
		    	mx.controls.Alert.show(ResultHandler.saveAllResultMessage(event));
		    	deleteBoardList.removeAll();
		    	getBoardList();
		    }
		    
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:ArrayCollection id="searchConditionValue">
			<fx:Object label="제목" data="title"/>
			<fx:Object label="등록자" data="regId"/>
		</mx:ArrayCollection> 

		<fx:Array id="columnsInfo">
			<mx:DataGridColumn dataField="title" headerStyleName="dataGridHeaderAlign" headerText="제목" width="400"/>
			<mx:DataGridColumn dataField="regId" headerStyleName="dataGridHeaderAlign" headerText="등록자"/>
			<mx:DataGridColumn dataField="regDate" headerStyleName="dataGridHeaderAlign" headerText="등록일" editable="true" itemEditor="samples.renderer.DateEditor"/>
		</fx:Array>
		
		<mx:RemoteObject id="communityService" destination="communityService" showBusyCursor="true">
			<mx:method name="getList" result="getCommunityListResultHandler(event)" fault="ResultHandler.faultMessage(event)"/>
		</mx:RemoteObject>
		
		<mx:RemoteObject id="boardService" destination="boardService" showBusyCursor="true">
			<mx:method name="getList" result="getBoardListResultHandler(event)" fault="ResultHandler.faultMessage(event)"/>
			<mx:method name="saveAll" result="saveAllResultHandler(event)" fault="ResultHandler.faultMessage(event)"/>
		</mx:RemoteObject>
	</fx:Declarations> 
	
	<mx:Panel width="100%" height="100%" color="#FFFFFF"
			  horizontalScrollPolicy="off" layout="vertical" paddingBottom="5" paddingLeft="5"
			  paddingRight="5" title="게시글 목록"
			  titleBackgroundSkin="@Embed('../assets/images/bg_title.png')" verticalGap="0"
			  verticalScrollPolicy="off">
		<mx:HBox width="100%" horizontalGap="0" paddingBottom="5" paddingLeft="0" paddingRight="0"
				 color="#000000" paddingTop="5" verticalAlign="middle">
			<mx:HBox width="70%" horizontalAlign="left" verticalAlign="middle">
				<mx:ComboBox id="searchCondition" width="119"
							 dataProvider="{searchConditionValue}"
							 dropdownStyleName="myComboBoxDropDowns" fontWeight="bold" rowCount="2"/>
				<mx:TextInput id="searchKeyword" height="19" width="179" borderColor="#abbdd2" color="#000000"
							  borderStyle="solid" enter="getBoardList()"/>
				<mx:Button id="searchButton" label="검색" click="getBoardList()"/>				
			</mx:HBox>

			<mx:HBox width="30%" horizontalAlign="right">
				<mx:Button label="추가" icon="@Embed(source='../assets/images/icon_plus.png')" textAlign="left" click="addBoard()"/>
				<mx:Button label="삭제" icon="@Embed(source='../assets/images/icon_delete.png')" textAlign="left" click="deleteBoard()"/>
				<mx:Button label="저장" icon="@Embed(source='../assets/images/icon_save.png')" textAlign="left" click="saveBoard()"/>
			</mx:HBox>
		</mx:HBox>
		<mx:HBox width="100%" color="#000000" horizontalAlign="right" horizontalGap="0" verticalAlign="middle">
			<mx:Label id="totalCount" width="91" textAlign="center"/>
		</mx:HBox>
		<mx:DataGrid id="grdBoard" width="100%" height="375" allowMultipleSelection="true"
					 columns="{columnsInfo}" dataProvider="{boardList}" rowHeight="22"
					 doubleClick="openPopBoardDetail(grdBoard.selectedItem as Board)"
					 doubleClickEnabled="true" editable="false" horizontalScrollPolicy="off"
					 verticalGridLineColor="#585b63" verticalGridLines="true"
					 verticalScrollPolicy="on">
		</mx:DataGrid>
	</mx:Panel>
</mx:Module>