<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:local="anyframe.common.*"
		   xmlns:detail="samples.board.*" 
		   xmlns:paging="samples.paging.*"
		   xmlns:domain="samples.domain.*"
		   width="100%" height="100%" 
		   layout="vertical"
		   initialize="init()"
		   verticalScrollPolicy="off" 
		   horizontalScrollPolicy="off">
	
	<fx:Script>
		<![CDATA[
			import samples.renderer.ResultHandler;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ItemResponder;
			import samples.domain.Board;
			import mx.events.ListEvent;
			import mx.events.DataGridEvent; 
			import mx.controls.AdvancedDataGridBaseEx;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import org.anyframe.pagination.Page;
			import mx.rpc.events.ResultEvent;
			import samples.paging.PagingLinkBar; 
			import samples.paging.PagingEvent;
			import samples.domain.SearchVO; 
			import samples.domain.Community;
			import samples.util.Util;
			import mx.events.DataGridEventReason;
			import mx.rpc.AsyncToken;
			
			private var keyword:String = "";
			private var condition:String = "";
			
			[Bindable] 
			private var boardList:ArrayCollection;
			
			private var totalCount:int;
			private var pagingLinkBar:PagingLinkBar;
			
			[Bindable]
			private var page:Page;		
				
            [Bindable]
            private var communityList:ArrayCollection;
            
			private var deleteBoardList:ArrayCollection = new ArrayCollection();
			
			private function init():void{
				if ( communityList == null ){
					getCommunityList();
				}
				getBoardList(1);
			}
			
			private function getBoardListResultHandler(event:ResultEvent):void {
				
				page = event.result as Page;
				plb.totalCount = page.totalCount;
				plb.fetchSize = page.pagesize;
				plb.numPages = page.pageunit;
				plb.currentPage = page.currentPage;
				
				boardList = page.objects as ArrayCollection;
				
				setPageStatus(page);
			}
			private function setPageStatus(page:Page):void{
				pageStatus.text = "Page : " + page.currentPage +"/" + page.maxPage;
			} 
			private function getBoardList(currentPage:int, pageClick:Boolean = false):void {
				
				var searchVO:SearchVO = new SearchVO("Board");
				if ( pageClick ){
					searchVO.searchCondition = condition;
					searchVO.searchKeyword = keyword;
				}else{
					keyword = searchKeyword.text;
					condition = searchCondition.selectedItem.data;
					searchVO.searchKeyword = keyword;
					searchVO.searchCondition = condition;
				}
				searchVO.pageIndex = currentPage;
				boardService.getPagingList(searchVO);
			}
			
			 private function pageClickHandler(event:PagingEvent) : void
            {
                getBoardList(event.newPage, true);
            }
            
            private function getCommunityList():void{
            	var responder : ItemResponder = new ItemResponder(getCommunityResultHandler, getCommunityFaultHandler); 
            	var token : AsyncToken = communityService.getList(new SearchVO("Community"));
            	token.addResponder(responder);
            }
            
            private function getCommunityResultHandler(event:ResultEvent, token:AsyncToken):void{
            	communityList = event.result as ArrayCollection;
            	var community:Community = communityList as Community;
            }
            
            private function getCommunityFaultHandler(event:FaultEvent, token:AsyncToken):void{
            	mx.controls.Alert.show(event.fault.message);
            }
            
            private function grdClick(event:ListEvent):void{
            	board = grdBoard.selectedItem as Board;
            }
            
            private function comboChange(event:ListEvent):void{
            	if( grdBoard.selectedIndex != -1 ){
            		grdBoard.selectedItem.communityName = comboCommumity.selectedItem.communityName;
            		board.communityId = comboCommumity.selectedItem.communityId;
            	}
            }
            
            private function addBoard():void{
            	var addBoard:Board = new Board();
				addBoard.status = 1;
				addBoard.regDate = Util.getToday();
				addBoard.regId = parentDocument.loginUser.userId;
				grdBoard.dataProvider.addItem(addBoard);
            }
            
            private function updateBoard(event:DataGridEvent):void{
				
				if (event.reason == DataGridEventReason.CANCELLED){
					return;
                }
                
				var updateBoard:Board = grdBoard.itemEditorInstance.data as Board;
				
				var rowStatus:Number = updateBoard.status;
				
				if( rowStatus == 0 ){
					updateBoard.status = 2;
				}
			}
			
			private function deleteBoard():void{
				if(grdBoard.selectedIndex != -1){
					var deleteBoard:Board = grdBoard.selectedItem as Board;
					var rowStatus:int = deleteBoard.status;
					
					if (rowStatus != 1){
						deleteBoard.status = 3;
						deleteBoardList.addItem(deleteBoard)
					}
					grdBoard.dataProvider.removeItemAt(grdBoard.selectedIndex);
				}
		    }
		    
		    private function saveBoard():void{
		    	var saveBoardList:ArrayCollection = new ArrayCollection();
		    	for ( var j:int = 0 ; j < deleteBoardList.length ; j ++ ){
		    		saveBoardList.addItem(deleteBoardList.getItemAt(j));
		    	}
		    	for ( var i:int = 0 ; i < boardList.length ; i ++ ){
		    		var board:Board = boardList.getItemAt(i) as Board;
		    		if(board.status != 0){
		    			if(board.communityId == null){
							Alert.show( "글 " + board.title + "의 커뮤니티를 선택 하지 않았습니다.");
							return;
		    			}else if(board.title == null) {
		    				Alert.show( "Title을 입력하지 않은 글이 있습니다.");
		    			}else{
		    				saveBoardList.addItem(board);
		    			}
		    		}
		    	}
		    	if ( saveBoardList.length == 0 ){
		    		Alert.show( "변경된 데이터가 없습니다." );
		    	}else{
		    		boardService.saveAll(saveBoardList);
		    	}
		    }
		    
		     private function saveAllResultHandler(event:ResultEvent):void{
		    	mx.controls.Alert.show(ResultHandler.saveAllResultMessage(event));
		    	deleteBoardList.removeAll();
		    	getBoardList(1);
		    	board = new Board();
		    }
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<domain:Board id="board" 
					  postId="{postId.text}"
					  title="{boardTitle.text}"
					  contents="{contents.text}"
					  regId="{regId.text}"
					  />
		
		<mx:ArrayCollection id="searchConditionValue">
			<fx:Object label="제목" data="title"/>
			<fx:Object label="등록자" data="regId"/>
		</mx:ArrayCollection> 
		
		<fx:Array id="columnsInfo">
			<mx:DataGridColumn dataField="title" headerStyleName="dataGridHeaderAlign" headerText="제목"/>
			<mx:DataGridColumn dataField="regId" headerStyleName="dataGridHeaderAlign" headerText="등록자" editable="false"/>
			<mx:DataGridColumn dataField="regDate" headerStyleName="dataGridHeaderAlign" headerText="등록일" itemEditor="samples.renderer.DateEditor"/>
		</fx:Array>
		
		<mx:RemoteObject id="boardService" destination="boardService" showBusyCursor="true">
			<mx:method name="getPagingList" result="getBoardListResultHandler(event)" fault="ResultHandler.faultMessage(event)"/>
			<mx:method name="saveAll" result="saveAllResultHandler(event)" fault="ResultHandler.faultMessage(event)"/>
		</mx:RemoteObject>
		
		<mx:RemoteObject id="communityService" destination="communityService" >
			<mx:method name="getList" fault="ResultHandler.faultMessage(event)"/>
		</mx:RemoteObject>
	</fx:Declarations>
	
	<mx:Panel title="게시글 목록" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" layout="vertical"
			  titleBackgroundSkin="@Embed('../assets/images/bg_title.png')"  color="#FFFFFF" 
			  paddingLeft="5" paddingRight="5" paddingBottom="5" verticalGap="0">
		<mx:HBox width="100%" horizontalGap="0" paddingBottom="5" paddingLeft="0" paddingRight="0"
				 color="#000000" paddingTop="5" verticalAlign="middle">
			<mx:HBox width="70%" horizontalAlign="left">
				<mx:ComboBox id="searchCondition" dataProvider="{searchConditionValue}" width="119" fontWeight="bold"/>
				<mx:TextInput id="searchKeyword" width="179" height="19" enter="getBoardList(1)"/>
				<mx:Button label="검색" id="searchButton" click="getBoardList(1)"/>
			</mx:HBox>
			
			<mx:HBox width="30%" horizontalAlign="right">
				<mx:Button label="추가" icon="@Embed(source='../assets/images/icon_plus.png')" textAlign="left" click="addBoard()"/>
				<mx:Button label="삭제" icon="@Embed(source='../assets/images/icon_delete.png')" textAlign="left" click="deleteBoard()"/>
				<mx:Button label="저장" icon="@Embed(source='../assets/images/icon_save.png')" textAlign="left" click="saveBoard()"/>
			</mx:HBox>
		</mx:HBox>
		<mx:HBox color="#000000" width="100%" horizontalAlign="right" horizontalGap="0" verticalAlign="middle">
			<mx:Label id="pageStatus" width="69"/>
		</mx:HBox>
		<mx:DataGrid rowCount="6" id="grdBoard" dataProvider="{boardList}" columns="{columnsInfo}"
					 verticalScrollPolicy="off" horizontalScrollPolicy="off"
					 editable="true" height="150" width="100%" rowHeight="22"
					 verticalGridLineColor="#585b63" verticalGridLines="true"
					 itemClick="grdClick(event)" itemEditEnd="updateBoard(event)">
		</mx:DataGrid>	
		
		<paging:PagingLinkBar color="#000000" id="plb" width="100%" horizontalAlign="center" pageClick="pageClickHandler(event)"/>
			
		<mx:Panel width="100%" height="200" chromeColor="#666C86"
				  horizontalScrollPolicy="off" title="게시물 정보" verticalScrollPolicy="off">
			<mx:Form width="100%" color="#000000">
				<mx:FormItem label="게시글 ID">
					<mx:TextInput id="postId" text="{board.postId}" height="20" width="179" editable="false"/>
				</mx:FormItem>
				
				<mx:FormItem label="제목">
					<mx:TextInput width="289" height="20" id="boardTitle" text="{board.title}" />
				</mx:FormItem>
				
				<mx:FormItem label="내용">
					<mx:TextArea id="contents" text="{board.contents}" width="597" height="27"/>
				</mx:FormItem>
				
				<mx:FormItem label="등록자">
					<mx:TextArea id="regId" text="{board.regId}" width="181" height="20" editable="false"/>
				</mx:FormItem>
				
				<mx:FormItem label="커뮤니티1">				
					<mx:ComboBox id="comboCommumity" text="{board.communityName}" width="219" editable="false" dataProvider="{communityList}" 
								 chromeColor="#FFFFFF" labelField="communityName" change="comboChange(event)"/>
				</mx:FormItem>
			</mx:Form>
		</mx:Panel>
		
	</mx:Panel>
</mx:Module>