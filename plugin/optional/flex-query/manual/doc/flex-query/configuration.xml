<chapter id="flex_query_configuration">
	<title>Spring BlazeDS Integration 환경 설정</title>
	<para>
		Spring BlazeDS Integration은 Flex를 이용해 Web Application을 개발 할 경우,
		서버측과 RPC방식으로 통신할 때 필요한 BlazeDS를 Spring Framework와 연계하여 편리하게 사용할 수 있도록 한다.
		복잡한 환경 설정이 flex namespace를 통해 간편해 졌고 Spring Bean을 Exporting하기 위한 annotation이
		제공된다.
	</para> 
	<para>
		Spring BlazeDS Integration을 사용하기 위한 환경은 다음과 같다.
	</para>
	<itemizedlist>
		<listitem><para>Java 5 이상</para></listitem>
		<listitem><para>Spring 2.5.6 이상</para></listitem>
		<listitem><para>Adobe BlazeDS 3.2 이상</para></listitem>
	</itemizedlist>
	<para>
		본 메뉴얼은 Spring 3.1.1, Adobe BlazeDS 4, Spring Flex Integration 1.5.0 기준으로 작성되었다.
	</para>
	<section id="flex_query_configuration_sec001">
		<title>Spring BlazeDS MessageBroker 환경 설정</title>
		<section id="flex_query_configuration_sec001_001">
			<title>Spring DispatcherServlet</title>
			<para>BlazeDS 에서는 MessageBrokerServlet 을 front Controller 로 사용하여 Flex client 의 요청을 처리했다.
			Spring BlazeDS Integration 을 사용하면 Spring MVC 의 DispatcherServlet 이 Flex client 의 요청을 처리한다.
			따라서 web.xml 에 아래와 같은 설정을 추가한다.</para>
			<programlisting language="xml"><![CDATA[<servlet>
    <servlet-name>SpringBlazeDS</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:/springmvc/flex-servlet.xml</param-value>
    </init-param>
</servlet>

<servlet-mapping>
    <servlet-name>SpringBlazeDS</servlet-name>
    <url-pattern>/messagebroker/*</url-pattern>
</servlet-mapping>]]></programlisting>
		</section>
		
		<section id="flex_query_configuration_sec001_002">
			<title>MessageBroker</title>
			<para>Spring BlazeDS Integration에서는 BlazeDS와 Spring과의 연계를 위한 복잡한 환경 설정을 간단히 하기 위해 flex namespace를 제공한다. 
			flex namespace를 사용하기 위해서는 Spring 설정 파일에 다음과 같이 xsd를 정의를 추가한다.</para>
			<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>	
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:flex="http://www.springframework.org/schema/flex" 
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/flex 
        http://www.springframework.org/schema/flex/spring-flex-1.5.xsd">
        
        ...
</bean>]]></programlisting>
			<para>web.xml 파일의 설정에 의해 flex client 의 요청을 DispatcherServlet 이 처리하므로 그 요청을 MessageBroker로 위임해야 한다.</para>
			<para>MessageBroker 설정은 flex namespace 추가로 아래와 같이 간단한 설정만으로 가능하다.</para>
			<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>	
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:flex="http://www.springframework.org/schema/flex" 
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/flex 
        http://www.springframework.org/schema/flex/spring-flex-1.5.xsd">
			
    <flex:message-broker />
</beans>]]></programlisting>
			
			<para>위의 설정의 경우 기본적으로 /WEB-INF/flex/services-config.xml 파일을 참조하게 된다. 
			설정 파일의 위치가 다를 경우 services-config-path attribute 설정을 통해 변경이 가능하다.</para>
			
			<programlisting language="xml">
<![CDATA[<flex:message-broker services-config-path="classpath*:services-config.xml" />
]]></programlisting>
			<para>
			 flex namespace를 사용하지 않을 때에는 아래와 같이 설정한다.
			</para>
			<programlisting language="xml"><![CDATA[<bean id="messageBroker" 
           class="org.springframework.flex.core.MessageBrokerFactoryBean">
    <property name=""serviceConfigPath" value="classpath*:services-config.xml"/>
</bean>]]></programlisting>
    	<para>
    	위 <link linkend="flex_query_configuration_sec001_002">Configuring the Spring DispatcherServlet</link>에서 처럼 /messagebroker/*요청에 대한 servlet-mapping을 
    	별도로 설정하지 않고 모든 요청에 대해서 DispatcherServlet이 처리 할 경우 /messagebroker/*에 대한 요청을 MessageBroker가 처리 하기 위해서는
    	아래와 같이 SimpleUrlHandlerMapping을 설정한다.
    	</para>
    	<programlisting language="xml"><![CDATA[<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
        <value>
        /messagebroker/*=_messageBroker
        </value>
    </property>
</bean>

<bean class="org.springframework.flex.servlet.MessageBrokerHandlerAdapter"/>]]></programlisting>
		<para>
			위의 SimpleUrlHandlerMapping설정은 flex namespace를 사용할 경우는 아래와 같다. 
		</para>
		<programlisting language="xml"><![CDATA[<flex:message-broker>
    <flex:mapping pattern="/messagebroker/*" />
</flex:message-broker>]]></programlisting>
		</section>
	</section>
	
	<section id="flex_query_configuration_sec002">
		<title>Exporting Spring Beans</title>
		<section id="flex_query_configuration_sec002_001">
			<title>RemotingService 환경 설정</title>
			<para>Application 레벨의 채널 세팅은 BlazeDS설정 파일인 services-config.xml파일에 services태그 안에 아래와 같이 정의 한다.
			 Flex Client에서 RemotingService에 대해 별도의 채널 설정이 필요없을 경우 my-amf 채널을 이용한다.
			</para>
			<programlisting language="xml">
<![CDATA[<services>
    ..중략
    <default-channels>
        <channel ref="my-amf"/>
    </default-channels>        
</services>
]]></programlisting>
			<para>RemotingService에 대해 특정 채널을 이용하고자 할 경우에는 아래와 같이 remoting-service의 default-channels속성에
			채널 이름을 등록한다.		
			</para>
			<programlisting language="xml">
<![CDATA[<flex:message-broker>
    <flex:message-service
        default-channels="my-amf,my-streaming-amf,my-longpolling-amf,my-polling-amf"/>
</flex:message-broker>]]></programlisting>
		</section>
		<section id="flex_query_configuration_sec002_002">
			<title>remoting-destination 태그</title>
			<para>remoting-destination 태그는 Spring Bean 을 Remote 객체로 노출 시킨다.</para>
			<programlisting language="xml">
<![CDATA[<bean id="productService" class="flex.samples.product.ProductServiceImpl" />
<flex:remoting-destination ref="productService" />
]]></programlisting>
			<para>다음과 같은 설정도 가능 하다.</para>
			<programlisting language="xml"><![CDATA[<bean id="productService" class="flex.samples.product.ProductServiceImpl">
    <flex:remoting-destination />
</bean>]]></programlisting>
			<para>include-methods / exclude-methods 속성을 이용해 method 단위의 제어도 가능하다. include-method / exclude-method를 정의하지 않을 경우 default는 include-method이다.</para>
			<programlisting language="xml"><![CDATA[<flex:remoting-destination ref="productService"
    include-methods="read, update"
    exclude-methods="create, delete"
    channels="my-amf, my-secure-amf" />]]></programlisting>
		</section>
		<section id="flex_query_configuration_sec002_003">
			<title>@RemotingDestination</title>
			<para>@RemotingDestination 을 사용해서도 Spring Bean 을 Remote 객체로 노출이 가능하다.</para>
			<programlisting>
<![CDATA[
@Service("productService")
@RemotingDestination
public class ProductServiceImpl implements ProductService {
..중략
]]></programlisting>
	<para>
		@RemotingInclude, @RemotingExclude annotation을 이용해 method별 노출 여부를 설정할 수 있다.
	</para>
	<programlisting language="java">@RemotingInclude
public Category getCategoryList(SearchVO searchVO) throws Exception{
..
}

@RemotingExclude
public void removeCategory(Category category) throws Exception{
...
}</programlisting>
	<para>
		@RemotingDestination annotaion을 이용해 Spring Bean을 노출 할 때 Destination 채널 설정은 아래와 같이 한다.	
	</para>
		<programlisting language="java">@Service("categoryService")
@RemotingDestination(channels={"my-amf","my-secure-amf"})
public class CategoryServiceImpl implements CategoryService {</programlisting>
		</section>
	</section>
</chapter>