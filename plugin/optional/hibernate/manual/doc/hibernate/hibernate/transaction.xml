<chapter id="hibernate_hibernate_transaction">
	<title>Transaction Management</title>
	<para>
		Hibernate에서 지원하는 Transaction 관리 방법에는 크게 JDBC, JTA, CMT 세 가지가 있다. 본 페이지에서는 일반적으로 가장 많이 
		사용하는 JDBC, JTA 기반의 Transaction 관리 방법에 대해서 설명하겠다.
	</para>

	<section id="hibernate_hibernate_transaction_jdbc">
		<title>JDBC - HibernateTransactionManager</title>

		<para>
			HibernateTransactionManager는 DataSource를 사용하여 Local Transaction과 Hibernate Session을 관리한다. 따라서 
			HibernateTransactionManager는 LocalSessionFactory Bean에 의존성을 가지고 있으므로 반드시 LocalSessionFactory와 
			함께 사용되어야 한다.
		</para>

		<itemizedlist>
        	<listitem>
          		<para>
          			<emphasis role="bold">Configuration</emphasis>
          		</para>

          		<para>
          			다음은 Spring Framework의 org.springframework.orm.hibernate3.HibernateTransactionManager를 이용하여
          			Hibernate 기반에서 Transaction을 관리하기 위한 context-transaction.xml 파일의 일부이다. 
          			[주의] Anyframe Hibernate Plugin을 설치한 뒤 설정 파일을 보면 Transaction Manager가 "org.springframework.jdbc.datasource.DataSourceTransactionManager" 클래스로 설정되어 있는데
          			이를 아래와 같이 "org.springframework.orm.hibernate3.HibernateTransactionManager" 클래스로 변경하고 sessionFactory Bean에 대한 참조 설정도 추가해주도록 한다. DataSourceTransactionManager 사용 시 
          			Transaction 관리가 되지 않는다. 
          			
                    <programlisting language="xml"><![CDATA[<bean id="transactionManager"
        class="]]><emphasis role="bold"><![CDATA[org.springframework.orm.hibernate3.HibernateTransactionManager]]></emphasis>">
    <![CDATA[<property name="sessionFactory" ref="sessionFactory" />
</bean>]]></programlisting> 
					Spring의 TransactionManager 설정 방법에 대해서는 Core Plugin >> Spring >> <ulink url="http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.6.1-SNAPSHOT/reference/htmlsingle/core.html#core_spring_transaction">
					Transaction Management</ulink>를 참고한다.
					
				</para>
        	</listitem>

        	<listitem>
          		<para>
          			<emphasis role="bold">Test Case</emphasis>
          		</para>

				<para>
          			다음은 org.springframework.orm.hibernate3.HibernateTransactionManager를 이용하여
          			Transaction 관리 기능을 테스트하기 위한 HibernateJDBCTransactionManager.java
          			의 일부이다. 
                    <programlisting language="java"><![CDATA[public class HibernateJDBCTransactionManager {

<!--중략 -->

/**
 * [Flow #-1] HibernateTransactionManager Rollback을 이용하여,
 * 초기화 데이터의 입력 작업을 취소시킨 후, 데이터가 제대로 Rollback되었는지 검증한다.
 * 
 * @throws Exception
 *             throws exception which is from hibernate
 */
    public void rollback() throws Exception {
        // 1. insert init data
        Session session = sessionFactory.getCurrentSession();
        SetUpInitData.initializeData(session);

        // 2. rollback transaction
        isRollback();
        endTransaction();

        // 3. begin a new transaction
        startNewTransaction();

        // 4. check if insertion is rollbacked
        Movie movie = (Movie) sessionFactory.getCurrentSession().get(
        Movie.class, "MV-00001");
    }

/**
 * [Flow #-2] HibernateTransactionManager Commit을 이용하여, 초기화
 * 데이터의 입력 작업을 DB에 반영시킨 후, 데이터가 제대로 Commit되었는지 검증한다.
 * 
 * @throws Exception
 *             throws exception which is from hibernate
 */
    public void commit() throws Exception {
        // 1. insert init data
        Session session = sessionFactory.getCurrentSession();
        SetUpInitData.initializeData(session);

        // 2. commit transaction
        setComplete();
        endTransaction();

        // 3. begin a new transaction
        startNewTransaction();

        // 4. check if insertion is successful
        Movie movie = (Movie) sessionFactory.getCurrentSession().get(
        Movie.class, "MV-00001");
    }
}]]></programlisting>
				</para>
			</listitem>
		</itemizedlist>
	</section>

	<section id="hibernate_hibernate_transaction_jta">
		<title>JTA - JTATransactionManager</title>

      	<para>
      		JTATransactionManager 서비스는 JTA를 사용한 Global Transaction 관리 부분을 추상화하여 해당 서비스가 JTA,JNDI 등에 
      		종속적이지 않게 구현 가능 하도록 도와준다.
      	</para>

      	<itemizedlist>
        	<listitem>
          		<para>
          			<emphasis role="bold">Configuration</emphasis>
          		</para>

          		<para>
          			아래는 JTATransactionManager의 속성을 정의한 context-transaction.xml 파일의 일부이다. 
                    <programlisting language="xml"><![CDATA[<bean id="transactionManager"
        class="org.springframework.transaction.jta.WebLogicJtaTransactionManager"/>]]></programlisting>
        		</para>

          		<para>
          			위에서 볼 수 있듯이 Hibernate 기반에서 JTA Transaction 관리는 SpringJDBC를 사용 할 때와 다르지 않다. 상세한 
          			속성 정의 방법에 대해서는<ulink url="http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.6.1-SNAPSHOT/reference/htmlsingle/core.html#core_spring_transaction"> JTA Transaction Service </ulink>
          			를 참고한다.
          		</para>
			</listitem>

        	<listitem>
          		<para>
          			<emphasis role="bold">Test Case</emphasis>
          		</para>

          		<para>
          			다음은 WebLogicJtaTransactionManager를 이용해 Transaction 관리 기능을 테스트 하는 HibernateJTATransactionManager.
          			java 의 일부이다. 
                    <programlisting language="java"><![CDATA[public class HibernateJTATransactionManager {

...중략

/**
 * [Flow #-1] WebLogicJtaTransactionManager Rollback을 이용하여,
 * 초기화 데이터의 입력 작업을 취소시킨 후, 데이터가 제대로 Rollback되었는지 검증한다.
 * 
 * @throws Exception
 *             throws exception which is from hibernate
 */
    public void rollback() throws Exception {
        // 1. insert init data
        Session session = sessionFactory.getCurrentSession();
        SetUpInitData.initializeData(session);

        // 2. rollback transaction
        isRollback();
        endTransaction();

        // 3. begin a new transaction
        startNewTransaction();

        // 4. check if insertion is rollbacked
        Movie movie = (Movie) sessionFactory.getCurrentSession().get(
        Movie.class, "MV-00001");
    }

/**
 * [Flow #-2] WebLogicJtaTransactionManager Commit을 이용하여,
 * 초기화 데이터의 입력 작업을 DB에 반영시킨 후, 데이터가 제대로 Commit되었는지 검증한다.
 * 
 * @throws Exception
 *             throws exception which is from hibernate
 */
    public void commit() throws Exception {
        // 1. insert init data
        Session session = sessionFactory.getCurrentSession();
        SetUpInitData.initializeData(session);

        // 2. commit transaction
        setComplete();
        endTransaction();

        // 3. begin a new transaction
        startNewTransaction();

        // 4. check if insertion is successful
        Movie movie = (Movie) sessionFactory.getCurrentSession().get(
        Movie.class, "MV-00001");
    }
}]]></programlisting>
				</para>
			</listitem>
		</itemizedlist>
	</section>
</chapter>
	

