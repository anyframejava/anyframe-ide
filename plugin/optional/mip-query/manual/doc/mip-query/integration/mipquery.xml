<chapter id="mip_query_integration_mipquery">
	<title>MiPQuery</title>
	<para>
		<![CDATA[프리젠테이션 레이어 개발 시 X-Internet 제품인 MiPlatform 또는 Gauce 등을 기반으로 할 경우 각 제품은 사용자
		입력 사항을 제품 고유의 데이터 형태에 저장하여 전달한다. 따라서 Query 서비스를 이용하여 DB 데이터를 처리하기
		위해서는 "제품 고유의 데이터 전달 형태 <-> Map 또는 VO 간의 변환"을 위한 추가 작업이 필요하며, 이로 인해 대량의
		데이터를 다루는 경우 성능 저하가 발생할 가능성이 크다. Query 서비스에서는 기본 QueryService를 확장하여,
		특정 X-Internet 제품에 최적화된 형태의 구현체를 제공함으로써 개발 편의성과 응답 속도 향상을 도모하고자 한다.
		다음에서는 MiPlatform에 최적화된 MiPQueryService 사용 방법에 대해서 살펴보도록 한다.]]> 
	</para>
	
	<section id="mip_query_integration_mipquery_mipqueryservice">
		<title>MiPQueryService 활용</title>

		<para>
			MiPQueryService는 MiPlatform 고유의 데이터 전달 형태로부터 사용자가 입력한 데이터를 추출하여 해당 DB에 반영하는 
			역할을 수행한다. 그러므로 투비소프트사의 X-Internet 제품인 MiPlatform 기반으로 프리젠테이션 레이어를 개발하는 경우, 
			MiPQueryService를 통해 MiPlatform 고유의 데이터 전달 형태인 	com.tobesoft.platform.data.Dataset, 
			com.tobesoft.platform.data.VariableList를 그대로 이용할 수 있게 된다.
		</para>
			
		<important>
			<title>Pagination시 유의 사항</title>
			<para>
				PagingJdbcTemplate 속성 정의시에는 반드시 DBMS에 적합한 PagingSQLGenerator를 셋팅해 주어야 한다.
				적절한 PagingSQLGenerator가 존재하지 않는 경우에는 QueryService에서 제공하는 org.anyframe.query.impl.jdbc.generator.DefaultPagingSQLGenerator를
				사용할 수 있으나, DefaultPagingSQLGenerator를 이용하여 findXXX() 메소드를 실행하면 QueryService 내부적으로
				조건에 해당하는 모든 데이터를 fetch한 이후 ResultSet Cursor의 위치를 이동시키는 방식으로 특정 페이지에 속한 데이터를
				걸러낸다. 이 때 ResultSet Cursor를 움직이는 로직에서 상당한 시간이 소요되어 다량의 데이터 조회시 성능에 심각한 영향을 
				끼칠 수 있다. 따라서, DefaultPagingSQLGenerator 사용은 권장하지 않는다.
			</para>
		</important>			

		<section id="mip_query_integration_mipquery_mipqueryservice_attribute">
			<title>MiPQueryService 속성 정의 파일 Sample</title>

			<para>
				다음은 MiPQueryService를 정의한 context-miplatform-query.xml 파일의 일부이다. MiPQueryService는 내부적으로 
				RiaQueryService를 통해 데이터 접근 처리를 수행하므로 RiaQueryService에 대한 참조 관계 설정이 필요하다.
				<programlisting language="xml"><![CDATA[<bean id="mipQueryService" class="org.anyframe.mip.query.impl.MiPQueryServiceImpl">
	<property name="namedParamJdbcTemplate" ref="pagingNamedParamJdbcTemplate"/>
	<property name="lobHandler" ref="lobHandler"/>
	<property name="sqlRepository" ref="sqlLoader"/>
	<lookup-method name="getRowCallbackHandler" bean="rowCallbackHandler"/>
	<lookup-method name="getCallableStatementCallbackHandler" bean="callableStatementCallbackHandler"/>
	<lookup-method name="getPrintWriterRowCallbackHandler" bean="printWriterRowCallbackHandler"/>
</bean>	

<bean id="callableStatementCallbackHandler" class="org.anyframe.mip.query.impl.jdbc.mapper.MiPCallableStatementCallbackHandler" scope="prototype"/>
	
<bean id="rowCallbackHandler" class="org.anyframe.mip.query.impl.jdbc.mapper.MiPDataSetCallbackHandler" scope="prototype"/>
	
<bean id="printWriterRowCallbackHandler" class="org.anyframe.mip.query.impl.jdbc.mapper.MiPPrintWriterCallbackHandler" scope="prototype"/>
	
<!-- The original JdbcTemplate definition -->
<bean id="pagingNamedParamJdbcTemplate" class="org.anyframe.query.impl.jdbc.PagingNamedParamJdbcTemplate">
  	<constructor-arg index="0" ref="pagingJdbcTemplate"/>
    <constructor-arg index="1" ref="dataSource"/>
</bean> 
    
<bean id="pagingJdbcTemplate" class="org.anyframe.query.impl.jdbc.PagingJdbcTemplate">
    <constructor-arg ref="dataSource"/>
    <property name="exceptionTranslator" ref="exceptionTranslator"/>
    <property name="paginationSQLGetter" ref="pagingSQLGenerator"/>
</bean>
    
<bean id="pagingSQLGenerator" class="org.anyframe.query.impl.jdbc.generator.OraclePagingSQLGenerator"/>]]></programlisting>
			</para>
		</section>

		<section id="mip_query_integration_mipquery_mipqueryservice_xml">
			<title>매핑 XML 파일 샘플</title>

			<para>
				다음은 앞서 정의한 MiPQueryService가 참조하는 RiaQueryService Bean을 통해 로드된 mapping-mip-query-movie.xml 
				파일의 일부로, Named Parameter를 이용한 쿼리문들을 포함하고 있다.
				<programlisting language="xml"><![CDATA[<query id="createMovie" isDynamic="true" mappingStyle="upper">
	<statement>
		INSERT INTO 
		MOVIE (MOVIE_ID, TITLE, DIRECTOR, GENRE_ID, ACTORS, RUNTIME, RELEASE_DATE, TICKET_PRICE, NOW_PLAYING, POSTER_FILE)
		VALUES (:MOVIE_ID, :TITLE, :DIRECTOR, :GENRE_ID, :ACTORS, :RUNTIME, :RELEASE_DATE, :TICKET_PRICE, :NOW_PLAYING, :POSTER_FILE)
	</statement>
</query>

<query id="updateMovie" isDynamic="true" mappingStyle="upper">
	<statement>
		UPDATE MOVIE
		SET 
			TITLE = :TITLE, 
			DIRECTOR = :DIRECTOR,
			GENRE_ID = :GENRE_ID, 
			ACTORS = :ACTORS, 
			RUNTIME = :RUNTIME, 
			RELEASE_DATE = :RELEASE_DATE,   
			TICKET_PRICE = :TICKET_PRICE, 
			NOW_PLAYING = :NOW_PLAYING
		WHERE
			MOVIE_ID = :MOVIE_ID
	</statement>
</query>

<query id="removeMovie" isDynamic="true" mappingStyle="upper">
	<statement>
		DELETE FROM MOVIE 
		WHERE 
			MOVIE_ID = :MOVIE_ID
	</statement>
</query>

<query id="findMovieByPk" isDynamic="true" mappingStyle="upper">
	<statement>
		SELECT 
			MOVIE_ID, TITLE, DIRECTOR, GENRE_ID, ACTORS, RUNTIME, RELEASE_DATE, TICKET_PRICE, NOW_PLAYING, POSTER_FILE
		FROM MOVIE
		WHERE 
			MOVIE_ID = :MOVIE_ID
	</statement>
</query>

<query id="findMovieList" isDynamic="true" mappingStyle="upper">
	<statement>
		SELECT 
			MOVIE_ID, TITLE, DIRECTOR, GENRE_ID, ACTORS, RUNTIME, RELEASE_DATE, TICKET_PRICE, NOW_PLAYING, POSTER_FILE
		FROM MOVIE
		WHERE 		
			TITLE like '%' || :SEARCH_TITLE || '%'
			AND	NOW_PLAYING = :SEARCH_NOW_PLAYING 
		ORDER BY RELEASE_DATE DESC
	</statement>
</query>]]></programlisting>
			</para>
		</section>

		<section id="mip_query_integration_mipquery_mipqueryservice_testcode">
			<title>테스트 코드 Sample</title>

			<para>
				다음에서는 MiPQueryService를 이용하여 앞서 언급한 매핑 XML 파일에 정의된 INSERT, SELECT, UPDATE, DELETE 쿼리문을 
				실행하는 테스트 코드의 일부이다.
				<programlisting language="java">/**
 * Test code that enters new data in DB through Query service for MiPlatform
 */    
public void insertDataSet() {
    MiPQueryService mipQueryService = (MiPQueryService) context.getBean("mipQueryService");

    <![CDATA[Map<String, String> queryMap = new HashMap<String, String>();]]>
    queryMap.put(MiPQueryService.QUERY_INSERT, "createProduct");

    // Transfer Dataset that should be reflected in map and DB which defines query id that will be used by INSERT, UPDATE, DELETE type.
    // A large amount of data can be saved in Dataset.
    int resultInsert =
            <emphasis role="bold">mipQueryService.update(queryMap, makeProduct());</emphasis>
}

/**
 * Test code that modifies data in DB through Query service for MiPlatform
 */   
public void updateDataSet() {
    MiPQueryService mipQueryService =
            (MiPQueryService) context.getBean("mipQueryService");

    <![CDATA[Map<String, String> queryMap = new HashMap<String, String>();]]>
    queryMap.put(MiPQueryService.QUERY_UPDATE, "updateProduct");
    
    // Transfer Dataset that should be reflected in map and DB which defines query id that will be used by INSERT, UPDATE, DELETE type.
    // A large amount of data can be saved in Dataset.  
    int resultUpdate =
            <emphasis role="bold">mipQueryService.update(queryMap, makeProduct());</emphasis>
}

/**
 * Test code for INSERT, UPDATE, DELETE of data in DB through query service for MiPlatform
 */    
public void processAllDataSet() {
    MiPQueryService mipQueryService =
            (MiPQueryService) context.getBean("mipQueryService");

    <![CDATA[Map<String, String> queryMap = new HashMap<String, String>();]]>
    queryMap.put(MiPQueryService.QUERY_UPDATE, "updateProduct");
    queryMap.put(MiPQueryService.QUERY_INSERT, "createProduct");
    queryMap.put(MiPQueryService.QUERY_DELETE, "removeProduct");
    
    // Transfer Dataset that should be reflected in map and DB which defines query id that will be used by INSERT, UPDATE, DELETE type.
    // A large amount of data can be saved in Dataset.            
    int resultUpdate = <emphasis role="bold">mipQueryService.update(queryMap, makeProducts());</emphasis>
}

/**
 * Test code for INSERT, UPDATE, DELETE of data in DB through query service for MiPlatform
 * In this case, ActionCommand pre-post processing is executed.
 */    
public void processAllDataSetWithActionCommand() {
    MiPQueryService mipQueryService =
            (MiPQueryService) context.getBean("mipQueryService");

    <![CDATA[Map<String, String> queryMap = new HashMap<String, String>();]]>
    queryMap.put(MiPQueryService.QUERY_UPDATE, "updateProduct");
    queryMap.put(MiPQueryService.QUERY_INSERT, "createProduct");
    queryMap.put(MiPQueryService.QUERY_DELETE, "removeProduct");
    
    // Transfer ActionCommand which defines process that should be done before and after accessing Dataset and DB
    // that should be reflected in Map, DB which defines query id used according to INSERT, UPDATE, DELETE type.
    // A large amount of data can be saved in Dataset.     
    int resultUpdate =
            <emphasis role="bold"> mipQueryService.update(queryMap, makeProducts(),
            new ProductActionCommand()</emphasis>);
}

/**
 * Test code for searching data in DB through query service for MiPlatform
 * In this case, search conditions are in VariableList form.
 */     
public void findDataSetWithVariant() {
    MiPQueryService mipQueryService =
            (MiPQueryService) context.getBean("mipQueryService");

    // Transfer query id to be executed, and search conditions in VariableList form
    Dataset resultDataSet =
            <emphasis role="bold">mipQueryService.search("findProductByPk", makeVariantList());</emphasis>
}

/**
 * Test code to search data in DB through query service for MiPlatform
 * In this case, search conditions are in Dataset form.
 */    
public void findListDataSet(int expected) {
    MiPQueryService mipQueryService =
            (MiPQueryService) context.getBean("mipQueryService");
    
    // Transfer query id to be executed and search conditions in Dataset form.    
    Dataset resultDataSet =
            <emphasis role="bold">mipQueryService.search("findProductList",
            makeSearchCondition());</emphasis>
}</programlisting>
			</para>

			<para>
				위 소스 코드 중 testProcessAllDataSetWithActionCommand() 메소드에서는 ActionCommand를 이용하여 
				DB에 데이터를 입력하기 전에 특정 칼럼의 값을 변경하고 있다. 이와 같이 MiPQueryService는 
				org.anyframe.mip.query.MiPActionCommand를 구현한 별도 ActionCommand를 인자로 함께 전달하는 경우 
				입력 데이터를 DB에 반영하기 전/후에 대한 공통 처리를 수행할 수 있도록 지원한다. 예를 들어 입력받은 개별 Row를 DB에 
				신규 등록하기 전에 신규 식별자 값이 셋팅되어야 한다면, Loop을 돌면서 각 Row를 추출한 뒤 식별자를 셋팅하는 별도 로직없이 
				preInsert() 로직 내에 식별자 생성 구문이 추가된 ActionCommand 객체만 전달하면 되는 것이다.
			</para>
		</section>
	</section>
</chapter>
