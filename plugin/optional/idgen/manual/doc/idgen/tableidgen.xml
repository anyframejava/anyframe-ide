<chapter id="idgen_tableid">
    <title>TableIdGenService</title>

	    <para>
	    	TableIdGenService는 ID를 관리하는 특정 테이블을 이용하여 유일한 ID를 얻는다. ID 관리를 위한 이
    		테이블은 id를 생성할 테이블이 어디인지를 명시하는 varchar 타입의 컬럼(디폴트 컬럼명 table_name)과 해당 테이블 아이디 발급 시 사용될 값을 저장하는 integer 타입의 컬럼 (디폴트 컬럼명 next_id)이 필요하다.
    		신규 id를 할당받은 후에 next_id 칼럼의 값은 TableIdGenService를 통해 신규 id 값으로 변경된다. 
    		(단, 신규 id를 얻고자 할 시점에, ID 발급 대상 테이블과 관련된 순번이 ID 관리 테이블에 저장되어 있지 않으면 
    		TableIdGenService는 ID 발급 대상 테이블 이름과 순번 '1'을 ID 관리 테이블에 추가하는 작업을 수행한다. )
    		또한 <link linkend="idgen_idgenstrategy">Generation Strategy </link>
    		을 적용할 경우, TableIdGenSimple Service는 신규 id에 정의된 Strategy를 적용한 결과값을 전달해준다.
    		TableIdGenSimple Service는 다음과 같은 설정을 가질 수 있다.
    	</para>

		<informaltable>
			<caption>TableIdGenService 속성 목록</caption>
	      <tgroup cols="4">
	        <colspec colnum="1" colname="col1" colwidth="2*"/>
	        <colspec colnum="2" colname="col2" colwidth="6*"/>
	        <colspec colnum="3" colname="col3" colwidth="1*"/>
	        <colspec colnum="4" colname="col4" colwidth="1*"/>
	        <thead>
	          <row>
	            <entry align="center">Property Name</entry>
	            <entry align="center">Description</entry>
	            <entry align="center">Required</entry>
	            <entry align="center">Default Value</entry>
	          </row>
	        </thead>
	        <tbody>
	          <row>
	            <entry>dataSource</entry>
	            <entry>TableIdGenSimple Service를 사용하는 경우 필요하다. Database 연결을 위한
	            DataSourceService를 지정한다.</entry>
	            <entry align="center">Y</entry>
	            <entry align="center">N/A</entry>
	          </row>
	          <row>
	            <entry>strategy</entry>
	            <entry>Id Generation Strategy를 지정한다. 기본적으로 prefix 및 suffix, 신규 Id,
	            paddingChar를 조합한 Id를 전달하는 MixStrategy를 사용한다.</entry>
	            <entry align="center">N</entry>
	            <entry align="center">N/A</entry>
	          </row>
	          <row>
	            <entry>blockSize</entry>
	            <entry>
	            	ID를 발급할 때마다 매번 데이터베이스에 접속한다면 시스템 성능 저하를 가져오므로, 한번에
	            	TableIdGenService 내에서 발급 받아올 ID의 개수를 정할 수 있다.
	            </entry>
	            <entry align="center">N</entry>
	            <entry align="center">10</entry>
	          </row>
	          <row>
	            <entry>table</entry>
	            <entry>발급한 ID를 관리하기 위한 테이블 이름.</entry>
	            <entry align="center">N</entry>
	            <entry align="center">ids</entry>	          
	          </row>
	          <row>
	            <entry>key</entry>
	            <entry>
	            	어떤 것에 발급하는 ID인지를 저장하기 위한 키 이름. 예를 들어, Order와 Product, 두 가지에 ID를
	            	발급할 상황이라면 하나는 key 속성값으로 “order”, 또다른 하나는 "product"라고 지정할 수 있다.
	            	이 경우 TableIdGenService을 구현 클래스로 하는 2개의 서로 다른 Bean이 정의되어야 하므로 속성 정의 간편화를
	            	위해서는 관련 메소드 호출시 발급 대상을 입력 인자로 전달할 수도 있다.
	            </entry>
	            <entry align="center">N</entry>
	            <entry align="center"></entry>
	          </row>
	          <row>
	            <entry>useBigDecimals</entry>
	            <entry>Long 타입의 ID 대신 BigDecimal 타입의 ID를 사용하고자 할 때 쓴다.</entry>
	            <entry align="center">N</entry>
	            <entry align="center">false</entry>	          
	          </row>
	          <row>
	            <entry>keyColumn</entry>
	            <entry>신규 id를 발급하는 테이블의 이름을 저장하기 위한 컬럼의 이름. (컬럼 타입은 char 혹은 varchar)</entry>
	            <entry align="center">N</entry>
	            <entry align="center">table_name</entry>	          
	          </row>
	          
	          <row>
	            <entry>nextValueColumn</entry>
	            <entry>발급된 최신 ID를 저장하기 위한 컬럼의 이름. (컬럼 타입은 integer 타입)</entry>
	            <entry align="center">N</entry>
	            <entry align="center">next_id</entry>	          
	          </row>
	          
	        </tbody>
	      </tgroup>
	    </informaltable>
	
	<section id="idgen_tableid_samples">
	<title>Implementation</title>
	
		<section id="idgen_tableid_samples_basic">
			<title>기본적인 설정 및 사용방법</title>
			<itemizedlist>
			<listitem>
				<para><emphasis role="bold">Configuration</emphasis></para>

				<para>
					다음은 TableIdGenService의 속성을 정의한 context-idgen.xml의 일부이다.
          			TableIdGenService는 기본적으로 mix Strategy를 적용하고 있으며,
          			Genre 테이블에 유일한 id를 제공하기 위해 IDS라는 ID 관리 테이블을 사용할 것이다.
          			다음 속성 기반의 TableIdGenService 실행을 위해서는 IDS라는 테이블에 
          			[TABLE_NAME:<emphasis role="bold">IDGEN_MOVIE</emphasis>, NEXT_ID:초기값]와 같은 정보가 추가되어 있다라고 전제해 보자.
          			<programlisting language="xml"><![CDATA[<bean name="TableIdGenService" class="org.anyframe.idgen.impl.TableIdGenServiceImpl"
	destroy-method="destroy">
    <property name="dataSource" ref="dataSource" />
    <property name="blockSize" value="1"/>
    <property name="table" value="IDS"/>
</bean>]]></programlisting>
				</para>
        	</listitem>

        	<listitem>
          		<para><emphasis role="bold">TestCase</emphasis></para>

          		<para>
          			다음은 앞서 정의한 속성 설정을 기반으로 하여 TableIdGenService를 이용하여
          			유일한 id를 추출하는 IdgenServiceTest.java 코드의 일부이다.
         			<programlisting language="java">
@Test
public void testSimpleTableId() {
    // 1. get id twice to compare with each other
    String id1 = tableidSimple.getNextStringId(<emphasis role="bold">"IDGEN_MOVIE</emphasis>);
    String id2 = tableidSimple.getNextStringId(<emphasis role="bold">"IDGEN_MOVIE</emphasis>);
    assertEquals("fail to get differenct id", true, !id1.equals(id2));
}</programlisting>
				</para>
				
        	</listitem>
      	</itemizedlist>
		</section>
		
		
		<section id="idgen_tableid_samples_custom">
			<title>사용자 정의 컬럼 설정 방법</title>
			<para>
				TableIdGenService에서 기본적으로 사용하는 컬럼명이 아닌 프로젝트에서 정의한 다른 컬럼명을 사용하기 위해서는 keyColumn, nextValueColumn 속성 정의가 요구된다. 
			</para>
			
			<itemizedlist>
				<listitem>
					<para><emphasis role="bold">Configuration</emphasis></para>
				
					<para>
						다음은 TableIdGenService의 속성을 정의한 설정 파일의 일부로써 사용자 정의 컬럼에 대한 정의를 포함하고 있다.
	          			<programlisting language="xml"><![CDATA[<bean name="tableIdGenWithCustomColumn" class="org.anyframe.idgen.impl.TableIdGenServiceImpl" destroy-method="destroy">
    <property name="dataSource" ref="dataSource"/>
    <property name="blockSize" value="1"/>
    <property name="table" value="MY_IDS"/>
    <property name="key" value="test"/> ]]>
<emphasis role="bold">    &lt;property name="keyColumn" value="MY_KEY"/&gt;
    &lt;property name="nextValueColumn" value="MY_ID"/&gt;	</emphasis>			
<![CDATA[</bean>]]></programlisting>
						위 속성 정의에 의하면 TableIdGenService 실행을 위해서 MY_KEY, MY_ID라는 컬럼을 가진 MY_IDS라는 테이블이 존재해야 할 것이다.
					</para>
				</listitem>
			
				<listitem>
					<para><emphasis role="bold">TestCase</emphasis></para>
          			<para>
	          			다음은 앞서 정의한 설정을 기반으로 TableIdGenService를 이용하여
	          			유일한 id를 추출하는 IdgenServiceTest.java 코드의 일부이다.
         			<programlisting language="java">
@Test
public void testWithCumstomColumn() {
    // 1. get id twice to compare with each other
    String id1 = tableidCustomColumn.getNextStringId();
    String id2 = tableidCustomColumn.getNextStringId();
		
    assertEquals("fail to get differenct id", true, !id1.equals(id2));
}</programlisting>
	          			위 코드에 의하면 keyColumn('MY_KEY')으로부터 key(<emphasis role="bold">'test'</emphasis>)의 속성값에 해당하는 테이블을 대상으로  
	          			nextId 값을 추출하게 될 것이다. 따라서 테이블명을 구분하기 위한 별도 입력 인자없이 getNextStringId()를 호출할 수 있게 된다.
					</para>
				</listitem>
			</itemizedlist>
		</section>		
	</section>
</chapter>