<chapter id="cxf_jaxrs">
	<title>JAX-RS Frontend</title>
	<para>
		JAX-RS (JSR-311)를 사용하여 Annotation 설정을 통해 RESTful Web Services를 구현할
  		수 있게 해주는 Frontend 모델이다.
  	</para>

  	<para>
  		JAX-RS(Java API for RESTful Web Services)는 자바 플랫폼 상에서 REST 방식의 웹 서비스 구현을 지원하는 자바 API로 
  		Java SE 5에서 도입된 어노테이션(Annotation)을 사용하여 RESTful Web Services 서버 모듈의 개발 및 배포를 쉽게 하고 있다. 
  		오픈 소스 중 대표적인 구현체들로 <ulink url="http://cxf.apache.org/docs/restful-services.html">Apache CXF</ulink>, <ulink url="http://jersey.java.net/">Jersey</ulink>, <ulink url="http://www.restlet.org/">Restlet</ulink>, <ulink url="http://www.jboss.org/resteasy">JBoss RESTEasy</ulink> 등이 있다.</para>

<section id="cxf_restful_jaxrs">
	<title>JAX-RS 활용한 RESTful 서비스 구현</title>
	<para>
		<ulink url="http://jcp.org/en/jsr/detail?id=311">JAX-RS(JSR-311)
    	Spec</ulink>. 을 이용하여 RESTful 서비스를 구현하는데, Apache CXF에서 Spec.에 대한 구현체를 제공하여
    	표준 방식으로 RESTful 서비스를 작성할 수 있게 한다. JAX-RS에서 제공하는 Annotation 설정을 이용한다.
    </para>
    <para>
    	Web Service로 노출시킬 서비스 인터페이스 클래스의 각 method별로 JAX-RS에서 제공하는
    	Annotation(javax.ws.rs.*)을 설정하여 RESTful Web Service를 손쉽게 구현할 수 있다. (ex. @Path, @GET, @GET, @PUT, @DELETE, @Produces 등)
    </para>
    
    <para>
    	다음은 JAX-RS를 활용하여 RESTful 서비스 구현 시 Server와 Client 단에서 어떻게 사용해야 하는지에
    	대한 사용법이다.
    </para>
    <itemizedlist>
 		<listitem>
        	<para>Server Configuration</para>
      		<orderedlist>
        		<listitem>
          			<para>
          				<link linkend="cxf_restful_jaxrs_webservice">RESTful Web Service 작성</link>
          			</para>
        		</listitem>
        		<listitem>
          			<para>
          				서버 구동
          			</para>
          			<itemizedlist>
            			<listitem>
              				<para>
              					<link linkend="cxf_restful_jaxrs_serverconfig">Spring
              					Configuration XML - <![CDATA[<jaxrs:server/> tag 사용]]></link>
              				</para>
            			</listitem>            
          			</itemizedlist>
        		</listitem>
			</orderedlist>        	
      	</listitem>
	    <listitem>
     		<para>Client Configuration</para>
			<orderedlist>
        		<listitem>
          			<para>
          				클라이언트 작성
          			</para>
          			<itemizedlist>
            			<listitem>
              				<para>
              					<link linkend="cxf_restful_jaxrs_clientconfig">Spring
              					Configuration XML - <![CDATA[<jaxrs:client/> tag 사용]]></link>
              				</para>
            			</listitem>            
          			</itemizedlist>
        		</listitem>
			</orderedlist>        	     		
      	</listitem>
    </itemizedlist>

    <section id="cxf_restful_jaxrs_webservice">
		<title>RESTful Web Service 작성</title>

      	<para>
      		Movie Service를 JAX-RS Annotation을 사용하여 RESTful Web Services로 노출시켜보도록 한다.
      	</para>
      	<para>
      	RESTful Web Services를 통해 접근할 수 있게 웹 리소스를 정의하는데, 웹 리소스는 리소스 클래스로 구현하며 리소스 메소드를 이용하여 요청을 처리하도록 한다. 
      	이때 리소스 메소드는 public 지시자로 작성하며 리턴 타입으로 void나 Response 혹은 다른 자바 타입 등을 사용할 수 있다.  
      	</para>

	<para>Annotation 설정 정보는 다음 표와 같다.
	</para>
   	<informaltable>
   			<caption>JAX-RS Annotation 목록</caption>
      		<tgroup cols="3">
            	<colspec colnum="1" colname="col1" colwidth="2*"/>
                <colspec colnum="2" colname="col2" colwidth="4*"/>
                <colspec colnum="3" colname="col3" colwidth="4*"/>
        		<thead>
          			<row>
            			<entry align="center">Annotation</entry>

            			<entry align="center">Description</entry>
            			
            			<entry align="center">Example</entry>
          			</row>
        		</thead>

        		<tbody>
          			<row>
			            <entry>@Path</entry>
			            <entry>리소스를 URI와 결합시키기 위해 @Path Annotation을 사용하며 상대 경로로 표현하며 이 Annotation은 클래스와 메소드에 설정할 수 있다. 
							   @Path Annotation 설정 값은 정규 표현식을 사용할 수도 있다.
			            </entry>
			            <entry>@Path("/movies/"), @Path("/{movieId}/"), @Path("/subresource/{n1:.*}")</entry>
          			</row>
          			<row>
			            <entry>@HttpMethod</entry>
			            <entry>JAX-RS는 @GET, @PUT, @POST, @DELETE와 같은 다양한 HTTP method Annotation을 제공하고 있다. @HttpMethod Annotation을 이용하면 커스텀 Annotation을 만들어 사용할 수 있다.
			            </entry>			            
			            <entry>@Target({ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @HttpMethod("PATCH") public @interface PATCH {}</entry>
          			</row>          			
          			<row>
            			<entry>@Produces</entry>
            			<entry>[Media Type] HTTP Response의 MIME Type을 지정한다. 클라이언트에 반환되는 타입을 무엇으로 할 것인지 지정하기 위한 Annotation이다. Accept Header 정보를 통해 타입을 지정할 수 있다. </entry>			       
			            <entry>@Produces("application/xml"), @Produces("application/json")</entry>
          			</row>
					<row>
            			<entry>@Consumes</entry>
            			<entry>[Media Type] HTTP Request의 MIME Type을 지정한다. Request body에 대한 타입을 무엇으로 할 것인지 지정하기 위한 Annotation이다. Content-Type Header 정보를 통해 타입을 지정할 수 있다. 
            			</entry>
            			<entry>@Consumes({"application/xml", "application/json"}), @Consumes("application/x-www-form-urlencoded")</entry>
          			</row>    
          			<row>
            			<entry>@GET</entry>
            			<entry>
            				[HTTP Method] 리소스 메소드에 설정하는 Annotation으로 HTTP 요청 메소드 타입을 표시한다. 목록 및 상세 조회 메소드에 사용한다. 
            			</entry>
            			<entry>@GET	@Path("/{movieId}/") Response get(@PathParam("movieId") String movieId)</entry>
          			</row>
          			<row>
            			<entry>@POST</entry>
            			<entry>
            				[HTTP Method] 리소스 메소드에 설정하는 Annotation으로 HTTP 요청 메소드 타입을 표시한다. 생성 메소드에 사용한다.
            			</entry>
            			<entry>@POST Response create(Movie movie)</entry>
          			</row>
          			<row>
            			<entry>@PUT</entry>
            			<entry>
            				[HTTP Method] 리소스 메소드에 설정하는 Annotation으로 HTTP 요청 메소드 타입을 표시한다. 수정 메소드에 사용한다.
            			</entry>
            			<entry>@PUT Response update(Movie movie)</entry>
          			</row>
          			<row>
            			<entry>@DELETE</entry>
            			<entry>
            				[HTTP Method] 리소스 메소드에 설정하는 Annotation으로 HTTP 요청 메소드 타입을 표시한다. 삭제 및 취소 메소드에 사용한다. 
            			</entry>
            			<entry>@DELETE @Path("/{movieId}/") Response remove(@PathParam("movieId") String movieId)</entry>
          			</row> 
          			<row>
            			<entry>@PathParam</entry>
            			<entry>
            				[PARAMETER] URI template에 명시되어 있는 값을 얻는다. 
            			</entry>
            			<entry>get(@PathParam("movieId") String movieId)</entry>
          			</row>
          			<row>
            			<entry>@QueryParam</entry>
            			<entry>
            				[PARAMETER] URI query 파라미터 값을 얻는다. 객체로 바로 매핑하여 사용하는 경우 @QueryParam Annotation 값에 빈 스트링을 입력한다.  
            			</entry>
            			<entry><![CDATA[http://.../movies?title=Avatar&pageIndex=1]]>와 같은 형태로 요청이 된 경우, 
            			getPagingList(@QueryParam("") Movie movie, @QueryParam("pageIndex") int pageIndex) 와 같이 title을 멤버변수로 갖는 Movie 객체로 바로 값이 바인딩될 수 있다.</entry>
          			</row>  
          			<row>
            			<entry>@FormParam</entry>
            			<entry>
            				[PARAMETER] Form Submit이 발생한 경우 Form에 저장된 값을 읽어낼 때 사용되는 Annotation이다. 
            				메소드 파라미터 중, Annotation이 없는 파라미터를 엔티티 파라미터라고 하는데 @FormParam Annotation을 사용하는 경우 엔티티 파라미터의 타입은 <![CDATA[MultivaluedMap<String,String>]]>이어야 한다.
            			</entry>
            			<entry>create(@FormParam("movieId") String movieId, <![CDATA[MultivaluedMap<String, String> form]]>)</entry>
          			</row>  
          			<row>
            			<entry>@HeaderParam</entry>
            			<entry>
            				[PARAMETER] header의 값을 얻는다.
            			</entry>
            			<entry>Book getBookByHeader(@HeaderParam("BOOK2") String id) </entry>
          			</row> 
          			<row>
            			<entry>@MatrixParam</entry>
            			<entry>
            				[PARAMETER] matrix URI로부터 값을 얻는다. matrix URI란 http://.../movies/color;lat=50;long=20;scale=32000와 같이 세미콜론을 사용하여 작성된 URI를 말한다. 
            			</entry>
            			<entry>
            			Book getBookByMatrixParams(@MatrixParam("first") String s1, @MatrixParam("second") String s2)
            			</entry>
          			</row>    
          			<row>
            			<entry>@CookieParam</entry>
            			<entry>
            				[PARAMETER] 쿠키 값을 얻는다.
            			</entry>
            			<entry>Book getTheBook2(@CookieParam("n5") String name5)</entry>
          			</row> 
          			<row>
            			<entry>@DefaultValue</entry>
            			<entry>
            				[PARAMETER] @PathParam, @QueryParam, @FormParam, @HeaderParam, @MatrixParam, @CookieParam Annotation에서 기본값을 설정할 때 사용한다. 
            			</entry>
            			<entry>getPagingList(@QueryParam("pageIndex") @DefaultValue("1") int pageIndex)</entry>
          			</row>    
          			<row>
            			<entry>@Encoded</entry>
            			<entry>
            				[PARAMETER] @PathParam, @QueryParam, @FormParam, @MatrixParam Annotation 사용 시 파라미터 값을 자동으로 디코딩시키지 않을 때 사용한다. 
            				이 Annotation은 클래스와 메소드에 설정할 수 있다. 클래스에 설정한 경우, 모든 메소드의 모든 파라미터 값에 대해서 디코딩시키지 않게 된다.
            			</entry>
            			<entry>@Encoded</entry>
          			</row>     
          			<row>
            			<entry>@Context</entry>
            			<entry>HTTP Request Header나 URI 등의 Inject된 정보들을 이용할 때 사용한다.
            			</entry>
            			<entry>get(@Context UriInfo uri){ <![CDATA[MultivaluedMap<String,String>]]> params = uri.getQueryParameters();}, 
            				   get(@Context HttpHeaders header) { <![CDATA[Map<String,Cookie>]]> map = header.getCookies();}
            			 </entry>
          			</row>      			      			
        		</tbody>
      		</tgroup>
		</informaltable>
		
      	<section id="cxf_restful_jaxrs_serverconfig_samples">
        	<title>Samples</title>

	        <para>다음은 Movie Service의 인터페이스 클래스 정의에 대한 예제이다.</para>

        	<itemizedlist>
          		<listitem>
            		<para>Interface Class</para>
            		<para>
            			다음은 Movie Service의 인터페이스 클래스를 작성한 MovieService.java 의 일부이다.
            			Annotation 설정에 유의하도록 한다. 
            			<programlisting language="java"><![CDATA[import javax.ws.rs.Path;
import javax.ws.rs.Produces;

]]><emphasis role="bold">@Path("/movies/")</emphasis><![CDATA[
]]><emphasis role="bold">@Produces("application/xml")</emphasis><![CDATA[
public interface MovieService {

    ]]><emphasis role="bold">@POST</emphasis><![CDATA[
    Response create(Movie movie) throws Exception;

    ]]><emphasis role="bold">@GET</emphasis><![CDATA[
    ]]><emphasis role="bold">@Path("/{movieId}/")</emphasis><![CDATA[
    Response get(@PathParam("movieId") String movieId)
           throws Exception;

    ]]><emphasis role="bold">@PUT</emphasis><![CDATA[
    Response update(Movie movie) throws Exception;

    ]]><emphasis role="bold">@DELETE</emphasis><![CDATA[
    ]]><emphasis role="bold">@Path("/{movieId}/")</emphasis><![CDATA[
    Response remove(@PathParam("movieId") String movieId)
           throws Exception;

    ]]><emphasis role="bold">@GET</emphasis><![CDATA[
	Response getPagingList(@QueryParam("") Movie movie,
			@QueryParam("pageIndex") @DefaultValue("1") int pageIndex)
			throws Exception;
중략...]]></programlisting>
    				</para>
          		</listitem>
        		<listitem>
          			<para>
          				Implementation Class
          			</para>

          			<para>
          				Interface Class를 구현한 클래스로 JAX-RS 관련 Annotation 설정 부분 없이 작성될 수 있다. 
          				이때 서비스 메소드 별로 Response 객체를 리턴할 수도 있고 리턴하지 않을 수도 있다. cxf-jaxrs plugin 샘플 코드로 제공되는 예제에서는 
          				Response 객체를 리턴하는 것으로 구현되어 있는데 이는 Response 객체에 Status Code 값을 설정하여 보내줄 수 있기 때문이다.
          			</para>
          			<para>	
          				다음은 Movie Service의 인터페이스 클래스를 구현한 MovieServiceImpl.java 의 일부이다.
          				<programlisting language="java"><emphasis role="bold">@Service("cxfJaxRsMovieService")</emphasis><![CDATA[
@Transactional(rollbackFor = { Exception.class }, propagation = Propagation.REQUIRED)
public class MovieServiceImpl implements MovieService {

	@Inject
	@Named("cxfJaxRsMovieDao")
	private MovieDao movieDao;

	public Response create(Movie movie) throws Exception {
		movieDao.create(movie);
		return  ]]><emphasis role="bold">Response.status(Status.CREATED).build();</emphasis><![CDATA[
	}

	public Response get(String movieId) throws Exception {
		Movie movie = movieDao.get(movieId);
		if (movie == null)
		    ]]><emphasis role="bold">return Response.status(Status.NOT_FOUND).build();</emphasis><![CDATA[
		return ]]><emphasis role="bold">Response.ok(movie).build();</emphasis><![CDATA[
	}

	public Response update(Movie movie) throws Exception {
		this.movieDao.update(movie);
		return ]]><emphasis role="bold">Response.status(Status.NO_CONTENT).build();</emphasis><![CDATA[
	}

	public Response remove(String movieId) throws Exception {
		this.movieDao.remove(movieId);
		return ]]><emphasis role="bold">Response.status(Status.NO_CONTENT).build();</emphasis><![CDATA[
	}

	public Response getPagingList(Movie movie, int pageIndex) throws Exception {
		ResultPage resultPage = new ResultPage();
		resultPage.setPage(this.movieDao.getPagingList(movie, pageIndex));
		return ]]><emphasis role="bold">Response.ok(resultPage).build();</emphasis><![CDATA[
	}
중략...]]></programlisting></para>
				</listitem>   
				
				<listitem>
          			<para>
          				Java Beans Class
          			</para>				
            		<para>
            			다음은 Movie Service의 인터페이스 클래스에서 상세 조회 시 리턴 값으로 사용하는
            			Movie.java 의 일부이다. Movie 클래스 정의 시 작성한 @XmlRootElement Annotation 설정에 유의하도록 한다. 
            			JAXB를 이용하여 XML을 JavaBeans 객체로 변환 시 이 Annotation 정보를 이용한다.
            			<programlisting language="java">import javax.xml.bind.annotation.XmlRootElement;

@<emphasis role="bold">XmlRootElement</emphasis>
public class Movie implements Serializable {
	private String movieId;

	@NotNull
	@Size(min = 1, max = 50)
	private String title = "";
	
	@NotNull
	@Size(min = 1, max = 50)
	private String director;
	
중략...</programlisting>
    				</para>
    							
            		<para>
            			다음은 Movie Service의 인터페이스 클래스에서 목록 조회 시 리턴 값으로 사용하는
            			ResultPage.java 의 일부이다. ResultPage 클래스 정의 시 작성한 @XmlRootElement와 @XmlSeeAlso(Movie.class) Annotation 설정에 유의하도록 한다. 
            			JAXB를 이용하여 XML을 JavaBeans 객체로 변환 시 이 Annotation 정보를 이용한다. 특히 목록 조회 결과 시 사용되는 리턴 값은
            			내부 멤버 변수로 Page 객체를 사용하는데 이때 이 Page 클래스는 org.anyframe.pagination.Page 클래스로 내부에 Collection 객체를 가지고 있다. 이 Collection 객체내에 저장된
            			JavaBeans 객체를 JAXB Databinding 시키기 위해 @XmlSeeAlso(Movie.class) Annotation을 설정하고 있다.
            			<programlisting language="java">import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import org.anyframe.pagination.Page;

@<emphasis role="bold">XmlRootElement</emphasis>
@<emphasis role="bold">XmlSeeAlso(Movie.class)</emphasis>
public class ResultPage implements Serializable {
	private Page page;

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}
중략...</programlisting>
    				</para>    								
				</listitem>				
        		<listitem>
          			<para>
          				Exception Transfer Aspect for error handling
          			</para>

          			<para>
          				Movie Service의 비즈니스 메소드 수행 중 에러가 발생하는 경우, Response 객체에 Internal Server Error(500) Code 값을 전달해 주기 위해 ExceptionTransfer Aspect 클래스를
          				작성한다. 
          			</para>
          			<para>	
          				다음은 ExceptionTransfer.java 의 일부이다.
          				<programlisting language="java"><emphasis role="bold">@Aspect</emphasis><![CDATA[
@Service("cxfJaxRsExceptionTransfer")
public class ExceptionTransfer {

    ]]><emphasis role="bold">@Around("execution(* myproject.cxf.jaxrs..*Impl.*(..))")</emphasis><![CDATA[
	public Object aroundExecuteServiceMethod(ProceedingJoinPoint thisJoinPoint)
			throws Throwable {
		Object target = thisJoinPoint.getTarget();
		String className = target.getClass().getSimpleName().toLowerCase();
		String opName = (thisJoinPoint.getSignature().getName()).toLowerCase();

		Log logger = LogFactory.getLogger(target.getClass());

		logger.debug("***** Around Advice of ExceptionTransfer [" + className + "."
				+ opName + "()]");

		// before logic
		Object retVal = null;
		try {
			retVal = thisJoinPoint.proceed();
		} catch (Exception e) {
			]]><emphasis role="bold">return Response.serverError().build();</emphasis><![CDATA[
		}
		// after logic
		return retVal;
	}	
중략...]]></programlisting></para>
				</listitem> 				       	
        	</itemizedlist>
      	</section>
	</section>
	
    <section id="cxf_restful_jaxrs_serverconfig">
		<title>Spring Configuration XML - <![CDATA[<jaxrs:server/> tag 사용]]></title>

    	<para>
    		작성된 서비스를 Web Service로 노출시키는 서버를 Spring Configuration XML - <![CDATA[<jaxrs:server/> tag를 사용]]>하여 구동시켜보도록 한다.
    	</para>
    	<para>
    		<![CDATA[<jaxrs:server/> tag]]>의 각 속성값에 대한 설명은 다음 표와 같다. 아래 표에 나와있지 않은 속성들도 여러
    		가지가 존재한다. 단, 여기서는 필수적으로 작성해야 하는 속성값에 대한 설명을 작성해놓은 것으로 다양한 사용법에 대한 설명은 
    		<ulink url="http://cxf.apache.org/docs/jax-rs.html#JAX-RS-ConfiguringJAXRSservicesincontainerwithSpringconfigurationfile.">JAX-RS Spring Configuration</ulink> 내용을 참고하도록 한다.
    	</para>

    	<informaltable>
    		<caption><![CDATA[<jaxrs:server/>]]> 속성 목록</caption>
      		<tgroup cols="4">
            	<colspec colnum="1" colname="col1" colwidth="2*"/>
                <colspec colnum="2" colname="col2" colwidth="6*"/>
                <colspec colnum="3" colname="col3" colwidth="1*"/>
                <colspec colnum="4" colname="col4" colwidth="1*"/>

        		<thead>
          			<row>
            			<entry align="center">Property Name</entry>

            			<entry align="center">Description</entry>

            			<entry align="center">Required</entry>

            			<entry align="center">Default Value</entry>
          			</row>
        		</thead>

        		<tbody>
          			<row>
			            <entry>id</entry>
			
			            <entry>spring bean id를 작성한다.</entry>
			
			            <entry align="center">Y</entry>
			
			            <entry align="center">N/A</entry>
          			</row>
          			<row>
            			<entry>address</entry>

            			<entry>서비스가 동작할 주소를 상대 경로로 작성한다.</entry>

			            <entry align="center">Y</entry>

			            <entry align="center">N/A</entry>
          			</row>
					<row>
            			<entry>[Child Tag] serviceBeans</entry>

            			<entry>
            				RESTful Web Services로 노출할 구현 클래스를 작성하는데 클래스명을 직접 작성하거나 해당 클래스에 대한 spring bean id를 작성한다.
            				(ex. <![CDATA[<bean class="myproject.cxf.jaxrs.moviefinder.service.impl.MovieServiceImpl"/> or <ref bean="cxfJaxRsMovieService" />]]>)
            			</entry>

            			<entry align="center">Y</entry>

            			<entry align="center">N/A</entry>
          			</row>          			
        		</tbody>
      		</tgroup>
		</informaltable>

    	<section id="cxf_restful_jaxrs_serverconfig_sample">
      		<title>Samples</title>

      		<para>
      			<![CDATA[다음은 Spring Configuration XML - <jaxrs:server/> tag를 사용하여
      			Movie Service를 Web Service로 노출시키는 서버를 구동하는 예제이다.]]>
      		</para>

      		<itemizedlist>
        		<listitem>
          			
          			<para>
          				<![CDATA[다음은 비즈니스 레이어의 서비스를 Web Service로 노출시키는 <jaxrs:server/>
          				tag 속성을 정의한 context-cxf-jaxrs.xml 의 일부이다.]]>
          				<para>
          				Configuration
          			</para><programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cxf="http://cxf.apache.org/core"
  ]]><emphasis role="bold">xmlns:jaxrs="http://cxf.apache.org/jaxrs"</emphasis><![CDATA[	
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
  ]]><emphasis role="bold">http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd</emphasis><![CDATA["> 
          			
    <!-- Load CXF modules from cxf.jar -->
    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" /> 
	
	<]]><emphasis role="bold">jaxrs:server</emphasis><![CDATA[ id="restCxfJaxRsMovieService" address="/movie">
		<jaxrs:serviceBeans>
			<ref bean="cxfJaxRsMovieService" />
		</jaxrs:serviceBeans>
		<!-- Enable message logging using the CXF logging feature -->
		<jaxrs:features>
			<cxf:logging />
		</jaxrs:features>
	</jaxrs:server>
중략...
]]></programlisting>
    				</para>

          			<para>
          				Jetty 혹은 Tomcat 서버 등의 WAS를 이용하여 웹 어플리케이션을 구동하고 비즈니스 레이어의 서비스를 Web Service로
         			 	노출시키게 되는데, 이때 web.xml 파일에 Spring 속성 정의 XML 파일을
          				org.springframework.web.context.ContextLoaderListener를 이용하여 등록시켜 줘야
          				한다. 다음은 CXFServlet과 ContextLoaderListener를 정의한 web.xml의 일부이다. 
          				<programlisting language="xml"><![CDATA[<web-app 
    중략...
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:/spring/context-*.xml
        </param-value>
    </context-param>
	
    <listener>
        <listener-class>]]><emphasis role="bold">org.springframework.web.context.ContextLoaderListener</emphasis><![CDATA[</listener-class>
    </listener>
	중략...
    <!-- cxf-configuration-START -->  
    <servlet>
        <servlet-name>CXF-JAXRS-Servlet</servlet-name>
           <servlet-class>]]><emphasis role="bold">org.apache.cxf.transport.servlet.CXFServlet</emphasis><![CDATA[</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>	
	
    <servlet-mapping>
        <servlet-name>CXF-JAXRS-Servlet</servlet-name>
        <url-pattern>/cxf-jaxrs/*</url-pattern>
    </servlet-mapping>	    
    중략...
</web-app>]]></programlisting>
					</para>
        		</listitem>
      		</itemizedlist>
    	</section>
  	</section>

	<section id="cxf_restful_jaxrs_clientconfig">
      	<title>Spring Configuration XML - <![CDATA[<jaxrs:client/> tag 사용]]></title>

      	<para>
      		RESTful Web Services에 접근하기 위한 클라이언트를 작성한다. Apache CXF에서 제공하는 WebClient API를 이용하면 손쉽게 클라이언트 코드를 작성할 수 있다. 
      		여기서는 간단한 예제를 중심으로 설명하고 있으므로 상세한 내용은 <ulink url="http://cxf.apache.org/docs/jax-rs.html#JAX-RS-ClientAPI">Apache CXF 매뉴얼 내용 중 JAX-RS Client API 부분</ulink>을 참고하도록 한다. 
      	</para>

		<section id="cxf_restful_jaxrs_clientconfig_samples">
        	<title>Samples</title>
        	<para>
        		다음은 Spring MVC Controller에서 <![CDATA[<jaxrs:client/> tag]]>와 WebClient API를 이용하여 RESTful Web
        		Services로 노출된 Movie Service에 접근하는 예제이다. 
        		이때, RESTful WebService의 결과 값이 XML 형태로 리턴되는데 이를 JAXB Databinding을 통해 JavaBeans로 객체 변환하여 클라이언트 코드에서 사용할 수 있다.
        	</para>
	        <itemizedlist>
          		<listitem>
            		<para>Spring Configuration XML Client 설정</para>

		            <para>
		            	RESTful 서비스에 접근하기 위한 클라이언트를 구현할 때 Spring 설정 파일을 이용할 수 있다.
		            </para>
 
		            <para>
		            <![CDATA[다음은 RESTful 서비스에 접근하기 위한 클라이언트를 구현하기 위해 <jaxrs:client/> tag 속성을 정의한 cxf-jaxrs-servlet.xml의 일부이다.]]>
          				<para>
          				Configuration
          				</para>
            			<programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    ]]><emphasis role="bold">xmlns:jaxrs="http://cxf.apache.org/jaxrs"</emphasis><![CDATA[
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    ]]><emphasis role="bold">http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd</emphasis><![CDATA[">
    
	<]]><emphasis role="bold">jaxrs:client</emphasis><![CDATA[ id="cxfJaxRsClientMovieService"
		address="http://localhost:8080/myproject/cxf-jaxrs" serviceClass="myproject.cxf.jaxrs.moviefinder.service.MovieService">
	</jaxrs:client>
  중략...]]></programlisting>
					</para>
				</listitem>		        
          		<listitem>
            		<para>Exception Handling</para>
		            <para>
		            	RESTful Web Services를 호출하여 사용 시, 에러가 발생하는 경우 WebClient에서 javax.ws.rs.WebApplicationException을 throw하고 있으므로 이 Exception을 처리하는 
		            	Exception Resolver를 Spring Configuration XML에 등록하여 사용하도록 한다.
            		</para>
            		<para>
            			다음은 SimpleMappingExceptionResolver 클래스를 정의한 cxf-jaxrs-servlet.xml의 일부이다.
            			javax.ws.rs.WebApplicationException이 발생하는 경우 default error view가 아닌 cxfJaxRsError view로 이동하도록 설정한다.
            			<programlisting language="xml"><![CDATA[<bean id="cxfJaxRsExceptionResolver"
	class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	<property name="exceptionMappings">
		<props>
		    <prop key="]]><emphasis role="bold">javax.ws.rs.WebApplicationException</emphasis><![CDATA[">cxf-jaxrs/common/error</prop>
		</props>
	</property>
	<property name="defaultErrorView" value="forward:/sample/common/error.jsp" />
	<property name="order" value="1" />
</bean>
  중략...]]></programlisting>
    				</para>
          		</listitem>

          		<listitem>
            		<para>Test Case</para>

		            <para>
		            	다음은 RESTful Web Services로 노출된 Movie Service에 접근하는 클라이언트 코드를 작성한 Controller
		            	 클래스의 일부이다.

		            <programlisting language="java"><![CDATA[@Controller("cxfJaxRsMovieController")
@DependsOn("cxfJaxRsClientMovieService")
@RequestMapping("/cxfJaxRsMovie.do")
public class MovieController {
	@Inject
	@Named("cxfJaxRsClientMovieService")
	private MovieService movieService;

	private WebClient client;	

	private WebClient getClient() {
		if (this.client == null)
			client = ]]><emphasis role="bold">WebClient.fromClient(WebClient.client(movieService));</emphasis><![CDATA[
		return client.reset();
	}  
	
	@RequestMapping(params = "method=create")
	public String create(Movie movie, BindingResult results,
			SessionStatus status) throws Exception {
		if (results.hasErrors()) {
			return "cxf-jaxrs/moviefinder/movie/form";
		}
		]]><emphasis role="bold">Response response = getClient().path("/movies").post(movie);</emphasis><![CDATA[
		if (response.getStatus() == Status.INTERNAL_SERVER_ERROR
				.getStatusCode()) {
			throw new Exception("Fail to create : Movie Title="
					+ movie.getTitle());
		}

		status.setComplete();
		return "redirect:/cxfJaxRsMovie.do?method=list";
	}

	@RequestMapping(params = "method=get")
	public String get(@RequestParam("movieId") String movieId, Model model)
			throws Exception {
		]]><emphasis role="bold">Movie movie = getClient().path("/movies/" + movieId).get(Movie.class);</emphasis><![CDATA[
		model.addAttribute("movie", movie);

		return "cxf-jaxrs/moviefinder/movie/form";
	}

	@RequestMapping(params = "method=list")
	public String list(
			@RequestParam(value = "pageIndex", defaultValue = "1") int pageIndex,
			Movie movie, BindingResult result, Model model) throws Exception {
		]]><emphasis role="bold">ResultPage resultPage = getClient().path("/movies").query("title",
				movie.getTitle()).query("nowPlaying", movie.getNowPlaying())
				.query("pageIndex", pageIndex).get(ResultPage.class);</emphasis><![CDATA[
		Page page = resultPage.getPage();

		model.addAttribute("movie", movie);
		model.addAttribute("movies", page.getList());
		model.addAttribute("resultPage", page);

		return "cxf-jaxrs/moviefinder/movie/list";
	}          
중략...]]></programlisting>
					</para>
				</listitem>
			
			</itemizedlist>
		</section>
	</section>
</section>

  	<section id="cxf_jaxrs_resource">
		<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>
						참고자료
					</para>
					<itemizedlist>
					<listitem><para><ulink url="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures, Roy Thomas Fielding, 2000</ulink></para></listitem>
					<listitem><para><ulink url="http://java.sun.com/developer/technicalArticles/WebServices/restful/">Sun Article: RESTful Web Services</ulink></para></listitem>
					<listitem><para><ulink url="http://mercury.ccil.org/~cowan/restws.pdf">RESTful Web Services, John Cowan, 2005</ulink></para></listitem>
					<listitem><para><ulink url="http://www.xfront.com/REST-Web-Services.html">Building Web Services the REST Way</ulink></para></listitem>
				</itemizedlist>
				</listitem>
			</itemizedlist>
		</para>
	</section>
</chapter>
