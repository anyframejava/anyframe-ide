<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="Namespace" classname="Namespace" left="0" top="0" width="1024" height="5260" titletext="New Form">
    <Layouts>
      <Layout>
        <Static id="Static01" taborder="0" text="1. exist" cssclass="WFDA_sta_label" left="20" top="39" width="196" height="145"/>
        <Static id="Static00" taborder="1" text="(string) ⇒ (&quot;Eco&quot;)" cssclass="WFDA_sta_Box" left="215" top="39" width="370" height="37"/>
        <Button id="Button00" taborder="2" text="실행" onclick="Button00_onclick" cssclass="WF_btn_Point" left="519" top="46" width="56" height="22"/>
        <Static id="st_1_result01" taborder="3" cssclass="WFDA_sta_BoxR" left="584" top="39" width="420" height="37"/>
        <Static id="Static06" taborder="4" text="Arguments:  ( Type ) ⇒ ( Value )" cssclass="WFDA_sta_header" left="215" top="0" width="370" height="40"/>
        <Static id="Static07" taborder="5" text="Method" cssclass="WFDA_sta_header" left="20" top="0" width="196" height="40"/>
        <Static id="Static08" taborder="6" text="Result: (Type) Vaule" cssclass="WFDA_sta_header" left="584" top="0" width="420" height="40" style="font:antialias bold 9 Verdana, antialias 9 bold dotum;"/>
        <Static id="Static02" taborder="7" text="(string) ⇒ (&quot;Eco.array&quot;)" cssclass="WFDA_sta_Box" left="215" top="75" width="370" height="37"/>
        <Button id="Button01" taborder="8" text="실행" cssclass="WF_btn_Point" left="519" top="82" width="56" height="22" onclick="Button01_onclick"/>
        <Static id="st_1_result02" taborder="9" cssclass="WFDA_sta_BoxR" left="584" top="75" width="420" height="37"/>
        <Static id="Static03" taborder="10" text="(string) ⇒ (&quot;Eco.sample&quot;)" cssclass="WFDA_sta_Box" left="215" top="111" width="370" height="37"/>
        <Button id="Button02" taborder="11" text="실행" cssclass="WF_btn_Point" left="519" top="118" width="56" height="22" onclick="Button02_onclick"/>
        <Static id="st_1_result03" taborder="12" cssclass="WFDA_sta_BoxR" left="584" top="111" width="420" height="37"/>
        <Static id="Static04" taborder="13" text="(string) ⇒ (&quot;Hello.World&quot;)" cssclass="WFDA_sta_Box" left="215" top="147" width="370" height="37"/>
        <Button id="Button03" taborder="14" text="실행" cssclass="WF_btn_Point" left="519" top="154" width="56" height="22" onclick="Button03_onclick"/>
        <Static id="st_1_result04" taborder="15" cssclass="WFDA_sta_BoxR" left="584" top="147" width="420" height="37"/>
        <Static id="Static05" taborder="16" text="2. declare" cssclass="WFDA_sta_label" left="20" top="183" width="196" height="93"/>
        <Static id="Static09" taborder="17" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declare(&quot;Hello&quot;, {&#13;&#10;&#9;&#9;    'message':'Hello nexacro !!', &#13;&#10;&#9;&#9;    'say': function() {alert(this.message);}&#13;&#10;&#9;});" cssclass="WFDA_sta_Box" left="215" top="183" width="370" height="93"/>
        <Button id="Button04" taborder="18" text="실행" cssclass="WF_btn_Point" left="519" top="190" width="56" height="22" onclick="Button04_onclick"/>
        <Static id="st_2_result01" taborder="19" cssclass="WFDA_sta_BoxR" left="584" top="183" width="420" height="93"/>
        <Static id="Static10" taborder="20" text="3. declareClass" cssclass="WFDA_sta_label" left="20" top="275" width="196" height="4041"/>
        <Static id="Static11" taborder="21" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person1&quot;,{&#13;&#10;    properties: {&#13;&#10;        name: {}&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="275" width="370" height="141"/>
        <Static id="st_3_result01" taborder="22" cssclass="WFDA_sta_BoxR" left="584" top="275" width="420" height="141"/>
        <Button id="Button05" taborder="23" text="실행" cssclass="WF_btn_Point" left="519" top="282" width="56" height="22" onclick="Button05_onclick"/>
        <Static id="Static12" taborder="24" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person2&quot;,{&#13;&#10;    properties: {&#13;&#10;        name: {&#13;&#10;            value: 'Unknown'&#13;&#10;        }&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="415" width="370" height="141"/>
        <Button id="Button06" taborder="25" text="실행" cssclass="WF_btn_Point" left="519" top="422" width="56" height="22" onclick="Button06_onclick"/>
        <Static id="st_3_result02" taborder="26" cssclass="WFDA_sta_BoxR" left="584" top="415" width="420" height="141"/>
        <Static id="Static13" taborder="27" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person3&quot;,{&#13;&#10;    properties: {&#13;&#10;        name: {&#13;&#10;            value: 'Unknown',&#13;&#10;            memberName: &quot;_name&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="555" width="370" height="157"/>
        <Button id="Button07" taborder="28" text="실행" cssclass="WF_btn_Point" left="519" top="562" width="56" height="22" onclick="Button07_onclick"/>
        <Static id="st_3_result03" taborder="29" cssclass="WFDA_sta_BoxR" left="584" top="555" width="420" height="157"/>
        <Static id="Static14" taborder="30" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person4&quot;,{&#13;&#10;    properties: {&#13;&#10;        name: {&#13;&#10;            value: 'Unknown',&#13;&#10;            memberName: &quot;_name&quot;,&#13;&#10;            checkValue: function(value) &#13;&#10;            {&#13;&#10;                 return value || &quot;Unknown&quot;;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="711" width="370" height="213"/>
        <Button id="Button08" taborder="31" text="실행" cssclass="WF_btn_Point" left="519" top="718" width="56" height="22" onclick="Button08_onclick"/>
        <Static id="st_3_result04" taborder="32" cssclass="WFDA_sta_BoxR" left="584" top="711" width="420" height="213"/>
        <Static id="Static15" taborder="33" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person5&quot;,{&#13;&#10;    properties: {&#13;&#10;        name: {&#13;&#10;            value: 'Unknown',&#13;&#10;            memberName: &quot;_name&quot;,&#13;&#10;            checkValue: function(value) &#13;&#10;            {&#13;&#10;                 return value || &quot;Unknown&quot;;&#13;&#10;            },&#13;&#10;            updateValue: function(value)&#13;&#10;            {&#13;&#10;                 this._name = value;&#13;&#10;                 this._draw();&#13;&#10;            }&#13;&#10;        }&#13;&#10;    },&#13;&#10;    _draw: function()&#13;&#10;    {&#13;&#10;        alert(&quot;call _draw function!!!&quot;); &#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="923" width="370" height="333"/>
        <Button id="Button09" taborder="34" text="실행" cssclass="WF_btn_Point" left="519" top="930" width="56" height="22" onclick="Button09_onclick"/>
        <Static id="st_3_result05" taborder="35" cssclass="WFDA_sta_BoxR" left="584" top="923" width="420" height="333"/>
        <Static id="Static16" taborder="36" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person6&quot;,{&#13;&#10;    properties: {&#13;&#10;        name: {&#13;&#10;            value: 'Unknown',&#13;&#10;            &quot;get&quot;: function()&#13;&#10;            {&#13;&#10;                return this.name || 'Unknown';&#13;&#10;            },&#13;&#10;            &quot;set&quot;: function(value)&#13;&#10;            {&#13;&#10;                value = value || 'Unknown';&#13;&#10;                if ( !Eco.equals(this.getName(), value) )&#13;&#10;                {&#13;&#10;                    this._propertyChange(&quot;name&quot;, value,&#9;this.getName());&#13;&#10;                    this.name = value;&#13;&#10;                    this._draw();&#13;&#10;                }&#13;&#10;             }&#13;&#10;        }&#13;&#10;    },&#13;&#10;    _draw: function()&#13;&#10;    {&#13;&#10;        alert(&quot;call _draw function!!!&quot;); &#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="1255" width="370" height="413"/>
        <Button id="Button10" taborder="37" text="실행" cssclass="WF_btn_Point" left="519" top="1262" width="56" height="22" onclick="Button10_onclick"/>
        <Static id="st_3_result06" taborder="38" cssclass="WFDA_sta_BoxR" left="584" top="1255" width="420" height="413"/>
        <Static id="Static17" taborder="39" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person7&quot;,{&#13;&#10;    initialize: function()&#13;&#10;    {&#13;&#10;        trace(&quot;Sample.Person constructor is called===&gt;(&quot; + Eco.array.toArray(arguments) + &quot;)&quot;);&#13;&#10;        this._draw();&#13;&#10;        return this;&#13;&#10;   },&#13;&#10;    _draw: function()&#13;&#10;    {&#13;&#10;        trace(&quot;processing _draw function!!!&quot;); &#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="1667" width="370" height="229"/>
        <Button id="Button11" taborder="40" text="실행" cssclass="WF_btn_Point" left="519" top="1674" width="56" height="22" onclick="Button11_onclick"/>
        <Static id="st_3_result07" taborder="41" cssclass="WFDA_sta_BoxR" left="584" top="1667" width="420" height="229"/>
        <Static id="Static18" taborder="42" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person8&quot;,{&#13;&#10;    statics: {&#13;&#10;        _id: -1,&#13;&#10;        getId: function()&#13;&#10;        {&#13;&#10;            this._id++;&#13;&#10;            return this._id;&#13;&#10;        }&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="1895" width="370" height="189"/>
        <Button id="Button12" taborder="43" text="실행" cssclass="WF_btn_Point" left="519" top="1902" width="56" height="22" onclick="Button12_onclick"/>
        <Static id="st_3_result08" taborder="44" cssclass="WFDA_sta_BoxR" left="584" top="1895" width="420" height="189"/>
        <Static id="Static19" taborder="45" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person9&quot;, {&#9;&#9;    properties: {&#13;&#10;        x: {&#13;&#10;                value:0,&#13;&#10;                checkValue:function(value)&#13;&#10;                {&#13;&#10;                    if ( !Eco.isNumber(value) )&#13;&#10;                    {&#13;&#10;                        return 0;&#13;&#10;                    }&#13;&#10;                    return value;&#13;&#10;                },&#13;&#10;                updateValue: function(value)&#13;&#10;                {&#13;&#10;                    this.x = value;&#13;&#10;                    this.fireEvent(&quot;onXYChanged&quot;, value, this.y);&#13;&#10;                }&#13;&#10;        },&#13;&#10;        y: {&#13;&#10;            value: 0,&#13;&#10;            checkValue: function(value)&#13;&#10;            {&#13;&#10;                if ( !Eco.isNumber(value) )&#13;&#10;                {&#13;&#10;                    return 0;&#13;&#10;                }&#13;&#10;                return value;&#13;&#10;            },&#13;&#10;            updateValue: function(value)&#13;&#10;            {&#13;&#10;                this.y = value;&#13;&#10;                this.fireEvent(&quot;onXYChanged&quot;, this.x, value);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    },&#13;&#10;    events: {&#13;&#10;        onXYChanged: {}&#13;&#10;    },&#13;&#10;    setPosition: function(x, y)&#13;&#10;    {&#13;&#10;        x = x||0;&#13;&#10;        y = y||0;&#13;&#10;        if ( this.x != x || this.y != y )&#13;&#10;        {&#13;&#10;            this.x = x;&#13;&#10;            this.y = y;&#13;&#10;            this.fireEvent(&quot;onXYChanged&quot;, x, y);&#13;&#10;        }&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="2083" width="370" height="749"/>
        <Button id="Button13" taborder="46" text="실행" cssclass="WF_btn_Point" left="519" top="2090" width="56" height="22" onclick="Button13_onclick"/>
        <Static id="st_3_result09" taborder="47" cssclass="WFDA_sta_BoxR" left="584" top="2083" width="420" height="749"/>
        <Static id="Static20" taborder="48" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Person10&quot;, {&#9;&#9;    properties: {&#13;&#10;        x: {&#13;&#10;                value:0,&#13;&#10;                checkValue:function(value)&#13;&#10;                {&#13;&#10;                    if ( !Eco.isNumber(value) )&#13;&#10;                    {&#13;&#10;                        return 0;&#13;&#10;                    }&#13;&#10;                    return value;&#13;&#10;                },&#13;&#10;                updateValue: function(value)&#13;&#10;                {&#13;&#10;                    this.x = value;&#13;&#10;                    this.fireEvent(&quot;onXYChanged&quot;, value, this.y);&#13;&#10;                }&#13;&#10;        },&#13;&#10;        y: {&#13;&#10;            value: 0,&#13;&#10;            checkValue: function(value)&#13;&#10;            {&#13;&#10;                if ( !Eco.isNumber(value) )&#13;&#10;                {&#13;&#10;                    return 0;&#13;&#10;                }&#13;&#10;                return value;&#13;&#10;            },&#13;&#10;            updateValue: function(value)&#13;&#10;            {&#13;&#10;                this.y = value;&#13;&#10;                this.fireEvent(&quot;onXYChanged&quot;, this.x, value);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    },&#13;&#10;    events: {&#13;&#10;        onXYChanged: {&#13;&#10;            install: function(evtNm)&#13;&#10;            {&#13;&#10;                trace(this.name + &quot;: &quot; + evtNm + &quot;' install is called ::: handler Cnt ==&gt;&quot; +  + this.getEventHandlerLength(&quot;onXYChanged&quot;));&#13;&#10;            },&#13;&#10;            uninstall: function(evtNm)&#13;&#10;            {&#13;&#10;                trace(this.name + &quot;: &quot; + evtNm + &quot;' uninstall is called ::: handler Cnt ==&gt;&quot; +  + this.getEventHandlerLength(&quot;onXYChanged&quot;));&#13;&#10;            }&#13;&#10;        }&#13;&#10;    },&#13;&#10;    setPosition: function(x, y)&#13;&#10;    {&#13;&#10;        x = x||0;&#13;&#10;        y = y||0;&#13;&#10;        if ( this.x != x || this.y != y )&#13;&#10;        {&#13;&#10;            this.x = x;&#13;&#10;            this.y = y;&#13;&#10;            this.fireEvent(&quot;onXYChanged&quot;, x, y);&#13;&#10;        }&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="2831" width="370" height="933"/>
        <Button id="Button14" taborder="49" text="실행" cssclass="WF_btn_Point" left="519" top="2838" width="56" height="22" onclick="Button14_onclick"/>
        <Static id="st_3_result10" taborder="50" cssclass="WFDA_sta_BoxR" left="584" top="2831" width="420" height="933"/>
        <Static id="Static21" taborder="51" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Developer&quot;, {&#13;&#10;    &quot;extends&quot;: &quot;Sample.Person&quot;, &#13;&#10;    properties: {&#13;&#10;        languages: {&#13;&#10;            value: ['nexacro', 'JavaScript', 'C++']&#13;&#10;        }&#13;&#10;    },&#13;&#10;    initialize: function()&#13;&#10;    {&#13;&#10;        // Apply a method from the parent class' prototype&#13;&#10;        return this.callParent(arguments);&#13;&#10;    },&#13;&#10;    canCode: function(language)&#13;&#10;    {&#13;&#10;        return Eco.array.contains(this.getLanguages(), language);&#13;&#10;    },&#13;&#10;    code: function(language)&#13;&#10;    {&#13;&#10;        if (!this.canCode(language))&#13;&#10;        {&#13;&#10;            trace(this.name + &quot; can't code in: &quot; + language);&#13;&#10;            this._resultComp.set_text(this._resultComp.text + &quot;\n&quot; + this.name + &quot; can't code in: &quot; + language);&#13;&#10;        }&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="3763" width="370" height="429"/>
        <Button id="Button15" taborder="52" text="실행" cssclass="WF_btn_Point" left="519" top="3770" width="56" height="22" onclick="Button15_onclick"/>
        <Static id="st_3_result11" taborder="53" cssclass="WFDA_sta_BoxR" left="584" top="3763" width="420" height="429"/>
        <Static id="Static22" taborder="54" text="(string, object) ⇒&#13;&#10;&#13;&#10;JsNamespace.declareClass(&quot;Sample.Developer2&quot;, {&#13;&#10;    &quot;extends&quot;: 'Sample.Person12',&#13;&#10;    statics: {&#13;&#10;        averageIQ: 120&#13;&#10;    }&#13;&#10;});" cssclass="WFDA_sta_Box" left="215" top="4191" width="370" height="125"/>
        <Button id="Button16" taborder="55" text="실행" cssclass="WF_btn_Point" left="519" top="4198" width="56" height="22" onclick="Button16_onclick"/>
        <Static id="st_3_result12" taborder="56" cssclass="WFDA_sta_BoxR" left="584" top="4191" width="420" height="125"/>
        <Static id="Static23" taborder="57" text="4. addMethods" cssclass="WFDA_sta_label" left="20" top="4315" width="196" height="478"/>
        <Static id="Static24" taborder="58" text="JsNamespace.declareClass(&quot;Sample.Point&quot;, {&#13;&#10;    initialize: function(x0, y0)&#13;&#10;    {&#13;&#10;        this.x = x0;&#13;&#10;        this.y = y0;&#13;&#10;        return this;&#13;&#10;    },&#9;&#9;&#13;&#10;    properties: {&#13;&#10;        x: {&#13;&#10;            value: 0&#13;&#10;        },&#13;&#10;        y: {&#13;&#10;            value: 0&#13;&#10;        }&#13;&#10;    }&#13;&#10;});&#13;&#10;&#13;&#10;(array, Class, boolean, function) ⇒&#13;&#10;&#13;&#10;var membernames = ['round', 'ceil', 'floor', 'abs'];&#13;&#10;JsNamespace.addMethods(membernames, Sample.Point, false, &#13;&#10;    function(name) {&#13;&#10;        var script = &quot;return new Sample.Point(Math.&quot; + name + &quot;(this.x), Math.&quot; + name + &quot;(this.y));&quot;;&#13;&#10;        this[name] = new Function(script);&#13;&#10;        return name;&#13;&#10;    }&#13;&#10;);" cssclass="WFDA_sta_Box" left="215" top="4315" width="370" height="478"/>
        <Button id="Button17" taborder="59" text="실행" cssclass="WF_btn_Point" left="519" top="4322" width="56" height="22" onclick="Button17_onclick"/>
        <Static id="st_4_result01" taborder="60" cssclass="WFDA_sta_BoxR" left="584" top="4315" width="420" height="478"/>
        <Static id="Static25" taborder="61" text="5. addProperties" cssclass="WFDA_sta_label" left="20" top="4792" width="196" height="390"/>
        <Static id="Static26" taborder="62" text="JsNamespace.declareClass(&quot;Sample.Point&quot;, {&#13;&#10;    initialize: function(x0, y0)&#13;&#10;    {&#13;&#10;        this.x = x0;&#13;&#10;        this.y = y0;&#13;&#10;        return this;&#13;&#10;    },&#9;&#9;&#13;&#10;    properties: {&#13;&#10;        x: {&#13;&#10;            value: 0&#13;&#10;        },&#13;&#10;        y: {&#13;&#10;            value: 0&#13;&#10;        }&#13;&#10;    }&#13;&#10;});&#13;&#10;&#13;&#10;(object, Class, function, scope) ⇒&#13;&#10;&#13;&#10;var membernames = {'z' : {value:'0'} };&#13;&#10;JsNamespace.addProperties(membernames, Sample.Point, &#13;&#10;    function(prop, val) {&#13;&#10;        return val;&#13;&#10;    }&#13;&#10;);" cssclass="WFDA_sta_Box" left="215" top="4792" width="370" height="390"/>
        <Button id="Button18" taborder="63" text="실행" cssclass="WF_btn_Point" left="519" top="4799" width="56" height="22" onclick="Button18_onclick"/>
        <Static id="st_5_result01" taborder="64" cssclass="WFDA_sta_BoxR" left="584" top="4792" width="420" height="390"/>
        <Static id="Static27" taborder="65" text="6. getGlobalContext" cssclass="WFDA_sta_label" left="20" top="5181" width="196" height="38"/>
        <Static id="Static28" taborder="66" text="() ⇒ ()" cssclass="WFDA_sta_Box" left="215" top="5181" width="370" height="38"/>
        <Button id="Button19" taborder="67" text="실행" cssclass="WF_btn_Point" left="519" top="5188" width="56" height="22" onclick="Button19_onclick"/>
        <Static id="st_6_result01" taborder="68" cssclass="WFDA_sta_BoxR" left="584" top="5181" width="420" height="38"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.0"><![CDATA[/*
 * JsNamespace api Sample at nexacro
 * 
 * Copyright (c) 2014 EcoSystem of TOBESOFT
 * Licensed Free under nexacro.
*/

// 1.1 exist api 사용 예제
this.Button00_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Eco");
	this.st_1_result01.set_text( "(boolean) " + exist );
	trace(exist);	
}

// 1.2 exist api 사용 예제
this.Button01_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Eco.array");
	this.st_1_result02.set_text( "(boolean) " + exist );
	trace(exist);
}

// 1.3 exist api 사용 예제
this.Button02_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Eco.sample");
	this.st_1_result03.set_text( "(boolean) " + exist );
	trace(exist);
}

// 1.4 exist api 사용 예제
this.Button03_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Hello.World");
	this.st_1_result04.set_text( "(boolean) " + exist );
	trace(exist);
}

// 2.1 declare api 사용 예제
this.Button04_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Hello");
	
	if ( !exist )
	{
		JsNamespace.declare("Hello", {
			'message':'Hello nexacro !!', 
			'say': function() {alert(this.message);}
		});
	}
	
	this.st_2_result01.set_text( "(execute) Hello.say();" );
	
	Hello.say();
}

// 3.1 declareClass api 사용 예제
this.Button05_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	// Class 생성 정보에 properties 를 선언하면,
	// 지정한 멤버변수(name), setter 멤버함수(setName), getter 멤버함수(getName)가 선언된다.
	var exist = JsNamespace.exist("Sample.Person1");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Person1", {
			properties: {
				name: {}
			}
		});
	}
	
	var person = new Sample.Person1();
	var result = "var person = new Sample.Person1();\n\n";	
	    result += "person.name ==> " + person.name + "\n\n";
	
		person.setName("홍길동");
	
		result += 'person.setName("홍길동");\n\n';
		result += 'person.getName(); ==> ' + person.getName() + "\n\n";
		result += "person.name ==> " + person.name;
	
	this.st_3_result01.set_text( result );
	
	trace(result);
}

// 3.2 declareClass api 사용 예제
this.Button06_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{	
	var exist = JsNamespace.exist("Sample.Person2");
	if ( !exist )
	{
		// Class 생성 정보에 properties 를 선언하면서 초기값을 지정할 경우 아래와 같이 정의한다.
		JsNamespace.declareClass("Sample.Person2", {
			properties: {
				name: {
					value: "Unknown"
				}
			}
		});
	}
	
	var person = new Sample.Person2();
	var result = "var person = new Sample.Person2();\n\n";	
		result += 'person.getName(); ==> ' + person.getName() + "\n\n";
	    result += "person.name ==> " + person.name;	
	
	this.st_3_result02.set_text( result );
	
	trace(result);
}

// 3.3 declareClass api 사용 예제
this.Button07_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person3");
	if ( !exist )
	{
		// 'name' 으로 생성되는 멤버 변수명을 '_name'으로 처리하려면 아래와 같이 정의한다.
		JsNamespace.declareClass("Sample.Person3", {
			properties: {
				name: {
					value: "Unknown",
					memberName: "_name"
				}
			}
		});
	}
	
	var person = new Sample.Person3();
	var result = "var person = new Sample.Person3();\n\n";	
		result += 'person.getName(); ==> ' + person.getName() + "\n\n";
	    result += "person._name ==> " + person._name + "\n\n";
	    result += "person.name ==> " + person.name;
	
	this.st_3_result03.set_text( result );
	
	trace(result);
}

// 3.4 declareClass api 사용 예제
this.Button08_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person4");
	if ( !exist )
	{
		// setter 함수에 추가 로직으로 주어지는 value 값에 대하여 check하여 보정하려면 아래 코드로 작성한다. 
		// 예를 들면 (name) property의 setter에 주어진 value값이 (null)이면 ("Unknown") 으로 value값을 변경하는 로직을 추가한다.	
		JsNamespace.declareClass("Sample.Person4", {
			properties: {
				name: {
					value: "Unknown",
					memberName: "_name",
					checkValue: function(value)
					{
						return value || "Unknown";
					}					
				}
			}
		});
	}
	
	var person = new Sample.Person4();
	var result = "var person = new Sample.Person4();\n\n";	
		result += 'person.getName(); ==> ' + person.getName() + "\n";
	    result += "person._name ==> " + person._name + "\n\n";
	    
	    result += 'person.setName("홍길동");\n';
	    person.setName("홍길동");
		result += 'person.getName(); ==> ' + person.getName() + "\n";
	    result += "person._name ==> " + person._name + "\n\n";
	    
	    result += 'person.setName(null);\n';
	    person.setName(null);
		result += 'person.getName(); ==> ' + person.getName() + "\n";
	    result += "person._name ==> " + person._name;
	    	
	this.st_3_result04.set_text( result );
	
	trace(result);
}

// 3.5 declareClass api 사용 예제
this.Button09_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person5");
	if ( !exist )
	{
		// 'name' property 값이 변경되면 특정 처리를 해야할 경우 아래와 같이 정의한다.
		JsNamespace.declareClass("Sample.Person5", {
			properties: {
				name: {
					value: "Unknown",
					memberName: "_name",
					checkValue: function(value)
					{
						return value || "Unknown";
					},
					updateValue: function(value)
					{
						this._name = value;
						this._draw();
					}
				}
			},
			_draw: function()
			{
				alert("call _draw function!!!");
			}
		});
	}
	
	var person = new Sample.Person5();
	var result = "var person = new Sample.Person5();\n\n";	
		result += 'person.getName(); ==> ' + person.getName() + "\n";
	    result += "person._name ==> " + person._name + "\n\n";
	    
	    result += 'person.setName("홍길동");\n';
	    person.setName("홍길동");
		result += 'person.getName(); ==> ' + person.getName() + "\n";
	    result += "person._name ==> " + person._name;
	    
	this.st_3_result05.set_text( result );
	
	trace(result);
}

// 3.6 declareClass api 사용 예제
this.Button10_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person6");
	if ( !exist )
	{
		// 'name' property 에 대해 getter, setter 를 직접 정의할 경우 아래와 같이 처리한다.
		// [주의] get, set 정의 시 "get", "set" 으로 정의해야 오류를 막을 수 있다.
		JsNamespace.declareClass("Sample.Person6", {
			properties: {
				name: {
					value: "Unknown",
					"get": function()
					{
						return this.name || 'Unknown';
					},
					"set": function(value)
					{
						value = value || 'Unknown';
						if ( !Eco.equals(this.getName(), value) )
						{
							this._propertyChange("name", value,	this.getName());
							this.name = value;
							this._draw();
						}
					}
				}
			},
			_draw: function()
			{
				alert("call _draw function!!!");
			}
		});
	}
	
	var person = new Sample.Person6();
	var result = "var person = new Sample.Person6();\n\n";	
		result += 'person.getName(); ==> ' + person.getName() + "\n";
	    result += "person.name ==> " + person.name + "\n\n";
	    
	    result += 'person.setName("홍길동");\n';
	    person.setName("홍길동");
		result += 'person.getName(); ==> ' + person.getName() + "\n";
	    result += "person.name ==> " + person.name;
	    
	this.st_3_result06.set_text( result );
	
	trace(result);
}

// 3.7 declareClass api 사용 예제
this.Button11_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person7");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Person7", {
			// 'initialize' 명칭으로 함수를 선언하면 Class 의 생성자가 된다.
			// 함수의 반환값으로 반드시 return this; 로 작성한다.
			initialize: function()
			{
				trace("Sample.Person constructor is called===>(" + Eco.array.toArray(arguments) + ")");
				this._draw();
				
				return this;
			},
			_draw: function()
			{
				trace("processing _draw function!!!"); 
			}
		});
	}
	
	var person = new Sample.Person7("a", 1);
	var result = 'var person = new Sample.Person7("a", 1);';
	    
	this.st_3_result07.set_text( result );
	
	trace(result);
}

// 3.8 declareClass api 사용 예제
this.Button12_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person8");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Person8", {
			// Class에서 Static 으로 사용하기 위해 정의하는 영역인데 정의된 Static는 다음과 같이 사용할 수 있다.
			// className이 (Sampe.Person8)으로 정의하는 경우, 변수일 경우는 Sample.Person8._id 코드 작성으로 접근하고, 
			// 함수일 경우는 Sample.Person8.getId() 코드 작성으로 사용하게 된다.

			statics: {
				_id: -1,
				getId: function()
				{
					this._id++; //여기서 this는 Sample.Person이다.
					return this._id;
				}
			}
		});
	}
	
	
	var person = new Sample.Person8("a", 1);
	var result = "Sample.Person8._id ==> " + Sample.Person8._id + "\n";
		result += "Sample.Person8.getId() ==> " + Sample.Person8.getId() + "\n";
		result += "Sample.Person8.getId() ==> " + Sample.Person8.getId() + "\n";
		    
	this.st_3_result08.set_text( result );
	
	trace(result);
}

// 3.9 declareClass api 사용 예제
this.Button13_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person9");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Person9", {			
			// 'x', 'y' property가 존재하고 이 값들이 변경될 때 발생하는 
			// 이벤트를 (onXYChanged) 명칭으로 선언은 다음과 같이 처리한다.
			properties: {
				x: {
					value: 0,
					checkValue: function(value)
					{
						if ( !Eco.isNumber(value) )
						{
							return 0;
						}
						return value;
					},
					updateValue: function(value)
					{
						this.x = value;
						this.fireEvent("onXYChanged", value, this.y);
					}
				},
				y: {
					value: 0,
					checkValue: function(value)
					{
						if ( !Eco.isNumber(value) )
						{
							return 0;
						}
						return value;
					},
					updateValue: function(value)
					{
						this.y = value;
						this.fireEvent("onXYChanged", this.x, value);
					}
				}
			},
			events: {
				onXYChanged: {}
			},
			setPosition: function(x, y)
			{
				x = x||0;
				y = y||0;
				if ( this.x != x || this.y != y )
				{
					this.x = x;
					this.y = y;
					this.fireEvent("onXYChanged", x, y);
				}
			}
		});
	}
	
	
	var person = new Sample.Person9();
	this.st_3_result09.set_text(this.st_3_result09.text + "var person = new Sample.Person9();\n");
	
	person._resultComp = this.st_3_result09;
	
	this.st_3_result09.set_text(this.st_3_result09.text + 'person.addEventHandler("onXYChanged", this.xyChangedHandler);\n');
	person.addEventHandler("onXYChanged", this.xyChangedHandler);
	
	this.st_3_result09.set_text(this.st_3_result09.text + 'person.setPosition(10, 10);\n');
	person.setPosition(10, 10);
	
	this.st_3_result09.set_text(this.st_3_result09.text + 'person.setX(20);\n');
	person.setX(20);
}

this.xyChangedHandler = function(x, y)
{
	//this는 person이다.
	var resultComp = this._resultComp; // ==> st_3_result09
	var result = "onXYChanged==> ClassName: " + this.getClassName() + " arguments: (" + x + "," + y + ")";
	resultComp.set_text( resultComp.text + "\n" + result + "\n");
	trace(result);
}

// 3.10 declareClass api 사용 예제
this.Button14_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person10");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Person10", {			
			properties: {
				x: {
					value: 0,
					checkValue: function(value)
					{
						if ( !Eco.isNumber(value) )
						{
							return 0;
						}
						return value;
					},
					updateValue: function(value)
					{
						this.x = value;
						this.fireEvent("onXYChanged", value, this.y);
					}
				},
				y: {
					value: 0,
					checkValue: function(value)
					{
						if ( !Eco.isNumber(value) )
						{
							return 0;
						}
						return value;
					},
					updateValue: function(value)
					{
						this.y = value;
						this.fireEvent("onXYChanged", this.x, value);
					}
				}
			},
			// event 중에 eventHandler 함수가 하나 이상 추가 되는 시점에 임의 처리 루틴을 작성하고, 
			// eventHandler 함수가 모두 제거되는 시점에 임의 처리 루틴을 작성하는 요건이 생기는 경우가 있다.
			// 이 때 사용하는 것이 events 선언 부분에 (install), (uninstall) 명칭으로 함수를 정의한다.
			events: {
				onXYChanged: {
					install: function(evtNm)
					{
						trace(this.name + ": " + evtNm + "' install is called ::: handler Cnt ==>" +  + this.getEventHandlerLength("onXYChanged"));
					},
					uninstall: function(evtNm)
					{
						trace(this.name + ": " + evtNm + "' uninstall is called ::: handler Cnt ==>" +  + this.getEventHandlerLength("onXYChanged"));
					}
				}
			},
			setPosition: function(x, y)
			{
				x = x||0;
				y = y||0;
				if ( this.x != x || this.y != y )
				{
					this.x = x;
					this.y = y;
					this.fireEvent("onXYChanged", x, y);
				}
			}
		});
	}
	
	var person = new Sample.Person10();
	
	this.st_3_result10.set_text(this.st_3_result10.text + "var person = new Sample.Person10();\n");
	
	person.addEventHandler("onXYChanged", this.xyChangedHandler1); //onXYChanged's install call
	
	this.st_3_result10.set_text(this.st_3_result10.text + 'person.addEventHandler("onXYChanged", this.xyChangedHandler1);\n');
	this.st_3_result10.set_text(this.st_3_result10.text + "onXYChanged's install call\n");
	
	person.addEventHandler("onXYChanged", this.xyChangedHandler2);
	
	this.st_3_result10.set_text(this.st_3_result10.text + 'person.addEventHandler("onXYChanged", this.xyChangedHandler2);\n');
	
	person.addEventHandler("onXYChanged", this.xyChangedHandler3);
	
	this.st_3_result10.set_text(this.st_3_result10.text + 'person.addEventHandler("onXYChanged", this.xyChangedHandler3);\n');

	person.removeEventHandler("onXYChanged", this.xyChangedHandler1);
	
	this.st_3_result10.set_text(this.st_3_result10.text + 'person.removeEventHandler("onXYChanged", this.xyChangedHandler1);\n');
	
	person.removeEventHandler("onXYChanged", this.xyChangedHandler2);
	
	this.st_3_result10.set_text(this.st_3_result10.text + 'person.removeEventHandler("onXYChanged", this.xyChangedHandler2);\n');
	
	person.removeEventHandler("onXYChanged", this.xyChangedHandler3); //onXYChanged's uninstall call
	
	this.st_3_result10.set_text(this.st_3_result10.text + 'person.removeEventHandler("onXYChanged", this.xyChangedHandler3);\n');
	
	this.st_3_result10.set_text(this.st_3_result10.text + "onXYChanged's uninstall call\n");
}

//onXYChanged eventHandler
this.xyChangedHandler1 = function(x, y)
{
}

this.xyChangedHandler2 = function(x, y)
{
}

this.xyChangedHandler3 = function(x, y)
{
}

// 3.11 declareClass api 사용 예제
this.Button15_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Person11");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Person11", {
			initialize: function()
			{
				trace("Sample.Person11 constructor call===>(" + Eco.array.toArray(arguments) + ")");
				return this;
			},
			properties: {
				name: {},
				x: {
					value: 0,
					checkValue: function(value)
					{
						if ( !Eco.isNumber(value) )
						{
							return 0;
						}
						return value;
					},
					updateValue: function(value)
					{
						this.x = value;
						this.fireEvent("onXYChanged", value, this.y);
					}
				},
				y: {
					value: 0,
					checkValue: function(value)
					{
						if ( !Eco.isNumber(value) )
						{
							return 0;
						}
						return value;
					},
					updateValue: function(value)
					{
						this.y = value;
						this.fireEvent("onXYChanged", this.x, value);
					}
				}
			},
			events: {
				onXYChanged: {}
			},
			setPosition: function(x, y)
			{
				x = x||0;
				y = y||0;
				if ( this.x != x || this.y != y )
				{
					this.x = x;
					this.y = y;
					this.fireEvent("onXYChanged", x, y);
				}
			}
		});
	}

	exist = JsNamespace.exist("Sample.Developer");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Developer", {
			// 상속하려는 Class 설정
			//extends는 반드시 "extends"로 처리
			"extends": "Sample.Person11", 
			properties: {
				languages: {
					value: ['nexacro', 'JavaScript', 'C++']
				}
			},
			initialize: function()
			{
				// Apply a method from the parent class' prototype
				return this.callParent(arguments);
			},
			canCode: function(language)
			{
				return Eco.array.contains(this.getLanguages(), language);
			},
			code: function(language)
			{
				if (!this.canCode(language))
				{
					trace(this.name + " can't code in: " + language);
					this._resultComp.set_text(this._resultComp.text + "\n" + this.name + " can't code in: " + language);
				}
			}
		});
	}
	
	var developer = new Sample.Developer();
	this.st_3_result11.set_text("var developer = new Sample.Developer();");
	
	// 결과 표시를 위해 추가
	developer._resultComp = this.st_3_result11;
	
	this.st_3_result11.set_text(this.st_3_result11.text + '\ndeveloper.setName("홍길동");');
	developer.setName("홍길동");
	
	this.st_3_result11.set_text(this.st_3_result11.text + '\ndeveloper.code("perl");');
	developer.code("perl");
	
	trace("======================================");
	trace("developer.getMethodsNames()");
	trace("======================================");
	var methodNames = developer.getMethodsNames();
	Eco.array.Each(methodNames,
		function (name, idx)
		{
			trace(name);
		}
	);	
	
	trace("======================================");
	trace("developer.getPropertiesNames()");
	trace("======================================");
	var propertiesNames = developer.getPropertiesNames();
	Eco.array.Each(propertiesNames,
		function (name, idx)
		{
			trace(name);
		}
	);	
	
	trace("======================================");
	trace("developer.getEventsNames()");
	trace("======================================");	
	var eventsNames = developer.getEventsNames();
	Eco.array.Each(eventsNames,
		function (name, idx)
		{
			trace(name);
		}
	);	
}

// 3.12 declareClass api 사용 예제
this.Button16_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	// Class에서 메소드, property들, 멤버 변수들은 자동으로 상속되지만, 
	// static으로 선언된 것은 상속되지 않는다. 
	// 그래서 static 중에 하위 Class로 상속하고자 하는 변수나 함수들은 여기에 정의한다.
	// 'inheritStatics' 명칭으로 해당 설정 값을 (statics) 선언하듯이 동일하게 처리한다
	var exist = JsNamespace.exist("Sample.Person12");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Person12", {
			statics: {
				averageIQ: 100
			},
			inheritStatics: {
				getAverageIQ: function()
				{
					return this.averageIQ;
				}
			}
		});
	}

	exist = JsNamespace.exist("Sample.Developer2");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Developer2", {
			"extends": 'Sample.Person12',
			statics: {
				averageIQ: 120
			}
		});
	}
	
	var result = "Sample.Person12.getAverageIQ()==>" + Sample.Person12.getAverageIQ() + "\n";
		result += "Sample.Developer2.getAverageIQ()==>" + Sample.Developer2.getAverageIQ();
	
	trace(result);
	this.st_3_result12.set_text(result);
}

// 4.1 addMethods api 사용 예제
this.Button17_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Point");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Point", {
			initialize: function(x0, y0)
			{
				this.x = x0;
				this.y = y0;
				return this;
			},		
			properties: {
				x: {
					value: 0
				},
				y: {
					value: 0
				}
			}
		});
	}
	
	// 주어진 Class에 method 를 추가한다.
	var membernames = ['round', 'ceil', 'floor', 'abs'];
	JsNamespace.addMethods(membernames, Sample.Point, false, 
		function(name) {
			var script = "return new Sample.Point(Math." + name + "(this.x), Math." + name + "(this.y));";
			this[name] = new Function(script); //this ==> Sample.Point.prototype
			return name; //이 코드가 있어야 추가한 Method에 debug정보를 구성한다.
		}
	);

	var point = new Sample.Point(10.1, -10.8);
	var result = "var point = new Sample.Point(10.1, -10.8);\n";
	result += "\n======================================\n";
	result += "point.getMethodsNames()\n";
	result += "======================================\n";
		
	var methodNames = point.getMethodsNames();
	Eco.array.Each(methodNames,
		function (name, idx)
		{
			trace(name);
			result += name + "\n";
		}
	);
	
	result += "\n";
	
	var round = point.round();
	result += "var round = point.round();\n";
	result += "round.x ==> "+round.x+"\n";
	result += "round.y ==> "+round.y+"\n\n";
	
	var ceil = point.ceil();
	result += "var ceil = point.ceil();\n";
	result += "ceil.x ==> "+ceil.x+"\n";
	result += "ceil.y ==> "+ceil.y+"\n\n";	
	
	var floor = point.floor();
	result += "var floor = point.floor();\n";
	result += "floor.x ==> "+floor.x+"\n";
	result += "floor.y ==> "+floor.y+"\n\n";
	
	var abs = point.abs();
	result += "var abs = point.abs();\n";
	result += "abs.x ==> "+abs.x+"\n";
	result += "abs.y ==> "+abs.y;
			
	trace(result);
	
	this.st_4_result01.set_text(result);
}

// 5.1 addProperties api 사용 예제
this.Button18_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var exist = JsNamespace.exist("Sample.Point");
	if ( !exist )
	{
		JsNamespace.declareClass("Sample.Point", {
			initialize: function(x0, y0)
			{
				this.x = x0;
				this.y = y0;
				return this;
			},		
			properties: {
				x: {
					value: 0
				},
				y: {
					value: 0
				}
			}
		});
	}
	
	// 주어진 Class에 property 를 추가한다.
	var membernames = {'z' : {value:'0'} };
	JsNamespace.addProperties(membernames, Sample.Point, 
		function(prop, val) {
			return val;
		}
	);
	
	var point = new Sample.Point(10, 20);
	var result = "var point = new Sample.Point(10, 20);\n";
	result += "\n======================================\n";
	result += "point.getPropertiesNames()\n";
	result += "======================================\n";
		
	var propertiesNames = point.getPropertiesNames();
	Eco.array.Each(propertiesNames,
		function (name, idx)
		{
			trace(name);
			result += name + "\n";
		}
	);
	
	result += "\n";
	
	result += "point.z ==> "+point.z+"\n";
	
	trace(result);
	
	this.st_5_result01.set_text(result);
}

// 6.1 getGlobalContext api 사용 예제
this.Button19_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var result = JsNamespace.getGlobalContext();
	
	trace(result);
	
	this.st_6_result01.set_text(result);
}
]]></Script>
  </Form>
</FDL>
