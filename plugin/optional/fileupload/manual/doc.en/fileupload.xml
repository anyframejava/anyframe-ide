<?xml version="1.0" encoding="utf-8"?>

<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to you under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
-->
    
<book lang="en">
	<title>Anyframe File Upload Plugin</title>
	
	<bookinfo>
		<copyright>
			<year>2007-2014</year>
			<holder>Samsung SDS</holder>
		</copyright>
		<releaseinfo>Version 1.2.1-SNAPSHOT</releaseinfo>

		<productname>Anyframe FileUpload Plugin</productname>

		<authorgroup>
			<corpauthor></corpauthor>
		</authorgroup>

		<mediaobject>
			<imageobject>
				<!-- logo 변경 -->
				<imagedata fileref="../image/common/logo_pdf.jpg"/>
			</imageobject>
		</mediaobject>
		<legalnotice>
			<para>The copyright of this document is owned by Samsung SDS. This document can be used freely only for the purpose of open source community activities.
                The copyright holder should be clearly stated in case this document is copied or distributed, and any changed content should be specified.
                Commercial use of the original document and the modified document is not allowed. Should there be parts considered to have errors in this document, please register the issue for which we will take proper action.
			</para>
		</legalnotice>
	</bookinfo>
	
	<part id="fileupload_introduction_part">
		<title>Introduction</title>
		<partintro id="fileupload_introduction_part_intro">
			<para>
				Spring MVC supports uploading files in web UI using a module named MultipartResolver. 
				It also provides MultipartResolver implementors for the open source of <ulink url="http://jakarta.apache.org/commons/fileupload">Apache Commons FileUpload</ulink>.
				Anyframe fileupload plugin guides how to implement the file uploading function using these classes in Spring MVC-based web applications. 
				
			</para>
			<para role="introduction_title"><emphasis role="bold">Installation</emphasis></para>
			<para>Install the fileupload plugin by entering the following command in the Command window.</para>
			<programlisting language="java"><![CDATA[mvn anyframe:install -Dname=fileupload]]></programlisting>
			<para>
				The installation result can be checke using the installed (mvn anyframe:installed) or the jetty:run (mvn clean jetty:run) commands. 
			</para>
			<para role="introduction_title"><emphasis role="bold">Dependent Plugins</emphasis></para>
			<informaltable>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" colwidth="5*" />
					<colspec colnum="2" colname="col2" colwidth="5*" />
					<thead>
						<row>
							<entry align="center">Plugin Name</entry>
							<entry align="center">Version Range</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.6.1-SNAPSHOT/reference/htmlsingle/core.html">core</ulink></entry>
							<entry align="center" valign="middle">2.0.0 > * > 1.4.0</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
		</partintro>
	</part>	
	<part id="fileupload_usage_part">
		<title>File Upload</title>
		<partintro id="fileupload_usage_part_intro">
			<para>
			Spring MVC supports the <ulink url="http://commons.apache.org/fileupload/"> Commons file upload</ulink> library to support the file uploading function.
			To use the commons libary, the commons-fileupload-x.x.jar file and the commons-io-x.x.jar file are necessary. 
			These are included in the Anyframe deployed libraries.
			To implement the file uploading function, first MultipartResolver should be defined in a bean configuration file as follows. 
			<programlisting language="xml"><![CDATA[<bean id="multipartResolver"
		    class="org.springframework.web.multipart.commons.]]><emphasis
		    role="bold">CommonsMultipartResolver</emphasis>"<![CDATA[>
    <property name="maxUploadSize">
        <value>10000000</value>
    </property>
</bean>]]></programlisting>
		
		  		<para>
		  			Also, the location to upload the file can be designated with the property of the relevant controller, and the designated file upload location can be called in the controller through setter injection. 
		  			The example is as follows.
		  		</para>
		  		<programlisting language="xml"><![CDATA[<bean id="movieController"
    class="org.anyframe.sample.fileupload.movie.MovieController">
    <property name="destinationDir" value="C:/Temp/fileupload/temp" />
    <property name="movieService" ref="movieService" />
</bean>]]></programlisting>
		
				<para>
					For file uploading, set the input form type of the jsp file as file and the enctype of the form as 
		  			multipart/form-data.
		  		</para>
		
		  		<programlisting language="xml"><![CDATA[<body>
    <form name="fileForm" action="file.do" method="post"]]> <emphasis
      role="bold">enctype</emphasis>="<emphasis role="bold">multipart/form-data</emphasis>"<![CDATA[>
    파일  : <input type="file" style="width:400" name="file"><br/>
    <input type="submit" value="upload" />
    </form>
</body>]]></programlisting>
		
		  		<para>Spring MVC provides the object type named MultipartFile for file uploading.</para>
		
		  		<programlisting language="java">private MultipartFile file;
private Long size;
private String name;
private String filePath;</programlisting>
		
		  		<para>The following is the controller implemented for file uploading.</para>
		
		  		<programlisting language="java">public class MovieController extends AbstractCommandController {
		    
    private File <emphasis role="bold">destinationDir</emphasis>;
    
    /** 
     * destinationDir setter injection 
     * designated with the property of bean setup for file uploading
     */
     <emphasis role="bold">public void setDestinationDir(File destinationDir) {
            this.destinationDir = destinationDir;</emphasis>
        }
    
    ...
    
    protected ModelAndView handle(HttpServletRequest request,
            HttpServletResponse response, Object command, BindException exception)
            throws Exception {
        
        //Bind the received Request value with MultipartHttpServletRequest.
       <emphasis role="bold"> MultipartHttpServletRequest multipartRequest
                                             = (MultipartHttpServletRequest) request;</emphasis>
        
        //Find "file" of request and set it in the file object.
        MultipartFile file = multipartRequest.getFile("file");
        String fileName = file.getOriginalFilename();
       <emphasis role="bold"> File destination = File.createTempFile("file", fileName, destinationDir);</emphasis>
        
        //Copy file
       <emphasis role="bold"> FileCopyUtils.copy(file.getInputStream(), new FileOutputStream(destination));</emphasis>
        
        //Set a new file property
        HelloVO vo = (HelloVO) command;
        vo.setFilePath(destination.getAbsolutePath());
        vo.setName(file.getOriginalFilename());
        vo.setSize(file.getSize());
        vo.setFile(file);
        helloworldService.getMessage1(vo);
        return new ModelAndView("result", "message", vo);
    }
}</programlisting>
		
				<para>
					Simple file uploading can be executed as above. Since the above example received the file uploaded on the screen
					in the MultipartFile type, it does not require binding. Binding the file uploaded on the screen in the String type 
		  			can be implemented using StringMultipartEditor, and binding in the byte type array using ByteArrayMultipartEditor,
		  			by overriding the initBinder method in the Contoller as follows.
		  		</para>
		
		  		<itemizedlist>
		    		<listitem>
		      			<para>StringMultipartEditor</para>
		      			<programlisting language="java">protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder)
                    throws ServletException {
    binder.registerCustomEditor(<emphasis role="bold">String.class, new StringMultipartFileEditor()</emphasis>);
}</programlisting>
		    		</listitem>
		
		    		<listitem>
		      			<para>ByteArrayMultipartEditor</para>
		      			<programlisting
		      			language="java">protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder)
                    throws ServletException {
    binder.registerCustomEditor(<emphasis role="bold">byte[].class, new ByteArrayMultipartFileEditor()</emphasis>);
}</programlisting>
		    		</listitem>
		  		</itemizedlist>
			</para>
		</partintro>	
	</part>
</book>