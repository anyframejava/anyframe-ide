<chapter id="simpleweb_jquery_controller_simplejsoncontroller">

		<title>SimpleJSONController</title>
		<para>
		SimpleJSONController is developed to support component of jQuery that uses JSON object as data type. 
		Because SimpleJSONController inherits SimpleServiceController, VO object is used for Transfer Object of Service Layer. 
		Of course, when using SimpleJSONController to integrate jQuery, previous business service can be called without service layer change or additional coding. 
		Currently, Anyframe Simpleweb Plugin provides Grid, Autocomplete, UI, Tree, Combobox component sample of jQuery, and SimpleJSONContorller sets data mainly for Grid(jqgrid plugin) and Autocomplete(autocomplete plugin) function. 
		When drawing grid on grid component (jqgrid plugin) of jQuery, model object should be set in map format with key and value pair which can be recognized on grid that cannot receive page object returned after business service. 
		The following is a part of SimpleJSONController class. 
        </para>
		<programlisting language="java"><![CDATA[if (methodInfo.getOutputParam()[0].getName().equals(
		ANYFRAME_COMMON_PAGE)) {
	//.... 
	jsonModel.put("page", ((Page) result).getCurrentPage() + "");		
	jsonModel.put("total", ((Page) result).getMaxPage() + "");
	jsonModel.put("records", ((Page) result).getTotalCount());
	jsonModel.put("rows", ((Page) result).getList());
}]]></programlisting>
	<para>As seen in the above code, after carrying out business service, when the return value is org.anyframe.pagination.Page type, the jsonModel object is set in key value that can be recognized on Grid of jQuery. 
	Also, when using Autocomplete component, set key value data which recognized data to be showed on Autocomplete component. 
    </para>
	<programlisting language="java"><![CDATA[jsonModel.put("autoData", resultValue);]]></programlisting>
	<para>This jsonModel object is transferred to view after being set as the model object of controller. 
	The code above is already implemented in SimpleJSONContorller, so developer can use jQuery Grid and AutoComplete functions without additional coding. 
	When introducing another component that needs data with specific key value, or when additional functions are needed, the SimpleJSONController can be used after extension. 
	The following is a part of simpleweb-jquery-servlet.xml Spring configuration file added by Simpleweb Plugin installation.</para>
	<programlisting language="xml"><![CDATA[<bean name="/simplejson.do" class="]]><emphasis role="bold"><![CDATA[org.anyframe.simpleweb.controller.SimpleJSONController]]></emphasis><![CDATA[">
	<property name="beanMethodsRepo" ref="beanMethodsRepo" />
</bean>]]></programlisting>
	<para>If defined as above, “simplejson.do” request is processed by SimpleJSONController. 
	</para>
</chapter>	
	
<chapter id="simpleweb_jquery_controller_simplejsontreecontroller">
		<title>SimpleJSONTreeController</title>
		<para>SimpleJSONTreeController is a common controller for supporting jQuery tree component (jstree). 
		SimpleJSONTreeController is implemented by inheriting SimpleJSONController. 
		Basically, in order to set necessary node information needed in tree, domain objects that can be recognized by tree component should be used. 
		Developers should use Attributes, Data, JStreeNode domain classes which are provided by Anyframe as domain objects, and extends and adds related classes when additional Attribute setting is needed. 
		SimpleJSONTreeController basically has a node id that the user clicks to call business service, sets data to be shown on appropriate tree according to id. 
		In this case, setting tree data can change according to the view scenario, so developer should inherit SimpleJSONTreeController class and override setTreeData() method to implement. 
		The following is a part of MovieTreeController.java which extends and implements SimpleJSONTreeController that is added by Simpleweb Plugin installation. 
		<programlisting language="java"><![CDATA[public class MovieTreeController extends ]]><emphasis role="bold"><![CDATA[SimpleJSONTreeController]]></emphasis><![CDATA[ {

	@Override
	protected void ]]><emphasis role="bold"><![CDATA[setTreeData]]></emphasis><![CDATA[(ArrayList<JSTreeNode> listNode, List jsTreeList,
			String id) throws Exception {
		JSTreeNode node;
		Attributes attr;
		String data;
		if (id.equals("0")) {
			//...
			//  If id is 0, implement logic that sets Tree data.
			}
		} else {
			//...
			// If id is not 0, implement logic that sets Tree data.

			}
		}
	}
}]]></programlisting>
		</para>
</chapter>

<chapter id="simpleweb_jquery_controller_fileuploadcontroller">
		<title>FileUploadController</title>
		<para>Use the uploadify component of jQuery to upload selected file on a particular path, set file information and return to model object. The following is a part of the FileUploadController code. </para>
		<programlisting language="java"><![CDATA[public class FileUploadController extends AbstractController{
	protected IdGenService idGenService;

	public void setidGenerationService(IdGenService idGenService) {
		this.idGenService = idGenService;
	}
	
	private String uploadPath = "/upload/";
	
	public void setUploadPath(String uploadPath){
		this.uploadPath = uploadPath;
	}
	
	@Override
	protected ModelAndView handleRequestInternal(HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		MultipartFile file = (MultipartFile) ((MultipartHttpServletRequest)request).getFile("fileData");
		String fileDir = request.getParameter("fileDir");
		
		String destDir = request.getSession().getServletContext().getRealPath(
				uploadPath);
		
		if (fileDir == null) {
			fileDir = idGenService.getNextStringId();
			FileUtils.forceMkdir(new File(destDir + "/" + fileDir));
		}

		file.transferTo(new File(destDir + "/" + fileDir, file.getOriginalFilename()));
		
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("fileNm", file.getOriginalFilename());
		result.put("fileSize", file.getSize());
		result.put("fileDir", fileDir);

		ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("uploadResult", result);

		return mav;
	}

}]]></programlisting>
	<para>As can be seen in the above code, obtain "fileData" as MultipartFile type object and "fileDir" of request parameter, execute file upload logic, set "fileNm", "fileSize", "fileDir" data, and return the result on view. 

</para>
</chapter>