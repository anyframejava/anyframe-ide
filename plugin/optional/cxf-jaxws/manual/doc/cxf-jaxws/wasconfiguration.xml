<chapter id="cxf_wasconfiguration">
	<title>WAS(Web Application Server) Configuration</title>

	<para>
		Apache CXF 기반의 Web Services를 구현한 웹 어플리케이션을 WAS(Web Application Server)에 배포하여 구동시키게 되는데, 이때 각 WAS 별로 Apache CXF를 실행시키기 위해서 
		추가 작업이 필요할 수 있다. 본 장에서는 WAS 별 추가 환경 설정이 필요한 경우 어떻게 해야 하는지 설명하고 있다. Apache CXF는 JDK 1.5 이상을 지원하므로 설치 대상 WAS도 JDK 1.5 이상을 
		지원하는 WAS로 제한한다.
	</para>

	<para>다음은 각 WAS 별 내용이다.</para>

	<section id="cxf_wasconfiguration_tomcat">
		<title>Tomcat</title>
		<para>
			Apache CXF는 JDK 1.5 이상을 지원하므로 Tomcat 서버의 경우, Tomcat 5.5.x 버전 이상 서버가 대상이 된다.
			Tomcat 서버에 대한 설명 및 다운로드는 <ulink url="http://tomcat.apache.org/">이곳</ulink>을 참고하도록 한다.
		</para>
     	<para>
			단, Plugin 설치로 생성된 샘플 어플리케이션일 경우, 오픈소스 활용을 위한 WAS별 조치 사항을 확인하기 위해 먼저 설치된 각 Plugin 매뉴얼 내의 WAS(Web Application Server)별 유의사항
			을 참고하도록 한다.
     	</para>  		
		<section id="cxf_wasconfiguration_tomcat_5.5.23">
			<title>Tomcat</title>
			<para>추가 설정 없이 Apache CXF 사용이 가능하다.</para>
		</section>
	</section>

	<section id="cxf_wasconfiguration_jeus">
		<title>JEUS</title>
		<para>
			Apache CXF는 JDK 1.5 이상을 지원하므로 JEUS 서버의 경우, JEUS 5와 JEUS 6 버전의 서버가 대상이 되나, JEUS 5의 경우 JAXB 라이브러리의 충돌로 
			Apache CXF 사용이 불가능하다. JEUS 서버에 대한 설명 및 다운로드는 TmaxSoft 홈페이지를 참고하도록 한다.
    	</para>
     	<para>
			단, Plugin 설치로 생성된 샘플 어플리케이션일 경우, 오픈소스 활용을 위한 WAS별 조치 사항을 확인하기 위해 먼저 설치된 각 Plugin 매뉴얼 내의 WAS(Web Application Server)별 유의사항
			을 참고하도록 한다.
     	</para>     	
		<section id="cxf_wasconfiguration_jeus_5">
			<title>5.0</title>
			<para>
				Apache CXF 사용이 불가능 하다. JEUS 서버 라이브러리에 배포된 JAXB API, IMPL 및 참조 라이브러리(JAXB 1.x)와 Apache CXF를 사용하여 구현한 웹 어플리케이션에 
				배포된 라이브러리들(JAXB 2.x)과 버전 차이로 동작하지 않는다.
	      	</para>
		</section>
		<section id="cxf_wasconfiguration_jeus_6">
			<title>6.0</title>
			<para>
				추가 설정 없이 Apache CXF 사용이 가능하다. JEUS 서버 라이브러리에 배포된 JAXB API, IMPL 및 참조 라이브러리(JAXB 2.x)와 Apache CXF를 사용하여 구현한 
				웹 어플리케이션에 배포된 라이브러리들(JAXB 2.x)의 버전 일치로 문제없이 동작한다.
	      	</para>
			<para>
				단, Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, JEUS를 활용할 경우에는 샘플 어플리케이션의
				cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{JEUS 사용 포트}/...'로 변경해주어야 한다.
			</para>		      	
		</section>
	</section>

	<section id="cxf_wasconfiguration_weblogic">
		<title>WebLogic</title>
		<para>
			Apache CXF는 JDK 1.5 이상을 지원하므로 WebLogic 서버의 경우, WebLogic 9.2(JDK 1.5), 10.1(JDK 1.5), 10.3(JDK 1.6) 버전의 서버가 대상이 된다.
			WebLogic 서버에 대한 설명 및 다운로드는 <ulink url="http://www.oracle.com/appserver/index.html">이곳</ulink>을 참고하도록 한다.
		</para>
     	<para>
			단, Plugin 설치로 생성된 샘플 어플리케이션일 경우, 오픈소스 활용을 위한 WAS별 조치 사항을 확인하기 위해 먼저 설치된 각 Plugin 매뉴얼 내의 WAS(Web Application Server)별 유의사항
			을 참고하도록 한다.
     	</para>  
		<section id="cxf_wasconfiguration_weblogic_9.2">
			<title>9.2</title>
			<para>
				cxf-jaxws plugin 설치 시 라이브러리 문제로 인해 아래와 같이 추가 작업이 필요하며, EAR 파일로 웹어플리케이션을 구성하는 방법[방법 1] 혹은  
				geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 복사하는 방법[방법 2] 중에서 선택할 수 있다.			</para>
			<para>
			[방법 1] EAR 폴더 형태로 웹어플리케이션을 구성하는 방법
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, WebLogic을 활용할 경우에는 샘플 어플리케이션의
						cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{Weblogic 사용 포트}/...'로 변경해주어야 한다.
					</para>					
				</listitem>			
				<listitem>
					<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
						<programlisting language="java"><![CDATA[myproject.ear/ META-INF
             / myproject]]></programlisting>     						  
				</listitem>
				<listitem>
					<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
    "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Sample</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>/myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
				</listitem>
				<listitem>
					<para>
						META-INF 폴더에 weblogic-application.xml 파일을 배포한다. javax.jws package에 대해서 WEB-INF/lib 폴더 내에 있는 
						라이브러리를 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.  weblogic-application.xml 작성 방법은
					<ulink
						url="http://cwiki.apache.org/CXF20DOC/application-server-specific-configuration-guide.html#ApplicationServerSpecificConfigurationGuide-WebLogic">이곳</ulink>
					을 참고하도록 한다.
					</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application xmlns="http://www.bea.com/ns/weblogic/90">
    <prefer-application-packages>
	    <package-name>javax.jws.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>
				</listitem>
				<listitem>
					<para>myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내
						라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app xmlns="http://www.bea.com/ns/weblogic/90">
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
				</listitem>	
				<listitem>
					<para>
						myproject 폴더 내 WEB-INF/lib 폴더 내에 있는 xmlbeans-x.x.x.jar 파일을 제거한다.
					</para>
				</listitem>						
			</itemizedlist>
			<para>
			[방법 2] geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 복사하는 방법
			</para>			
			<itemizedlist>		
				<listitem>
					<para>
						JDK_HOME/jre/lib/endorsed 폴더에 geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 복사한다.
					</para>
				</listitem>
				<listitem>					
					<para>
						WebLogic 서버 설치 시 설정했던 JDK 1.5의 위치를 확인하여 JDK_HOME/jre/lib 폴더 하위에 endorsed 폴더를 생성하고, 현재 배포하려고 하는 
						웹 어플리케이션의 WEB-INF/lib 폴더 하위의 geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 endorsed 폴더 하위로 복사해
						넣도록 한다.
	          		</para>
	          		<para>[참고사항] 이 경우, 위 작업 내용이 WebLogic 서버 전체에 영향을 미치므로 주의하도록 한다.</para>
	          	</listitem>
			</itemizedlist>
		</section>
		<section id="cxf_wasconfiguration_weblogic_10.1">
			<title>10.1</title>
			<para>
				cxf-jaxws plugin 설치 시 라이브러리 문제로 인해 아래와 같이 추가 작업이 필요하다.
			</para>			
			<itemizedlist>
				<listitem>
					<para>
						Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, WebLogic을 활용할 경우에는 샘플 어플리케이션의
						cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{Weblogic 사용 포트}/...'로 변경해주어야 한다.
					</para>					
				</listitem>			
				<listitem>
					<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
						<programlisting language="java"><![CDATA[myproject.ear/ META-INF
             / myproject]]></programlisting>     						  
				</listitem>
				<listitem>
					<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
    "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Sample</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>/myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
				</listitem>
				<listitem>
					<para>
						META-INF 폴더에 weblogic-application.xml 파일을 배포한다. javax.jws package에 대해서 WEB-INF/lib 폴더 내에 있는 
						라이브러리를 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.
					</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application>
    <prefer-application-packages>
    	<package-name>javax.persistence.*</package-name>
	    <package-name>javax.jws.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>
				</listitem>
				<listitem>
					<para>myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내
						라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app>
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
				</listitem>	
				<listitem>
					<para>
						myproject 폴더 내 WEB-INF/lib 폴더 내에 있는 xmlbeans-x.x.x.jar 파일을 제거한다.
					</para>
				</listitem>						
			</itemizedlist>
		</section>
		<section id="cxf_wasconfiguration_weblogic_10.3">
			<title>10.3.3</title>
			<para>
				cxf-jaxws plugin 설치 시 라이브러리 문제로 인해 아래와 같이 추가 작업이 필요하다.
			</para>				
			<itemizedlist>
				<listitem>
					<para>
						Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, WebLogic을 활용할 경우에는 샘플 어플리케이션의
						cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{Weblogic 사용 포트}/...'로 변경해주어야 한다.
					</para>					
				</listitem>			
				<listitem>
					<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
						<programlisting language="java"><![CDATA[myproject.ear/ META-INF
             / myproject]]></programlisting>     						  
				</listitem>
				<listitem>
					<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
    "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Sample</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>/myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
				</listitem>
				<listitem>
					<para>
						META-INF 폴더에 weblogic-application.xml 파일을 배포한다. 아래 내용을 예시로 참고한다.
					</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application>
    <prefer-application-packages>
    	<package-name>javax.persistence.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>
				</listitem>
				<listitem>
					<para>myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내
						라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.</para>
					<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app>
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
				</listitem>	
				<listitem>
					<para>
						Apache CXF 2.3 사용 시: 현재 배포되는 Anyframe cxf-jaxws plugin은 Apache CXF 2.3 버전을 사용하고 있다. 
						이 경우 WEB-INF/lib 폴더 내에 있는 xercesImpl-x.x.x.jar 파일을 제거하고, 사용하려는 Weblogic 도메인 하위의 lib 폴더에 배포시키도록 한다. 
   					</para>
					<para>
						[참고] Apache CXF 2.2.7 사용 시: 이전 버전의 Anyframe cxf plugin은 Apache CXF 2.2.7 버전을 사용하고 있다. 이 경우 WEB-INF/lib 폴더 내에 있는
						xercesImpl-x.x.x.jar, stax-api-x.x.jar 파일을 제거하고 이중 xercesImpl-x.x.x.jar 파일만을 사용하려는 Weblogic 도메인 하위의 lib 폴더에 배포시키도록
						한다. 
   					</para>   					
				</listitem>				
				<listitem>
					<para>
						myproject 폴더 내 WEB-INF/lib 폴더 내에 있는 xmlbeans-x.x.x.jar 파일과 geronimo-stax-api_1.0_spec-x.x.x.jar 파일을 제거한다.
					</para>
				</listitem>			
			</itemizedlist>
		</section>
	</section>
</chapter>

