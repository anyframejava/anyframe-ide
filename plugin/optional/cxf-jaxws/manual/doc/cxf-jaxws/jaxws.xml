<chapter id="cxf_jaxws">
	<title>JAX-WS Frontend</title>
	<para>
		Web Services 표준 API인 JAX-WS를 사용하여 Annotation 설정을 통해 Web Services를 구현할
  		수 있게 해주는 Frontend 모델이다.
  	</para>

  	<para>
  		JAX-WS(Java API for XML Web Services)는 웹 서비스를 작성하는 자바 API로써, Java EE의
  		일부이다. 다른 Java EE의 자바 API와 같이, JAX-WS는 Java SE 5에서 도입된 어노테이션(Annotation)을
  		사용하여 웹 서비스 클라이언트 및 서버 모듈의 개발 및 배포를 쉽게 하고 있다. JAX-WS는 JAX-RPC 표준을 발전 시킨 개념으로
  		XML의 바인딩을 위한 JAXB 표준과 표준 스트리밍 파서를 위한 SAX 표준, 기능이 향상된 새로운 SAAJ 표준을 기반으로 통합,
  		발전된 웹 서비스 기술 표준이다. JAX-WS의 특징을 살펴보면 다음과 같다.</para>

	<itemizedlist>
    	<listitem>
      		<para>
      			JAX-RPC에 비해 Web Service 작성 편리
      		</para>

      		<para>
      			JAX-RPC와 비교해보았을때 Web Service 작성이 매우 편리해진 장점을 갖고 있다. Annotation 설정을
      			통해 Web Service Endpoint 작성 및 자바 타입과 WSDL 간의 매핑 등을 명시적으로 수행할 수 있다. 기존의
      			JAX-RPC 환경에서 Web Service를 생성하기 위해 작성해야만 했던 Web Service 배치 서술자 등을 모두
      			Annotation으로 대체 가능함으로써 Web Service 작성의 어려움을 크게 없애준다.
      		</para>
    	</listitem>

    	<listitem>
      		<para>
      			Annotation을 통해 하는 작업
      		</para>

      		<para>
      			자바와 WSDL의 매핑 및 자바 타입과 WSDL에서 참조하는 메시지의 Schema 타입으로의 매핑을 담당한다. 실제
      			Web Service 메시지를 처리하는 Runtime Process 중에 필요한 정보를 제공하며 Web Service 호출에
      			응답하는데 사용된다.
      		</para>
    	</listitem>

    	<listitem>
      		<para>
      			Annotation 관련 Spec.
      		</para>

      		<para>
      			JAX-WS 2.x에서 사용하게 되는 Annotation은 Web Services Metadata(JSR-181)
      			Spec.과 JAX-WS 2.x Spec.에 분리 정의되어 있다. 이외의 메시지 타입 매핑을 위해 사용되는 Annotation은
      			JAXB 2.x Spec.에 정의되어 있다. Web Services Metadata(JSR-181) Spec.에 정의된 대표적인
     			Annotation으로는 다음과 같은 것들이 있다.(javax.jws.WebService, javax.jws.WebMethod,
      			javax.jws.WebParam, javax.jws.WebResult,
      			javax.jws.soap.SOAPBinding)
      		</para>
    	</listitem>
  	</itemizedlist>

  	<para>
  		JAX-WS의 프로세스를 그림으로 살펴보면 다음과 같다.
  	</para>

  	<mediaobject>
    	<imageobject>
      		<imagedata align="center" fileref="../image/cxf-jaxws/webservices/jaxws.jpg" />
    	</imageobject>
    	<textobject>
    		<phrase>
    			JAX-WS 프로세스를 순서대로 나타낸 그림이다. 순서대로 표시하면, 1) 웹서비스 클라이언트가 서버로부터 WSDL을 얻는다. 2) WSDL을 기반으로 SOAP 메시지를 생성하여 웹서비스 
    			실행을 요청한다. 3) EndPoint Listener가 웹서비스 요청을 받고, mustUnderstandProcessing, SOAPHandler 순으로 요청이 전달된다. 4) 데이터 바인딩이 이루어진다.
    			5) 웹서비스가 실행된다. 6) 실행 결과가 SOAP 프로토콜에 바인딩되어 SOAP 메시지 형태로 웹서비스 클라이언트에게 전달됨을 보여주고 있다.   
    		</phrase>
    	</textobject>
  	</mediaobject>

  	<para>
  		다음은 JAX-WS Frontend를 Server와 Client 단에서 어떻게 사용해야 하는지에 대한 사용법이다. JAX-WS
  		Frontend는 크게 JAX-WS Frontend API를 사용하여 서버와 클라이언트를 작성하는 방식과 Spring
  		Configuration을 이용하는 방식으로 구분하여 사용될 수 있다.
  	</para>

  	<itemizedlist>
    	<listitem>
      		<para>
      			Server Configuration
      		</para>

      		<orderedlist>
        		<listitem>
          			<para>
          				<link linkend="cxf_jaxws_webservice">Web Service 작성</link>
          			</para>
        		</listitem>

        		<listitem>
          			<para>
          				서버 구동(2가지 방식 중 택1)
          			</para>
          			<itemizedlist>
            			<listitem>
              				<para>
              					<link linkend="cxf_jaxws_endpoint">Spring
              					Configuration XML - <![CDATA[<jaxws:endpoint/> tag 사용 (추천 방식)]]></link>
              				</para>
            			</listitem>
            			<listitem>
              				<para>
              					<link linkend="cxf_jaxws_serveraip">[Server]
              					JAX-WS Frontend API 사용</link>
              				</para>
            			</listitem>            
          			</itemizedlist>
        		</listitem>
			</orderedlist>
    	</listitem>

	    <listitem>
	    	<para>
	    		Client Configuration
	    	</para>
	
	      	<orderedlist>
	        	<listitem>
	          		<para>
	          			클라이언트 작성(2가지 방식 중 택1)
	          		</para>
	
	          		<itemizedlist>
	
	            		<listitem>
	              			<para>
	              				<link linkend="cxf_jaxws_clienttag">Spring
	              				Configuration XML - <![CDATA[<jaxws:client/> tag 사용 (추천 방식)]]></link></para>
	            		</listitem>
	                        
	            		<listitem>
	              			<para>
	              				<link linkend="cxf_jaxws_clientaip">[Client]
	              				JAX-WS Frontend API 사용</link></para>
	            		</listitem>
	              
	          		</itemizedlist>
	        	</listitem>
			</orderedlist>
		</listitem>
	
	    <listitem>
	    	<para>
	    		<link linkend="cxf_jaxws_annotation">[참고] Web
	      		Services 작성 시 Annotation 설정 방법</link>
	      	</para>
	    </listitem>
	</itemizedlist>

	<section id="cxf_jaxws_webservice">
    	<title>Web Service 작성</title>

    	<para>
    		Web Service로 노출시킬 서비스를 작성하는데, 일반 서비스 Bean 개발 방식과 거의 동일하다. 단, 인터페이스
    		클래스에 @WebService Annotation이 설정되어야 함에 유의하도록 한다.
    	</para>

    	<section id="cxf_jaxws_webservice_sample">
      		<title>Samples</title>

      		<para>
      			다음은 Web Service로 노출시킬 MovieFinder Service에 대한 예제이다. 서비스는 일반 Spring Bean
     			개발과 동일하게 인터페이스 클래스, 구현 클래스, DAO(Data Access Object) 클래스, VO(Value
      			Object) 클래스들로 구성되어 있다.
      		</para>

      		<itemizedlist>
        		<listitem>
          			<para>
          				Interface Class
          			</para>

          			<para>
          				다음은 Movie Service의 인터페이스 클래스를 작성한 MovieService.java 의 일부이다. 인터페이스 클래스 상단에
          				@WebService Annotation을 작성해줘야 한다. @WebService Annotation의 속성 값들도
         	 			다양하게 존재하고, 각 메소드와 파라미터 별로 정의할 수 있는 Annotation의 종류도 여러가지가 있으나 필수 사항으로
          				필요한 Annotation은 @WebService뿐이다. 다른 종류의 Annotation에 대해서 추가 작성하는 방법에
          				대해서는 <link linkend="cxf_jaxws_annotation">[참고] Web
          				Services 작성 시 Annotation</link> 설정 방법 을 참고하도록 한다. 
          				<programlisting language="java"><emphasis role="bold">@WebService</emphasis>
<![CDATA[public interface MovieService {

	@XmlJavaTypeAdapter(CXFMapAdapter.class)
	Map<String, Movie> get(String movieId) throws Exception;

	Page getPagingList(Movie movie, int pageIndex) throws Exception;
	
	중략...
}
]]></programlisting>
    				</para>
        		</listitem>

        		<listitem>
          			<para>
          				Implementation Class
          			</para>

          			<para>
          				Interface Class를 구현한 클래스로 Web Service 구현과 관련된 부분 없이 작성될 수 있다.
          				다음은 Movie Service의 인터페이스 클래스를 구현한 MovieServiceImpl.java 의 일부이다.
          				내부적으로 MovieDao를 사용하여 Movie 정보를 관리하고 있다. 구현 클래스 상단에 @WebService Annotation을
          				작성해줄 수도 있다. 이미 인터페이스 클래스 상단에 @WebService Annotation을 작성해주었으므로
          				여기서는 생략시킨다. Annotation 설정 방법에 대해서는
          				<link linkend="cxf_jaxws_annotation"> [참고] Web Services 작성 시
          				Annotation 설정 방법 </link>을 참고하도록 한다. 
          				<programlisting language="java"><emphasis role="bold">@Service("cxfJaxWsMovieService")</emphasis><![CDATA[
@Transactional(rollbackFor = { Exception.class }, propagation = Propagation.REQUIRED)
public class MovieServiceImpl implements MovieService {

	@Inject
	@Named("cxfJaxWsMovieDao")
	private MovieDao movieDao;

	public Map<String, Movie> get(String movieId) throws Exception {
		return this.movieDao.get(movieId);
	}

	public Page getPagingList(Movie movie, int pageIndex) throws Exception {
		return this.movieDao.getPagingList(movie, pageIndex);
	}
    중략...
}]]></programlisting></para>
				</listitem>
			</itemizedlist>
    	</section>
	</section>


	<section id="cxf_jaxws_endpoint">
    	<title>Spring Configuration XML - jaxws:endpoint tag 사용</title>

    	<para>
    		<![CDATA[작성된 서비스를 Web Service로 노출시키는 서버를 구동하기 위해서 2가지 방식이 지원된다. 이중 Spring
    		Configuration XML - <jaxws:endpoint/> tag를 사용하여 서버를 구동시켜보도록 한다. (Apache CXF에서는 <jaxws:server/> tag를 사용하여 서버를 구동시키는 방법도 제공하고 있으나 Anyframe에서는 
    		<jaxws:endpoint/> tag 사용을 채택하고 있으므로 <jaxws:server/> tag에 대한 내용은 매뉴얼에서 언급하고 있지 않다.) ]]>
    	</para>
    	<para>
    		<![CDATA[<jaxws:endpoint/> tag의 각 속성값에 대한 설명은 다음 표와 같다. 아래 표에 나와있지 않은 속성들도 여러
    		가지가 존재한다. 단, 여기서는 필수적으로 작성해야 하는 속성값에 대한 설명을 작성해놓은 것으로 나머지 속성값들에 대한 설명은]]>
    		<ulink url="http://cxf.apache.org/docs/jax-ws-configuration.html">JAX-WS Configuration</ulink>을 참고하도록 한다.
    	</para>

    	<informaltable>
    		<caption><![CDATA[<jaxws:endpoint/>]]> 속성 목록</caption>
      		<tgroup cols="4">
            	<colspec colnum="1" colname="col1" colwidth="2*"/>
                <colspec colnum="2" colname="col2" colwidth="6*"/>
                <colspec colnum="3" colname="col3" colwidth="1*"/>
                <colspec colnum="4" colname="col4" colwidth="1*"/>

        		<thead>
          			<row>
            			<entry align="center">Property Name</entry>

            			<entry align="center">Description</entry>

            			<entry align="center">Required</entry>

            			<entry align="center">Default Value</entry>
          			</row>
        		</thead>

        		<tbody>
          			<row>
			            <entry>id</entry>
			
			            <entry>spring bean id를 작성한다.</entry>
			
			            <entry align="center">Y</entry>
			
			            <entry align="center">N/A</entry>
          			</row>

          			<row>
            			<entry>implementor</entry>

            			<entry>
            				구현 클래스를 작성한다. 클래스명 대신에 spring bean id로 대체하고자 하면 bean id 앞에
            				#을 붙여서 작성하면 된다.
            			</entry>

            			<entry align="center">Y</entry>

            			<entry align="center">N/A</entry>
          			</row>

          			<row>
            			<entry>address</entry>

            			<entry>서비스가 동작할 주소를 상대 경로로 작성한다.</entry>

			            <entry align="center">Y</entry>

			            <entry align="center">N/A</entry>
          			</row>
        		</tbody>
      		</tgroup>
		</informaltable>

    	<section id="cxf_jaxws_endpoint_sample">
      		<title>Samples</title>

      		<para>
      			<![CDATA[다음은 Spring Configuration XML - <jaxws:endpoint/> tag를 사용하여
      			Movie Service를 Web Service로 노출시키는 서버를 구동하는 예제이다.]]>
      		</para>

      		<itemizedlist>
        		<listitem>
          			

          			<para>
          				<![CDATA[다음은 비즈니스 레이어의 서비스를 Web Service로 노출시키는 <jaxws:endpoint/>
          				tag 속성을 정의한 context-cxf-jaxws.xml 의 일부이다.]]>
          				<para>
          				Configuration
          			</para><programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cxf="http://cxf.apache.org/core"
  ]]><emphasis role="bold">xmlns:jaxws="http://cxf.apache.org/jaxws"</emphasis><![CDATA[	
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
  ]]><emphasis role="bold">http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd</emphasis><![CDATA["> 
          			
    <!-- Load CXF modules from cxf.jar -->
    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" /> 
	
    <!-- Enable message logging using the CXF logging feature -->   
    <cxf:bus>
        <cxf:features>
            <cxf:logging />
        </cxf:features>
    </cxf:bus>	
	
    <!-- JAX-WS Frontend to expose movieService using endpoint tag -->
    <]]><emphasis role="bold">jaxws:endpoint</emphasis><![CDATA[ id="cxfJaxWsServerMovieService" implementor="#cxfJaxWsMovieService" address="/ws"/>]]></programlisting>
    				</para>

          			<para>
          				Jetty 혹은 Tomcat 서버 등의 WAS를 이용하여 웹 어플리케이션을 구동하고 비즈니스 레이어의 서비스를 Web Service로
         			 	노출시키게 되는데, 이때 web.xml 파일에 Spring 속성 정의 XML 파일을
          				org.springframework.web.context.ContextLoaderListener를 이용하여 등록시켜 줘야
          				한다. 다음은 CXFServlet과 ContextLoaderListener를 정의한 web.xml의 일부이다. 
          				<programlisting language="xml"><![CDATA[<web-app 
    중략...
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:/spring/context-*.xml
        </param-value>
    </context-param>
	
    <listener>
        <listener-class>]]><emphasis role="bold">org.springframework.web.context.ContextLoaderListener</emphasis><![CDATA[</listener-class>
    </listener>
	중략...
    <!-- cxf-configuration-START -->  
    <servlet>
        <servlet-name>CXF-JAXWS-Servlet</servlet-name>
           <servlet-class>]]><emphasis role="bold">org.apache.cxf.transport.servlet.CXFServlet</emphasis><![CDATA[</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>	
	
    <servlet-mapping>
        <servlet-name>CXF-JAXWS-Servlet</servlet-name>
        <url-pattern>/cxf-jaxws/*</url-pattern>
    </servlet-mapping>	
    <mime-mapping>
        <extension>wsdl</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>xsd</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>    
    중략...
</web-app>]]></programlisting>
					</para>
        		</listitem>
      		</itemizedlist>
    	</section>
  	</section>

	<section id="cxf_jaxws_serveraip">
    	<title>Server: JAX-WS Frontend API 사용</title>

    	<para>
    		작성된 서비스를 Web Service로 노출시키는 서버를 구동하기 위해서 2가지 방식이 지원된다. 
           	이중 JAX-WS Frontend API를 이용하여 직접 자바코드를 작성하여 서버를 구동시켜보도록 한다. Apache CXF에서 제공하는 JAX-WS Frontend
    		API를 직접 호출하여 작성하는 것이 가능하며, JaxWsServerFactoryBean 클래스를 Spring Configuration 파일의 Bean으로 등록하여 
    		설정하는 것도 가능하다.
    	</para>

    	<section id="cxf_jaxws_serveraip_sample">
      		<title>Samples</title>

      		<para>
      			다음은 Apache CXF에서 제공하는 JaxWsServerFactoryBean을 직접
      			이용하여 MovieFinder Service를 Web Service로 노출시키는 서버를 구동하는 예제이다.
      		</para>

      		<itemizedlist>
        		<listitem>
          			<para>
          				Apache CXF JaxWsServerFactoryBean을 사용한 서버 구동
          			</para>

          			<para>
          				다음은 비즈니스 레이어의 서비스를 Web Service로 노출시키는 서버를 구동하는 코드 작성 예이다.
          				<programlisting language="java">MovieServiceImpl implementor = new MovieServiceImpl();
JaxWsServerFactoryBean svrFactory=new JaxWsServerFactoryBean();
svrFactory.setServiceClass(MovieService.class);
svrFactory.setAddress("http://localhost:8080/myproject/cxf-jaxws/ws");
svrFactory.setServiceBean(implementor);     
svrFactory.create();</programlisting>
					</para>
        		</listitem>
      		</itemizedlist>
    	</section>
	</section>
  

	<section id="cxf_jaxws_clienttag">
    	<title>Spring Configuration XML - jaxws:client tag 사용</title>

    	<para>
    		<![CDATA[Web Services에 접근하기 위한 클라이언트 작성 방식에는 2가지 방식이 지원된다. 이중 Spring
    		Configuration XML - <jaxws:client/> tag를 사용하여 클라이언트를 작성하여 Web
    		Services에 접근해보도록 한다. <jaxws:client/> tag의 각각의 Attribute 속성값에 대한 설명은
    		다음 표와 같다. 아래 표에 나와있지 않은 속성들도 여러 가지가 존재한다. 단, 여기서는 필수적으로 작성해야 하는 Attribute
    		속성값에 대한 설명을 작성해놓은 것으로 나머지 속성 값들에 대한 설명은 ]]><ulink url="http://cxf.apache.org/docs/jax-ws-configuration.html">JAX-WS Configuration</ulink>을 참고하도록 한다.
    		<informaltable>
    			<caption><![CDATA[<jaxws:client/>]]> 속성 목록</caption>
        		<tgroup cols="4">
          			<thead>
            			<row>
              				<entry align="center">Property Name</entry>

              				<entry align="center">Description</entry>

              				<entry align="center">Required</entry>

              				<entry align="center">Default Value</entry>
            			</row>
          			</thead>

          			<tbody>
            			<row>
              				<entry>id</entry>

              				<entry>spring bean id를 작성한다.</entry>

			              	<entry align="center">Y</entry>
			
			              	<entry align="center">N/A</entry>
            			</row>

            			<row>
				       		<entry>serviceBean</entry>
				
				            <entry>서비스의 인터페이스 클래스를 작성한다.</entry>
				
				            <entry align="center">Y</entry>
				
				            <entry align="center">N/A</entry>
            			</row>

            			<row>
		              		<entry>address</entry>
		
		              		<entry>서비스 접근 URL Address를 절대 경로로 작성한다.</entry>
		
		              		<entry align="center">Y</entry>

              				<entry align="center">N/A</entry>
            			</row>
          			</tbody>
        		</tgroup>
      		</informaltable>
      	</para>

		<section id="cxf_jaxws_clienttag_sample">
      		<title>Samples</title>

      		<para>
      			<![CDATA[다음은 Spring Configuration XML - <jaxws:client/> tag를 사용하여
      			Movie Service에 접근하는 예제이다.]]>
      		</para>

      		<itemizedlist>
        		<listitem>
          			<para>
          				Configuration
          			</para>

          			<para>
          				<![CDATA[다음은 Web Services로 노출된 Movie Service에 접근하는
          				<jaxws:client/> tag 속성을 정의한 cxf-jaxws-servlet.xml 의 일부이다.]]>
          				<programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cxf="http://cxf.apache.org/core"
  ]]><emphasis role="bold">xmlns:jaxws="http://cxf.apache.org/jaxws"</emphasis><![CDATA[	
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
  ]]><emphasis role="bold">http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd</emphasis><![CDATA[">           				
  <]]><emphasis role="bold">jaxws:client id="cxfJaxWsClientMovieService" serviceClass="myproject.cxf.jaxws.moviefinder.service.MovieService"
    address="http://localhost:8080/myproject/cxf-jaxws/ws" </emphasis><![CDATA[/>]]></programlisting>
    				</para>
        		</listitem>

        		<listitem>
          			<para>
          				Controller
          			</para>

          			<para>
          				다음은 앞서 정의한 속성 설정 파일들을 기반으로 하여 Web Services로 노출된 Movie Service에
         				접근하는 Controllert 클래스인 MovieController.java의 일부이다.
          				<programlisting language="java"><![CDATA[@Controller("cxfJaxWsMovieController")
@RequestMapping("/cxfJaxWsMovie.do")
@SessionAttributes(types = Movie.class)
public class MovieController {

	@Inject
	@Named("cxfJaxWsClientMovieService")
	private MovieService movieService;

	@RequestMapping(params = "method=get")
	public String get(@RequestParam("movieId") String movieId, Model model)
			throws Exception {
		Map<String, Movie> resultMap = this.movieService.get(movieId);
		model.addAttribute(resultMap.get("movie"));

		return "cxf-jaxws/moviefinder/movie/form";
	}
중략...]]></programlisting>
    				</para>
        		</listitem>
      		</itemizedlist>
    	</section>
	</section>

	<section id="cxf_jaxws_clientaip">
    	<title>Client: JAX-WS Frontend API 사용</title>

    	<para>
    		Web Service에 접근하기 위한 클라이언트 작성 방식에는 2가지 방식이 지원된다. 이중 JAX-WS Frontend
    		API를 직접 이용한 클라이언트를 작성하여 Web Service에 접근해보도록 한다. Apache CXF에서 제공하는 JAX-WS
    		Frontend API를 직접 호출하여 작성하는 것이 가능하며, JaxWsProxyFactoryBean 클래스를 Spring Configuration 파일의 Bean으로 등록하여 
   		 	설정하는 것도 가능하다.
   		 </para>

    	<section id="cxf_jaxws_clientaip_sample">
      		<title>Samples</title>

      		<para>
      			다음은 Apache CXF에서 제공하는 JaxWsProxyFactoryBean를 직접 이용하여
      			Web Services로 노출된 Movie Service에 접근하는 예제이다.
      		</para>

      		<itemizedlist>
        		<listitem>
          			<para>
          				Apache CXF JaxWsProxyFactoryBean 사용한 클라이언트
          			</para>

          			<para>
          				다음은 Apache CXF에서 제공하는 JaxWsProxyFactoryBean 클래스를 사용하여 Web
          				Services로 노출된 Movie Service에 접근하는 코드 작성 예이다. 
          				<programlisting language="java"><![CDATA[JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
factory.setServiceClass(MovieService.class);
factory.setAddress("http://localhost:8080/myproject/cxf-jaxws/ws");

MovieService movieService = (MovieService) factory.create();
Map<String, Movie> resultMap = movieService.get("MV-00003");]]></programlisting>
					</para>
        		</listitem>
      		</itemizedlist>
    	</section>
	</section>
  
  	<section id="cxf_jaxws_annotation">
    	<title>Annotation 작성</title>

    	<para>
    		@WebService()만 필수 사항이고 대부분 annotation의 경우 디폴트 값이 제공되므로 작성이 불필요
    		하다.
    	</para>

    	<section id="cxf_jaxws_annotation_webservice">
      		<title>@WebService (javax.jws.WebService)</title>

      		<para>
      			Annotation을 포함하고 있는 자바 클래스가 Web Service Endpoint 인터페이스 클래스 혹은 구현
      			클래스임을 명시할 때 사용하며 SEI와 구현 클래스에 설정한다.(필수 사항) 모든 Property의 값을 작성할 필요는 없으나
      			되도록 많은 정보를 작성하는 것을 권장한다. SEI에 더 많은 Annotation 정보를 작성할 수록 잘 정의된 WSDL을
      			생성시킬 수 있기 때문이다. Property에 대한 세부 내용은 다음 표와 같다.
      			<informaltable>
      				<caption>@WebService 속성 목록</caption>
          			<tgroup cols="6">
                		<colspec colnum="1" colname="col1" colwidth="2*"/>
		                <colspec colnum="2" colname="col2" colwidth="1*"/>
		                <colspec colnum="2" colname="col2" colwidth="1*"/>
		                <colspec colnum="1" colname="col1" colwidth="2*"/>
		                <colspec colnum="2" colname="col2" colwidth="1*"/>
		                <colspec colnum="2" colname="col2" colwidth="3*"/>
            			<thead>
              				<row>
				            	<entry align="center">Property Name</entry>
				
				                <entry align="center">Type</entry>
				
				                <entry align="center">필수</entry>
				
				                <entry align="center">WSDL Mapping</entry>
				
				                <entry align="center">Default</entry>
				
				                <entry align="center">설명</entry>
              				</row>
            			</thead>

            			<tbody>
              				<row>
				                <entry>name</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>wsdl:portType</entry>
				
				                <entry>클래스명</entry>
				
				                <entry>
				                	웹 서비스 명으로 wsdl:portType으로 매핑됨, 기본값은 인터페이스클래스 혹은 구현 클래스의
				                	패키지를 제외한 명
				                </entry>
				              </row>

				            <row>
								<entry>targetNamespace</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry align="center">N/A</entry>
				
				                <entry>패키지 명</entry>
				
				                <entry>
				                	웹 서비스로부터 생성된 XML element와 WSDL에 사용될 XML
				                	namespace
				                </entry>
              				</row>

				            <row>
				                <entry>serviceName</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>wsdl:service</entry>
				
				                <entry>클래스명+"Service"</entry>
				
				                <entry>
				                	SEI에 설정 불가 , 서비스 명으로 wsdl:service 로 매핑됨, 기본값은 인터페이스클래스
				                	혹은 구현 클래스의 패키지명을 제외한 명+"Service"
				                </entry>
				       		</row>

				            <row>
				                <entry>wsdlLocation</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry align="center">N/A</entry>
				
				                <entry>서비스 디플로이 URI</entry>
				                					
				                <entry>
				                	미리 정의된 WSDL의 위치로 WSDL에 정의된 portType, binding은 서비스 구현
				               		 클래스에 작성된 값들과 일치해야 함
				               	</entry>
				            </row>

				            <row>
				                <entry>endpointInterface</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry align="center">N/A</entry>
				
				                <entry>SEI의 패키지명을 포함한 클래스명, 구현 클래스 명+"Port"</entry>
				
				                <entry>SEI에 설정 불가 , 구현 클래스의 SEI 명</entry>
				            </row>
				
				            <row>
				                <entry>portName</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>wsdl:port</entry>
				
				                <entry>구현 클래스 명+"Port"</entry>
				
				                <entry>SEI에 설정 불가 , wsdl:port로 매핑됨, 기본값은 구현클래스명+"Port"</entry>
				            </row>
            			</tbody>
          			</tgroup>
        		</informaltable>
        	</para>

      		<itemizedlist>
        		<listitem>
          			<para>
          				@WebService annotation 설정이 적용된 클래스 내의 메소드 규칙
          			</para>

          			<itemizedlist>
            			<listitem>
              			<para>
              				구현 클래스의 @WebService annotation이 SEI를 참조하는 경우 구현 클래스에
              				@WebMethod annotation은 없어야 한다.
              			</para>
            			</listitem>

            			<listitem>
              				<para>
              					SEI의 모든 공용 메소드는 @WebMethod annotation 설정 여부와 관계 없이 Web
              					Service로 노출된 메소드로 간주된다.
              				</para>
            			</listitem>

            			<listitem>
              				<para>
              					SEI를 참조하지 않는 구현 클래스의 경우 @WebMethod annotation이
              					exclude=true 값으로 지정되면 해당 메소드가 Web Service로 노출되지 않는다.
              				</para>
            			</listitem>
          			</itemizedlist>
        		</listitem>
      		</itemizedlist>
		</section>

    	<section id="cxf_jaxws_annotation_webparam">
      		<title>@WebParam (javax.jws.WebParam)</title>

      		<para>
      			Web Service의 자바 메소드의 입력 파라미터와 WSDL 파일에서 파라미터를 표현하는 XML element 간의
      			매핑을 설정하며 Property에 대한 세부 내용은 다음 표와 같다. 
      			<informaltable>
      			<caption>@WebParam 속성 목록</caption>
          		<tgroup cols="4">
	                <colspec colnum="1" colname="col1" colwidth="1*"/>
	                <colspec colnum="2" colname="col2" colwidth="1*"/>
	                <colspec colnum="3" colname="col3" colwidth="1*"/>
	                <colspec colnum="4" colname="col4" colwidth="7*"/>

            		<thead>
              			<row>
			                <entry align="center">Property</entry>
			
			                <entry align="center">Type</entry>
			
			                <entry align="center">필수</entry>
			
			                <entry align="center">설명</entry>
              			</row>
            		</thead>

            		<tbody>
              			<row>
			                <entry>name</entry>
			
			                <entry>String</entry>
			
			                <entry align="center">X</entry>
			
			                <entry>
			                	파라미터명으로 RPC style의 Web Service의 경우 파라미터를 나타내는
			                	wsdl:part으로 매핑되고, Document style의 Web Service의 경우 파라미터를 나타내는
			                	XML element의 로컬 네임이 됨. 기본값은 메소드의 파라미터명
			                </entry>
              			</row>

              			<row>
                			<entry>targetNamespace</entry>

                			<entry>String</entry>

                			<entry align="center">X</entry>

                			<entry>
                				파라미터의 XML namespace로 파라미터가 XML element로 대응되는 Document
                				style의 Web Service에서만 사용됨. 기본값은 Web Service의
                				targetNamespace
                			</entry>
              			</row>

              			<row>
                			<entry>mode</entry>

                			<entry>Enum</entry>

                 			<entry align="center">X</entry>

                			<entry>파라미터가 전달되는 방향으로 IN, OUT 혹은 INOUT 중 하나 선택. 기본값은IN</entry>
              			</row>

              			<row>
			                <entry>header</entry>
			
			                <entry>Boolean</entry>
			
			                <entry align="center">X</entry>
			
			                <entry>true로 설정되면 파라미터를 SOAP 메시지 BODY가 아닌 SOAP 메시지 헤더로부터 가져옴. 기본값은 false</entry>
              			</row>

              			<row>
                			<entry>partName</entry>

                			<entry>String</entry>

                			<entry align="center">X</entry>

                			<entry>RPC 혹은 Document style의 매개변수 양식이 BARE인 경우에만 사용됨</entry>
              			</row>
            		</tbody>
          		</tgroup>
        	</informaltable></para>
		</section>

		<section id="cxf_jaxws_annotation_webmethod">
      		<title>@WebMethod (javax.jws.WebMethod)</title>

      		<para>
      			Web Service 메소드로 공개되는 메소드를 설정할 때 사용하며 @WebMethod annotation은
      			@WebService annotation 설정이 된 클래스에서만 지원된다. Property에 대한 세부 내용은 다음 표와 같다.
      			<informaltable>
      				<caption>@WebMethod 속성 목록</caption>
          			<tgroup cols="4">
                		<colspec colnum="1" colname="col1" colwidth="2*"/>
                		<colspec colnum="2" colname="col2" colwidth="1*"/>
		                <colspec colnum="3" colname="col3" colwidth="1*"/>
		                <colspec colnum="4" colname="col4" colwidth="6*"/>

            			<thead>
              				<row>
				                <entry align="center">Property</entry>
				
				                <entry align="center">Type</entry>
				
				                <entry align="center">필수</entry>
				
				                <entry align="center">설명</entry>
              				</row>
            			</thead>

            			<tbody>
              				<row>
				                <entry>operationName</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>공개되는 메소드 명으로 wsdl:operation으로 매핑됨. 기본값은 자바 메소드 명</entry>
              				</row>

              				<row>
				                <entry>action</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>
				                	메소드에 적용되는 action 속성으로 SOAPBinding의 경우 SOAP 메시지에서
				                	SOAPAction 헤더의 값을 결정
				                </entry>
              				</row>

              				<row>
				                <entry>exclude</entry>
				
				                <entry>Boolean</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>Web Service에서 메소드를 제외시킬지 여부 지정함. 기본값은 false</entry>
              				</row>
            			</tbody>
          			</tgroup>
        		</informaltable>
        	</para>
		</section>

    	<section id="cxf_jaxws_annotation_oneway">
      		<title>@OneWay (javax.jws.OneWay)</title>

      		<para>
      			입력 값은 있으나 리턴 값이 없는 단방향 메소드를 정의할 때 사용한다. @WebMethod annotation과 함께
      			사용되며 별도의 속성 정의가 필요없다.
      		</para>
    	</section>

    	<section id="cxf_jaxws_annotation_webresult">
      		<title>@WebResult (javax.jws.WebResult)</title>

      		<para>
      			Web Service 메소드로 공개되는 메소드의 리턴 값과 WSDL의 리턴 값을 표현하는 XML 요소 간의 매핑을
      			설정할 때 사용한다. Property에 대한 세부 내용은 다음 표와 같다.
      			<informaltable>
      				<caption>@WebResult 속성 목록</caption>
	          		<tgroup cols="4">
	                	<colspec colnum="1" colname="col1" colwidth="2*"/>
	                	<colspec colnum="2" colname="col2" colwidth="1*"/>
	                	<colspec colnum="3" colname="col3" colwidth="1*"/>
	                	<colspec colnum="4" colname="col4" colwidth="6*"/>
	
	            		<thead>
	              			<row>
				                <entry align="center">Property</entry>
				
				                <entry align="center">Type</entry>
				
				                <entry align="center">필수</entry>
				
				                <entry align="center">설명</entry>
	              			</row>
	            		</thead>
	
	            		<tbody>
	              			<row>
				                <entry>name</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>
				                	WSDL에서 리턴 값을 나타내는 element 명, RPC style의 Web Service에서는
					        		리턴 값을 나타내는 wsdl:part 에 매핑되며, Document style의 Web Service에서는 리턴
					            	값을 나타내는 XML element의 로컬
					            </entry>
	              			</row>
	
	              			<row>
				                <entry>targetNamespace</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry>
				                	리턴값의 XML namespace로 RPC style의 Web Service 혹은 Document
				                	style의 매개변수 양식이 BARE인 Web Service에서만 사용됨. 기본값은 Web Service의
				                	targetNamespace값
				                </entry>
	              			</row>
	
	              			<row>
				                <entry>header</entry>
				
				                <entry>String</entry>
				
				                <entry align="center">X</entry>
				
				                <entry> 결과를 헤더에 저장할 것인지 여부 지정. 기본값은 false</entry>
	              			</row>
	
	              			<row>
	                			<entry>partName</entry>
	
	                			<entry>String</entry>
	
	                			<entry align="center">X</entry>
	
	                			<entry>RPC 혹은 Document style의 매개변수 양식이 BARE인 경우, 결과의 part name을 지정함. 기본값은 @WebResult.name.</entry>
	              			</row>
	            		</tbody>
					</tgroup>
        		</informaltable>
        	</para>
    	</section>

    	<section id="cxf_jaxws_annotation_sample">
      		<title>Samples</title>

      		<para>
      			다음은 Movie Service의 인터페이스 클래스에 여러 가지 Annotation을 설정해 본 예제이다.
      		</para>

      		<itemizedlist>
        		<listitem>
          			<para>
          				Interface Class
          			</para>

          			<para>
          				다음은 Movie Service의 인터페이스 클래스를 작성한 MovieService.java의 일부이다. 인터페이스 클래스 상단에
          				@WebService Annotation 작성은 필수 사항이다. 이외에 @WebMethod, @Oneway,
          				@WebParam Annotation을 설정해보고 어떻게 동작하는지 살펴보도록 한다. 
          				<programlisting language="java"><![CDATA[@WebService
public interface MovieService {
    // ================= method for Annotation tests
    ]]><emphasis role="bold">@WebMethod(exclude = true)</emphasis><![CDATA[
    public void testAnnotationMethodExclude();

    ]]><emphasis role="bold">@WebMethod(operationName = "testAnnotationMethodInclude")</emphasis><![CDATA[
    public void testAnnotationMethod();

    ]]><emphasis role="bold">@Oneway</emphasis><![CDATA[
    public String testAnnotationOneWay();

    public String testAnnotationWebParam(
            ]]><emphasis role="bold">@WebParam(name = "movieAnnotationWebParam")</emphasis><![CDATA[ String input);
    중략...]]></programlisting>
    				</para>
				</listitem>
        		<listitem>
          			<para>
          				Implementation Class
          			</para>
          			<para>
          			다음은 Movie Service의 인터페이스 클래스를 작성한 MovieServiceImpl.java 의 일부이다. 
          			<programlisting language="java"><![CDATA[@Service("cxfJaxWsMovieService")
public class MovieServiceImpl implements MovieService {

	@Inject
	@Named("cxfJaxWsMovieDao")
	private MovieDao movieDao;

	// ================= method for Annotation tests
	public void testAnnotationMethodExclude() {
		MovieService.LOGGER.debug("testAnnotationMethodExclude method is called.");
	}

	public void testAnnotationMethod() {
		MovieService.LOGGER.info("testAnnotationMethod method is called.");
	}

	public String testAnnotationOneWay() {
		MovieService.LOGGER.debug("testAnnotationOneWay method is called.");
		return "testAnnotationOneWay";
	}

	public String testAnnotationWebParam(String input) {
		MovieService.LOGGER.debug("testAnnotationWebParam method is called with the input parameter="
						+ input);
		return "testAnnotationWebParam";
	}
    중략...]]></programlisting>
    				</para>
        		</listitem>

				<listitem>
	          		<para>
	          			Test case
	          		</para>
	
	          		<para>
	          			다음은 Apache CXF에서 제공하는 JaxWsProxyFactoryBean 클래스를 사용하여 Web
	          			Services로 노출된 Movie Service에 접근하는 테스트케이스 JaxWsFrontendServerFactoryAnnotationTest.java의 일부이다. 
	          			WebServices Annotation 설정 값에 따라 
	          			어떻게 동작하는지 확인해보도록 한다.
          				<programlisting language="java"><![CDATA[@RunWith(JUnit4.class)
public class JaxWsFrontendServerFactoryAnnotationTest extends ServerRunner {				
    /**
     * [Flow #-1] Positive Case : @WebMethod annotation을 이용하여
     *                            특정 method를 Web Service method로 노출되지 않도록 한다.
     *                            @WebMethod의 속성 값 중 exclude 값을 true로 설정한다.
     *                            (ex. @WebMethod(exclude=true) )
     */      
    @Test
    public void testAnnotationMethodExclude() {
        Client client = new JaxWsClient();
        MovieService movieService =
            (MovieService) client.getClient(new ClientInfo(MovieService.class,
                "http://localhost:9002/Movie", false));

        try {
            movieService.testAnnotationMethodExclude();
            Assert.fail();
        } catch (Exception e) {
            // Exception should be occurred.
            if (!(e instanceof WebServiceException))
            	Assert.fail();
        }
    }

    /**
     * [Flow #-2] Positive Case : @WebMethod annotation을 이용하여
     *                            특정 method name을 다른 name으로 변경하여 호출가능하도록 한다.
     *                            @WebMethod의 속성 값 중 operationName 값을 다른 name으로 설정한다.
     *                            (ex. @WebMethod(operationName="testAnnotationMethodInclude") )
     *                            
     *                            실제 SEI에서 제공하는 method는 testAnnotationMethod 뿐이고, 
     *                            @WebMethod 속성 값 중 operationName값을 testAnnotationMethodInclude로 설정해놓았으므로,
     *                            Client에서 Web Service method를 호출할 때에는 testAnnotationMethodInclude method를 갖는
     *                            Service Interface class를 재정의해서 호출하여 사용하도록 한다.
     */   
    @Test
    public void testAnnotationMethodInclude() {
        Client client = new JaxWsClient();
        org.anyframe.sample.cxf.jaxws.moviefinder.service.MovieServiceWebMethod movieService =
            (org.anyframe.sample.cxf.jaxws.moviefinder.service.MovieServiceWebMethod) client.getClient(
            		new ClientInfo(org.anyframe.sample.cxf.jaxws.moviefinder.service.MovieServiceWebMethod.class,
            		"http://localhost:9002/Movie", false));
        
        try {
            movieService.testAnnotationMethodInclude();
        } catch (Exception e) {
            // It should not be failed.
        	Assert.fail();
        }
    }
중략...]]></programlisting>
          			</para>
        		</listitem>
      		</itemizedlist>
		</section>
	</section>
  
  	<section id="cxf_jaxws_resource">
		<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>
						참고자료
					</para>
					<itemizedlist>
						<listitem>
							<para>
								<ulink url="http://jcp.org/en/jsr/detail?id=224">JAX-WS 2.0 Specification</ulink>
							</para>
						</listitem>
						<listitem>
							<para>
								<ulink url="http://download.oracle.com/javaee/5/tutorial/doc/bnayl.html">Building Web Services with JAX-WS</ulink>
							</para>
						</listitem>
						<listitem>
							<para>
								<ulink url="http://cxf.apache.org/docs/jax-ws-configuration.html">JAX-WS Configuration</ulink>
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</para>
	</section>
</chapter>
