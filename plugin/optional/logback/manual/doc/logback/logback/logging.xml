<chapter id="logback_logback_logging">
	<title>Logging</title>
	
	<para>본 장에서는 Logback을 이용하여 어플리케이션에서 로깅을 수행하는 방법에 대해서 설명하고자 한다. </para>
	
	
	<section id="logback_logback_logging_basic">
		<title>기본적인 사용 방법</title>
		
		<para>Logback은 slf4j를 구현하고 있기 때문에, 기본적으로  어플리케이션에서 로깅을 할때는 Logback에 종속적이지 않은 slf4j api만을 이용하여 로깅을 수행하는 것이 가능하다.</para>
		
		<para>다음은 slf4j api를 이용하여 로그 메시지를 남기는 기본적인 예제이다. </para>
		
		<programlisting language="java"><![CDATA[   import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    
    public class LoggingTest {	
	    
        static Logger logger = LoggerFactory.getLogger(LoggingTest.class);
        
        public static void main(String[] args) {
		
            logger.info("the info message");
            logger.error("the error message");
        }
		]]></programlisting>
	</section>
	
	<section id="logback_logback_logging_param">
		<title>파라미터를 활용한 로깅</title>
		
		<para>로그메시지를 동적으로 생성할 때 가장 간단한 방법은 문자열의 + 으로 문자열을 생성해서 전달하는 방법이다. 
		하지만 이 방법의 경우 해당 로그의 출력 여부와 관계없이 로그 이벤트 호출시 마다 매번 문자열 연산이 발생하므로 성능적인 면에서 비효율적이다. 
		Logback을 포함한 Slf4j를 구현체들은 파라미터를 이용한 로깅 방식을 지원하여 불필요한 문자열 연산이 발생하지 않도록 한다.</para>
		
		<para>다음은 하나의 파라미터를 이용하여 로그를 수행하는 예제이다. {} 문자를 이용하여 파라미터가 치환될 부분임을 명시할 수 있다.</para>
		
		<programlisting language="java"><![CDATA[    logger.error("Movie Information: movieId={}", movie.getMovieId());]]></programlisting>
		
		<para>다음은 두 개의 파라미터를 전달하는 예제이다.</para>
		
		<programlisting language="java"><![CDATA[    logger.debug("Movie Information: movieId={}, title={}" , movie.getMovieId(), movie.getTitle());]]></programlisting>
		
		<para>세 개 이상의 파라미터를 전달하는 경우는 Object 배열을 활용해야 한다. 다음은 Object 배열을 이용하여 파라미터를 전달하는 예제이다.</para>
		<programlisting language="java"><![CDATA[    Object[] params =  new Object[]{movie.getMovieId(), movie.getTitle(), movie.getReleaseDate()};
    logger.info("Movie Information: movieId={}, title={}, releaseDate={}", params);]]></programlisting>
	</section>

	<section id="logback_logback_logging_marker">
		<title>Marker를 활용한 로깅</title>
		
		<para>Marker는 로그를 남길 때 특정 정보를 추가적으로 전달하기 위해서 사용할 수 있는 객체이다. 특히 Logback에서 Marker를 활용한 Filter, EventEvaluator를 제공하는데 이 기능을 활용하기 위해서 Marker 객체가 활용된다.</para>
		
		<para>다음은 어플리케이션에서 로그메시지와 함께 Marker를 전달하는 예제이다.</para>
		
		<programlisting language="java"><![CDATA[    Marker marker = MarkerFactory.getMarker("MY_MARKER");
    logger.info(marker, "marker example");]]></programlisting>
	</section>
	
	<section id="logback_logback_logging_throwable">
		<title>Exception 객체를 활용한 로깅</title>
		<para> Exception이 발생한 경우 로그를 남길때 Exception 객체를 전달함으로써 Exception 정보를 전달하는것이 가능하다.
		특히 Logback의 DBAppender를 활용할때 로그메시지와 Exception의 정보를 같이 전달하면 Exception 정보를 이용하여 LOGGING_EXCEPTION 테이블에 stacktrace 정보를 insert 한다. </para>
		
		<para>다음은 어플리케이션에서 로그메시지와 함께 Exception 객체를 전달하는 예제이다. </para>
		
		<programlisting language="java"><![CDATA[    try{	
        ...	
    }catch(Exception ex){
        logger.error("An Exception Occured", ex);
    }]]></programlisting>
			
	</section>	
</chapter>
