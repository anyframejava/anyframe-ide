<chapter id="routingdatasource_caution">
		<title>주의 사항</title>

		<section id="routingdatasource_caution_native">
        	<title>RoutingDataSource 사용 한계</title>

        	<para>
				RoutingDataSource를 사용하여 동적으로 DB를 변경할 때 아래와 같은 문제점이 존재하므로, 개발자는 한계점을 반드시 인지 하고 있어야 한다.
			</para>
			
			<para>
	        	<itemizedlist>
	          		<listitem>
	            		<para>동일한 DB Schema 사용</para>
						<para>
							routingdatasource plugin은 동일한 DB 스키마, 비즈니스 로직을 가지는 어플리케이션이 여러개의 DB에 접근해서 데이터를 처리하는 어플리케이션이다.
							RoutingDataSource를 사용하여서 Domain 객체 뿐 아니라 DAO, Service 코드까지 공유 해서 사용하도록 설계 되어져 있다. 
							개발자는 이 예제와 같은 방식으로 어플리케이션을 개발 하기 위해서는 우선 DB Schema가 동일 해야 한다는 사실을 명심 해야 한다.
							또한 DAO Framework가 제공하는 Paging 기능을 사용하기 위해서 동일한 종류의 DB들을 대상으로 개발 하도록 해야한다.
						</para>
	            	</listitem>
	            	<listitem>
	            		<para>1 transaction for 1 request</para>
						<para>
							일반적으로 Connection이 맺어지는 시점은 AOP로 Service 단위로 transaction을 설정한다. 따라서 Transaction을 시작하기 위해
							Service 진입점에서 Connection이 맺어지므로, 동적으로 DB를 변경하기 위해서는 그 전에 DB Flag가 설정 되어 있어야 한다. 
							따라서 DB Flag를 ThreadLocal을 사용하여 공유하도록 설계 되어있다. 최초 한번 맺은 Connection이 Thread 내에서 공유 되어 재사용 되므로
							Service 중간에 Flag를 변경하여도 DB가 변경 되지는 않는다.
							routingdatasource plugin의 코드를 살펴보면 Service 레벨에서 DB Flag를 변경하지 않는 것도 그 이유이다. 
						</para>
	            	</listitem>
	            	<listitem>	
	            		<para>ThreadLocal Cleanup</para>
						<para>
							routingdatasource plugin은 DB Flag를 Thread 단위로 설정하여 사용하도록 설계 되어있다. ThreadLocal을 사용할 때 가정 유의해야 할 점은 
							ThreadLocal에서 원하는 정보를 사용한 이후, clear 작업을 수행해야 한다는 점이다. 일반적으로 WAS는 Thread Pooling을 하며 
							다음 request가 할당받은 Thread에 이전 데이터 찌꺼기가 남게되어 의도하지 않게 이전 값을 참조하는 문제가 발생할 가능성이 있다.
							따라서 request 종료 시점에는 ThreadLocal에 설정한 값을 null로 강제 설정하고, cleanup 작업을 수행 해야한다.
							routingdatasource plugin에서는 이런 작업을 Interceptor의 afterCompletion 메소드에 ThreadLocal clear 작업을 명시하는 방법으로
							이 문제를 처리하였다.
						</para>
	          		</listitem>
	        	</itemizedlist>
			</para>
      	</section>
      	<section id="Samples">
      		<title>예제 테스트를 위한 설정</title>
      		<para>플러그인 설치 후 예제 코드를 실행하기 위해서는 다음 설정이 추가로 필요하다(context-routingdatasource.xml).
      			<programlisting language="xml"><![CDATA[<bean id="parentDataSource" class="org.apache.commons.dbcp.BasicDataSource" abstract="true">
  		<property name="driverClassName" value="#{contextProperties.driver}" />
  		<property name="username" value="#{contextProperties.username}" />
  		<property name="password" value="#{contextProperties.password}"/>
  	</bean>
  	
  	<bean id="ABCCinema" parent="parentDataSource">
  		<property name="url" value="#{contextProperties.url}" />
  	</bean>
  	
  	<bean id="GoodMovieCinema" parent="parentDataSource">
  		<property name="url" value="]]><emphasis role="bold">jdbc:hsqldb:hsql://localhost:9002/sampledb2nd</emphasis><![CDATA[" />
  	</bean>
  	
  	<bean id="MovieHouseCinema" parent="parentDataSource">
  		<property name="url" value="]]><emphasis role="bold">jdbc:hsqldb:hsql://localhost:9003/sampledb3rd</emphasis><![CDATA[" />
  	</bean>]]></programlisting>
      		</para>
      		<para>위의 설정에서 보듯이 GoodMovieCinema와 MovieHouseCinema를 위한 ABCCinema와 동일한 DB Schema를 가지고 있는 DB를 설정해주어야 한다.</para>
      		<para>그렇지 않으면 DB연결이 되지 않아 "영화 목록을 조회 할 수 없습니다."라는 메시지를 보게 될 것이다.</para>
      	</section>
</chapter>
