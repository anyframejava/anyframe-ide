<chapter id="remoting_rmi">
	<title>RMI(Remote Method Invocation)</title>
    <para>
    	RMI는 JDK 1.1에서 처음으로 자바에 도입되어 자바 프로그램 사이에 통신할 수 있는 방법을 제공하였다.
    	<ulink url="http://java.sun.com/j2se/1.5.0/docs/guide/rmi/index.html">RMI</ulink>
    	이전에는 CORBA를 사용하거나 소켓 프로그래밍을 해야만 했었다. 그러나 RMI 서비스를 개발하거나 접근하는 일은 복잡하여 개발하기가
    	불편하며 다음과 같은 일을 수행해야한다.
    </para>

    <itemizedlist>
    	<listitem>
        	<para>
        		java.rmi.Remote를 상속받은 인터페이스 클래스를 작성한다.
        	</para>
      	</listitem>

      	<listitem>
        	<para>
        		UnicastRemoteObject를 상속받으며 위의 인터페이스 클래스를 구현하는 구현클래스를
        		작성한다.
        	</para>
      	</listitem>

      	<listitem>
        	<para>
        		RMI 컴파일러를 사용하여 클라이언트 Stub 클래스와 서버 Skeleton 클래스를 생성시킨다. (rmic –d
        		classname)
        	</para>
      	</listitem>

      	<listitem>
        	<para>
        		RMI 레지스트리를 구동시키고 서비스를 레지스트리에 바인딩시킨다.
        	</para>
      	</listitem>

      	<listitem>
        	<para>
        		클라이언트 코드를 이용하여 RMI 서비스를 호출하여 사용한다.
        	</para>
      	</listitem>
    </itemizedlist>

    <para>
    	Spring의 빈 형태로 서비스를 개발한 후 Spring에서 제공하는 RmiServiceExporter를 사용하면 RMI
    	객체처럼 서비스 객체의 인터페이스를 쉽게 원격 서비스로 노출할 수 있는 기능을 제공한다. 즉, 위에서 언급한 RMI 서비스 개발
    	단계에서 수행했던 일들을 RmiServiceExporter에서 수행한다. 개발자는 RMI 서비스와 관련된 개발 작업을 비즈니스
    	서비스에 반영할 필요가 없으므로 비즈니스 로직에 집중하여 개발할 수 있다. 단, <emphasis role="bold">RMI는
    	통신을 위해 특정 Port를 사용하므로 방화벽을 통과하기 어렵고, 클라이언트와 서버에서 제공되는 서비스 모두 자바로 작성되어야 한다는
    	제약사항이 존재한다.</emphasis> 다음은 RMI 기능을 Server와 Client 단에서 어떻게 사용해야 하는지에 대한
    	사용법이다.
    </para>

    <section id="remoting_rmi_serverconfiguration">
		<title>Server Configuration</title>

      	<para>
      		서버 구현 방식은 Spring에서 제공하는
      		org.springframework.remoting.rmi.RmiServiceExporter 클래스를 이용하여 손쉽게 일반
      		Spring Bean으로 작성된 서비스를 RMI Service로 노출시킬 수 있다.
      	</para>

      	<informaltable>
      		<caption>RMI Service 노출을 위한 설정</caption>
        	<tgroup cols="4">
		        <colspec colnum="1" colname="col1" colwidth="2*"/>
		        <colspec colnum="2" colname="col2" colwidth="5*"/>
		        <colspec colnum="3" colname="col3" colwidth="1*"/>
		        <colspec colnum="4" colname="col4" colwidth="2*"/>
	          	<thead>
	            	<row>
	              		<entry align="center">Property Name</entry>
	
		              	<entry align="center">Description</entry>
		
		              	<entry align="center">Required</entry>
		
		              	<entry align="center">Default Value</entry>
	            	</row>
	          	</thead>
	
	          	<tbody>
	            	<row>
	              		<entry>serviceName</entry>
	
	              		<entry>서비스 이름은 서비스를 RMI Registry에 바인딩 하기 위해 사용된다.</entry>
	
	              		<entry align="center">Y</entry>
	
	              		<entry align="center">N/A</entry>
	            	</row>
	
	            	<row>
	              		<entry>service</entry>
	
	              		<entry>RMI 서비스로 노출시키고 싶은 Spring Bean의 id를 설정한다.</entry>
	
	              		<entry align="center">Y</entry>
	
	              		<entry align="center">N/A</entry>
	            	</row>
	
	            	<row>
	              		<entry>serviceInterface</entry>
	
	              		<entry>RMI 서비스로 노출되는 서비스의 인터페이스 클래스를 패키지정보와 함께 작성한다.</entry>
	
	              		<entry align="center">Y</entry>
	
	              		<entry align="center">N/A</entry>
	           		</row>
	
	            	<row>
	              		<entry>registryPort</entry>
	
	              		<entry>
	              			RMI 등록(registry)을 위한 port를 오버라이딩하기 위해 사용된다. 작성하지 않은 경우
	              			디폴트로 1099 port가 사용된다.
	              		</entry>
	
	              		<entry align="center">N</entry>
	
	              		<entry align="center">1099</entry>
            		</row>
				</tbody>
			</tgroup>
		</informaltable>

		<section id="remoting_rmi_serverconfiguration_sample">
        	<title>Samples</title>

        	<para>
        		다음은 RMI 서버 구현 속성 설정에 대한 예제이다. 서비스는 일반 Spring Bean 개발과 동일하며
        		RmiServiceExporter Bean에서 property 설정 정보를 참조하여 RMI 서비스로 노출시키고
        		있다.
        	</para>

        	<itemizedlist>
          		<listitem>
            		<para>
            			<emphasis role="bold">Configuration</emphasis>
            		</para>

            		<para>
            			다음은 RMI 서비스를 지원하는 RmiServiceExporter의 속성을 정의한
            			context-remoting-rmi.xml 의 일부이다. 
            			<programlisting language="xml"><![CDATA[<bean]]> <emphasis role="bold">id="org.anyframe.sample.remoting.moviefinder.service.MovieService"</emphasis>
        <![CDATA[class="org.anyframe.sample.remoting.moviefinder.service.impl.MovieServiceImpl">
    <property name="movieDao" ref="movieDao"/>
</bean>

<bean id="movieDao" class="org.anyframe.sample.remoting.moviefinder.service.impl.MovieDao" />
    
<!-- Add RMI ServiceExporter -->
<bean]]> <emphasis role="bold">class="org.springframework.remoting.rmi.RmiServiceExporter"</emphasis><![CDATA[>

    <property name="serviceName" value="MovieService" />
    <property name="service" ref="org.anyframe.sample.remoting.moviefinder.service.MovieService" />
    <property name="serviceInterface"
            value="org.anyframe.sample.remoting.moviefinder.service.MovieService" />
    <!-- defaults to 1099 -->
    <property name="registryPort" value="1199" />
</bean>]]></programlisting>
					</para>
				</listitem>
			</itemizedlist>
		</section>
    </section>

    <section id="emoting_remoting_rmi_clientconfiguration">
		<title>Client Configuration</title>

		<para>
			클라이언트는 Spring에서 제공하는
      		org.springframework.remoting.rmi.RmiProxyFactoryBean 클래스를 사용하여 RMI
      		Service에 접근할 수 있다.
      	</para>

      	<informaltable>
      		<caption>RMI Service 접근을 위한 설정</caption>
        	<tgroup cols="4">
         		<colspec colnum="1" colname="col1" colwidth="2*"/>
        		<colspec colnum="2" colname="col2" colwidth="5*"/>
        		<colspec colnum="3" colname="col3" colwidth="1*"/>
        		<colspec colnum="4" colname="col4" colwidth="2*"/>
          		<thead>
            		<row>
              			<entry align="center">Property Name</entry>

              			<entry align="center">Description</entry>

              			<entry align="center">Required</entry>

              			<entry align="center">Default Value</entry>
            		</row>
          		</thead>

          		<tbody>
            		<row>
              			<entry>serviceUrl</entry>

              			<entry>
              				RMI 서비스 접근 URL 정보이다. "rmi://" + 서버ip + ":" + port 번호 +
              				"/" + 서비스 명 (ex.rmi://localhost:1199/MovieService)
              			</entry>

              			<entry align="center">Y</entry>

              			<entry align="center">N/A</entry>
            		</row>

            		<row>
              			<entry>serviceInterface</entry>

              			<entry>RMI 서비스로 노출되는 서비스의 인터페이스 클래스를 패키지정보와 함께 작성한다.</entry>

              			<entry align="center">Y</entry>

              			<entry align="center">N/A</entry>
            		</row>
          		</tbody>
			</tgroup>
		</informaltable>

		<section id="emoting_remoting_rmi_clientconfiguration_sample">
			<title>Samples</title>

        	<para>
        		다음은 RMI 클라이언트 속성 설정에 대한 예제이다. 클라이언트는 RmiProxyFactoryBean에서
        		property 설정 정보를 참조하여 RMI 서비스에 접근하고 있다.
        	</para>

        	<itemizedlist>
          		<listitem>
	            	<para>
	            		<emphasis role="bold">Configuration</emphasis>
	            	</para>
	
	            	<para>
	            		다음은 RMI 서비스에 접근하는 RmiProxyFactoryBean의 속성을 정의한
	            		context-remoting-rmi-client.xml 의 일부이다. 
	            		<programlisting language="xml"><![CDATA[<!-- Add RMI Client -->
<bean id="movieServiceClient"]]> <emphasis role="bold">class="org.springframework.remoting.rmi.RmiProxyFactoryBean"</emphasis><![CDATA[>
  
    <property name="serviceUrl" value="rmi://localhost:1099/MovieService" />
    <property name="serviceInterface" value="org.anyframe.sample.remoting.moviefinder.service.MovieService"/>
</bean>]]></programlisting>
					</para>
				</listitem>
          
			</itemizedlist>
		</section>
    </section>
</chapter>

