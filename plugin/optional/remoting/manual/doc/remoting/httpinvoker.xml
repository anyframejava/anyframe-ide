<chapter id="remoting_httpinvoker">
	<title>HTTP Invoker</title>
	
    <para>
    	HTTP Invoker는 HTTP를 통해 경량의 원격 서비스를 가능하게 하는 Spring에서 제공하는 Remoting
    	기능이다. 앞서 소개한 RMI와 Hessian/Burlap의 경우 아래와 같은 단점이 있는데 이러한 단점을 보완해주는 기능을 HTTP
    	Invoker가 가지고 있다.
    </para>

    <itemizedlist>
      	<listitem>
        	<para>
        		RMI 단점: RMI의 경우 자바의 표준 객체 직렬화를 사용하지만 방화벽을 통과하기가 어렵다.
        	</para>
      	</listitem>

      	<listitem>
        	<para>
        		Hessian/Burlap의 단점: 방화벽을 쉽게 통과하지만, 자체적인 객체 직렬화 매커니즘을 사용하여 복잡한
        		형태의 객체 직렬화 시 문제가 발생할 수 있다.
        	</para>
      	</listitem>
    </itemizedlist>

    <para>
    	HTTP Invoker는 RMI와 Hessian/Burlap의 단점을 보완해준다. Spring에서 제공하는 Remoting
    	기능으로 HTTP를 통해 Remoting 기능을 수행하며 자바의 표준 직렬화 매커니즘을 사용한다. 단, <emphasis
    	role="bold">Spring에서만 제공하는 Remoting 기술로 클라이언트와 원격 서비스 모두 Spring
    	어플리케이션</emphasis> 이어야 한다.
    </para>

    <para>
    	다음은 HTTP Invoker 기능을 Server와 Client 단에서 어떻게 사용해야 하는지에 대한
    	사용법이다.
    </para>

    <section id="emoting_remoting_httpinvoker_serverconfiguration">
		<title>Server Configuration</title>

      	<para>
      		서버 구현 방식은 일반 서비스 빈 개발 방식과 같으며 HttpInvokerServiceExporter 클래스를 이용하여
      		손쉽게 일반 Spring Bean으로 작성된 서비스를 HTTP Invoker Service로 노출시킬 수 있다. 이때 모든
      		public 메소드는 서비스 메소드로 노출된다.
      	</para>

      	<informaltable>
      		<caption>HTTP Invoker Service 노출을 위한 설정</caption>
        	<tgroup cols="4">
         		<colspec colnum="1" colname="col1" colwidth="2*"/>
        		<colspec colnum="2" colname="col2" colwidth="5*"/>
        		<colspec colnum="3" colname="col3" colwidth="1*"/>
        		<colspec colnum="4" colname="col4" colwidth="2*"/>
          		<thead>
            		<row>
              			<entry align="center">Property Name</entry>

              			<entry align="center">Description</entry>

              			<entry align="center">Required</entry>

              			<entry align="center">Default Value</entry>
            		</row>
          		</thead>

          		<tbody>
            		<row>
              			<entry>service</entry>

              			<entry>HTTP Invoker 서비스로 노출시키고 싶은 Spring Bean의 id를 설정한다.</entry>

              			<entry align="center">Y</entry>

              			<entry align="center">N/A</entry>
            		</row>

            		<row>
              			<entry>serviceInterface</entry>

	              		<entry>
	              			HTTP Invoker 서비스로 노출되는 서비스의 인터페이스 클래스를 패키지정보와 함께
	              			작성한다.
	              		</entry>
	
	              		<entry align="center">Y</entry>
	
	              		<entry align="center">N/A</entry>
            		</row>
          		</tbody>
        	</tgroup>
		</informaltable>

		<section id="emoting_remoting_httpinvoker_serverconfiguration_sample">
        	<title>Samples</title>

        	<para>
        		다음은 HTTP Invoker 서버 구현 속성 설정에 대한 예제이다. 서비스는 일반 Spring Bean 개발과
        		동일하며 HttpInvokerServiceExporter Bean에서 property 설정 정보를 참조하여 HTTP
        		Invoker 서비스로 노출시키고 있다.
        	</para>

        	<itemizedlist>
          		<listitem>
            		<para>
            			<emphasis role="bold">Configuration</emphasis>
            		</para>

            		<para>
            			다음은 HTTP Invoker 서비스를 지원하는 HttpInvokerServiceExporter의 속성을
            			정의한 context-remoting-httpinvoker.xml 의 일부이다.
            			<programlisting language="xml"><![CDATA[<bean id="httpinvokerMovieService"]]> 
        <emphasis role="bold">class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter"</emphasis><![CDATA[>
    <property name="service" ref=]]><emphasis role="bold">"org.anyframe.sample.remoting.moviefinder.service.MovieService"</emphasis><![CDATA[/>
    <property name="serviceInterface" 
            value="org.anyframe.sample.remoting.moviefinder.service.MovieService" />
</bean>]]></programlisting>
    				</para>

           			<para>
           				여기서 HttpInvokerServiceExporter 빈은 Spring MVC의 컨트롤러로 작성되어
            			있으므로 Spring MVC의 DispatcherServlet을 web.xml 파일에 설정해야 한다. HTTP로
            			서비스를 제공하기 위해서 웹 어플리케이션으로 서비스를 배포하여 제공하고 있다. 다음은 서버 사이드 웹 어플리케이션의
            			web.xml 의 일부이다.
            			<programlisting language="xml"><![CDATA[<web-app id="WebApp_ID" version="2.4"
    xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
            http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
    <display-name>sample-web</display-name>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>WEB-INF/context-remoting-httpinvoker.xml</param-value>
    </context-param>
    
    ...중략...

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>
    
    <servlet>
        <servlet-name>action</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/remoting-httpinvoker-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>action</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    
    <!-- remoting-configuration-START -->  
    <servlet>
        <servlet-name>remoting</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:/springmvc/remoting-servlet.xml</param-value>
        </init-param>
    </servlet>    
    
    <servlet-mapping>
        <servlet-name>remoting</servlet-name>
        <url-pattern>/remoting/*</url-pattern>
    </servlet-mapping>    
    <!-- remoting-configuration-END -->
    ...중략...
</web-app>]]></programlisting>
           			</para>

            		<para>
            			여기서 Spring MVC의 URL Mapping 기능을 사용하여 HTTP 기반의 HTTP Invoker
            			컨트롤러를 호출할 수 있도록 한다. 다음은 서버 사이드 웹 어플리케이션의 remoting-httpinvoker-servlet.xml 의
            			일부이다. <![CDATA[*]]> 패턴의 모든 URL에 대한 요청이 DispatcherServlet으로 전달된 후 urlMapping
            			정보에 의해 remotingMovieService가 호출되어 HTTP Invoker 서비스가 제공된다.
            			<programlisting language="xml"><![CDATA[<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
        <props>
            <prop key="/MovieService">httpinvokerMovieService</prop>
        </props>
    </property>
</bean>]]></programlisting>
					</para>
          		</listitem>
          
        	</itemizedlist>
        </section>
	</section>

    <section id="remoting_httpinvoker_clientconfiguration">
		<title>Client Configuration</title>

      	<para>
      		클라이언트는 Spring에서 제공하는
      		org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean
      		클래스를 사용하여 HTTP Invoker Service에 접근할 수 있다.
      	</para>

		<informaltable>
			<caption>HTTP Invoker Service 접근을 위한 설정</caption>
        	<tgroup cols="4">
				<colspec colnum="1" colname="col1" colwidth="2*"/>
        		<colspec colnum="2" colname="col2" colwidth="5*"/>
        		<colspec colnum="3" colname="col3" colwidth="1*"/>
        		<colspec colnum="4" colname="col4" colwidth="2*"/>
          		<thead>
	            	<row>
	              		<entry align="center">Property Name</entry>
	
	              		<entry align="center">Description</entry>
	
	              		<entry align="center">Required</entry>
	
	              		<entry align="center">Default Value</entry>
	            	</row>
          		</thead>

          		<tbody>
            		<row>
              			<entry>serviceUrl</entry>

              			<entry>
              				HTTP Invoker 서비스 접근 URL 정보이다. "http://" + 서버ip + ":" +
              				port 번호 + "/" + 서비스 명
              				(ex.http://localhost:9002/MovieService)
              			</entry>

              			<entry align="center">Y</entry>

              			<entry align="center">N/A</entry>
            		</row>

            		<row>
              			<entry>serviceInterface</entry>

              			<entry>
              				HTTP Invoker 서비스로 노출되는 서비스의 인터페이스 클래스를 패키지정보와 함께
              				작성한다.
              			</entry>

              			<entry align="center">Y</entry>

              			<entry align="center">N/A</entry>
            		</row>
          		</tbody>
        	</tgroup>
		</informaltable>

		<section id="remoting_httpinvoker_clientconfiguration_sample">
        	<title>Samples</title>

        	<para>
        		다음은 HTTP Invoker 클라이언트 속성 설정에 대한 예제이다. 클라이언트는
        		HttpInvokerProxyFactoryBean에서 property 설정 정보를 참조하여 HTTP Invoker 서비스에
        		접근하고 있다.
        	</para>

        	<itemizedlist>
          		<listitem>
            		<para>
            			<emphasis role="bold">Configuration</emphasis>
            		</para>

            		<para>
            			다음은 HTTP Invoker 서비스에 접근하는 HttpInvokerProxyFactoryBean의 속성을
            			정의한 context-remoting-httpinvoker-client.xml 의 일부이다.
            			<programlisting language="xml"><![CDATA[<bean id="movieServiceClient"]]>
    <emphasis role="bold">class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean"</emphasis><![CDATA[>
    <property name="serviceUrl"
        value="http://localhost:9002/MovieService" />
    <property name="serviceInterface"
        value="org.anyframe.sample.remoting.moviefinder.service.MovieService" />
</bean>]]></programlisting>
					</para>

            		<para>
            			Hessian/Burlap 서비스에 접근하는 클라이언트와 마찬가지로 serviceInterface
            			Property에는 서비스가 구현하는 인터페이스 클래스를 설정하고. serviceUrl Property에는 서비스
            			URL을 작성하는데 HTTP Invoker라는 이름에서도 알 수 있듯이 HTTP 기반으로 제공되므로 HTTP URL을
            			작성하도록 한다. HTTP 방식으로 원격 서비스를 호출할 때 HTTP 클라이언트를 선택할 수 있다. 기본적으로
            			HttpInvokerProxyFactoryBean은 J2SE HTTP 클라이언트를 사용하지만, httpInvokerRequestExecutor
            			프라퍼티를 셋팅하여 Apache Commons HttpClient를 사용할 수도 있다.
            			<programlisting language="xml"><![CDATA[<!-- Add HTTP Invoker Client -->
<bean id="movieServiceClient" 
        class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
    <property name="serviceUrl" value="http://localhost:9002/MovieService" />
    <property name="serviceInterface" 
            value="org.anyframe.sample.remoting.moviefinder.service.MovieService"/>
    <property name="httpInvokerRequestExecutor" ref="httpClient"/>    
</bean>

<bean id="httpClient" 
      class="org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor"> 
    <property name="httpClient"> 
        <bean class="org.apache.commons.httpclient.HttpClient"> 
            <property name="connectionTimeout" value="2000"/> 
        </bean> 
    </property> 
</bean>]]></programlisting>
					</para>
          		</listitem>

          		<listitem>
            		<para>
            			<emphasis role="bold">Test Case</emphasis>
            		</para>

            		<para>
            			다음은 앞서 정의한 속성 설정 파일들을 기반으로 하여 HTTP Invoker 서비스에 접근하는
            			예제인 MovieController.java 코드의 일부이다.
            			<programlisting language="java">@Controller
@RequestMapping("/remotingMovieExporter.do")
public class MovieController {
    <emphasis role="bold">@Inject
    @Named("remotingMovieClient")
    private MovieService movieService;</emphasis>

    @RequestMapping(params = "method=get")
    public String get(@RequestParam("movieId") String movieId, Model model)
        throws Exception {
        <emphasis role="bold">Movie movie = this.movieService.get(movieId);</emphasis>
        if (movie == null) {
            throw new Exception("Resource not found " + movieId);
        }
        model.addAttribute(movie);

        return "remoting/moviefinder/movie/form";
    }	
    
    // ...    
}</programlisting>
            		</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
</chapter>
