<chapter id="springrest_restsupport_views">
	<title>Views</title>
	
	<para>
		Spring 3부터 Spring MVC에는 웹 어플리케이션에서 하나의 리소스, 즉 하나의 서비스에 대한 여러 형태의 응답을 지원하기 위해 다음과 같은 새로운 View들이 추가되었다..
		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">AbstractAtomFeedView / AbstractRssFeedView : Atom이나 RSS 피드를 보여줄 수 있는 View</emphasis></para>
				<para>
					AbstractAtomFeedView와 AbstractRssFeedView는 AbstractFeedView의 하위클래스로 java.net의 <ulink url="https://rome.dev.java.net">ROME</ulink> 프로젝트를 기반으로 만들어져있다. 
					Feed View를 구성하려면 AbstractAtomFeedView나 AbstractRssFeedView를 상속받은 클래스에서 각각에서 오버라이드 요구하는 메소드를 구현하여 사용한다.
					<programlisting language="java"><![CDATA[public class SampleContentAtomView extends AbstractAtomFeedView {
    @Override
    protected List<Entry> buildFeedEntries(Map<String, Object> model, 
                                               HttpServletRequest request, HttpServletResponse response) throws Exception {
        // 중략
    }
}]]></programlisting>
						<programlisting language="java"><![CDATA[public class SampleContentRssView extends AbstractRssFeedView {
    @Override
    protected List<Item> buildFeedItems(Map<String, Object> model, 
                                            HttpServletRequest request, HttpServletResponse response) throws Exception {
        // 중략
    }
}]]></programlisting>
				</para>
				<para>
					구현한 Feed View를 사용하기 위해서 Bean 정의 파일을 작성해야한다.
					<programlisting language="xml"><![CDATA[<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    <property name="mediaTypes">
        <map>
            ]]><emphasis role="bold"><![CDATA[<entry key="atom" value="application/atom+xml"/>]]></emphasis><![CDATA[
            <entry key="html" value="text/html"/>
        </map>
    </property>
    <property name="viewResolvers">
        <list>
            <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="prefix" value="/WEB-INF/jsp/"/>
                <property name="suffix" value=".jsp"/>
            </bean>
        </list>
    </property>
</bean>

]]><emphasis role="bold"><![CDATA[<bean id="movies" class="anyframe.sample.moviefinder.feed.MoviesAtomView"/>]]></emphasis></programlisting>
				</para>
			</listitem>
			
			<listitem>
				<para><emphasis role="bold">MarshallingView : XML로 응답을 전달할 수 있는 View</emphasis></para>
				<para>
					MarshallingView는 클라이언트에게 XML 응답을 돌려주기 위해서 <link linkend="springrest_restsupport_oxm">Spring OXM</link>의 Marshaller를 사용한다. 
					기본적으로 컨트롤러가 리턴한 모든 Model을 XML로 변환하지만, <emphasis role="bold">modelKey</emphasis>라는 속성에 Model의 이름을 지정함으로써 Marshalling되어 클라이언트로 전달될 Model을 필터링 할 수 있다.
				</para>
				<para>
					다음은 springrest plugin 설치로 추가된 springrest-servlet.xml의 일부이다. 먼저 설치된 core plugin에서 정의한 View Resolver들이 있으므로
					MarshallingView를 위해서 BeanNameViewResolver만 추가하였다.
					<programlisting language="xml"><![CDATA[<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    <property name="mediaTypes">
        <map>
            <entry key="html" value="text/html" />
            ]]><emphasis role="bold"><![CDATA[<entry key="xml" value="application/xml" />]]></emphasis><![CDATA[
        </map>
    </property>
    <property name="order" value="0" />
</bean>

]]><emphasis role="bold"><![CDATA[<bean id="springrestViewMovie" class="org.springframework.web.servlet.view.xml.MarshallingView">
    <property name="marshaller" ref="marshaller" />
</bean>
  
<bean id="springrestListMovie" class="org.springframework.web.servlet.view.xml.MarshallingView">
    <property name="marshaller" ref="marshaller" />
</bean>
  
<bean id="error" class="test003.springrest.moviefinder.web.view.MarshallingViewForError">
    <property name="marshaller" ref="marshaller" />
</bean>

<oxm:jaxb2-marshaller id="marshaller">
    <oxm:class-to-be-bound name="test003.springrest.domain.Movie" />
    <oxm:class-to-be-bound name="test003.springrest.domain.ResultPage" />
    <oxm:class-to-be-bound name="org.anyframe.pagination.Page" />
</oxm:jaxb2-marshaller>]]></emphasis></programlisting>
				</para>
			</listitem>
			
			<listitem>
				<para><emphasis role="bold">MappingJacksonJsonView : JSON으로 응답을 전달할 수 있는 View</emphasis></para>
				<para>
					MappingJacksonJsonView는 클라이언트에게 JSON 응답을 돌려주기 위해서 Jackson 라이브러리의 ObjectMapper를 사용한다.
					디폴트로 Model 객체 모두의 내용을 JSON으로 보내도록 되어있지만, <emphasis role="bold">renderedAttributes</emphasis> 속성을 이용해서 JSON으로 변환할 Model을 필터링 할 수 있다.
					ObjectMapper 확장이 필요한 경우 <emphasis role="bold">objectMapper</emphasis> 속성을 이용해서 확장한 ObjectMapper를 정의해 준다.
				</para>
				<para>
					MappingJacksonJsonView는 Anyframe의 Simpleweb Plugin에 적용되어 있으므로, 
					사용 예는 매뉴얼 Simpleweb Plugin의 <ulink url="http://dev.anyframejava.org/docs/anyframe/plugin/optional/simpleweb/1.1.1-SNAPSHOT/reference/htmlsingle/simpleweb.html#simpleweb_configuration_json">JSON View 설정</ulink>을 참조하기 바란다.
				</para>
			</listitem>
		</itemizedlist>
	</para>
</chapter>