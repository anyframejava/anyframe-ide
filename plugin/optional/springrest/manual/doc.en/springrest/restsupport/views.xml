<chapter id="springrest_restsupport_views">
	<title>Views</title>
	
	<para>
		From Spring 3 onwards, the following Views are added in Spring MVC to support various forms of responses for 
		one resource in web application.
		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">AbstractAtomFeedView / AbstractRssFeedView : View that can show Atom or RSS feed</emphasis></para>
				<para>
					AbstractAtomFeedView and AbstractRssFeedView are child classes of AbstractFeedView 
					and are made based on <ulink url="https://rome.dev.java.net">ROME</ulink> project of java.net. 
					To compose Feed View, implement the method that requires override in each class that inherits AbstractAtomFeedView or AbstractRssFeedView.
					<programlisting language="java"><![CDATA[public class SampleContentAtomView extends AbstractAtomFeedView {
    @Override
    protected List<Entry> buildFeedEntries(Map<String, Object> model, 
                                               HttpServletRequest request, HttpServletResponse response) throws Exception {
        // ...
    }
}]]></programlisting>
						<programlisting language="java"><![CDATA[public class SampleContentRssView extends AbstractRssFeedView {
    @Override
    protected List<Item> buildFeedItems(Map<String, Object> model, 
                                            HttpServletRequest request, HttpServletResponse response) throws Exception {
        // ...
    }
}]]></programlisting>
				</para>
				<para>
					To use the implemented Feed View, add the bean definition as follows.
					<programlisting language="xml"><![CDATA[<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    <property name="mediaTypes">
        <map>
            ]]><emphasis role="bold"><![CDATA[<entry key="atom" value="application/atom+xml"/>]]></emphasis><![CDATA[
            <entry key="html" value="text/html"/>
        </map>
    </property>
    <property name="viewResolvers">
        <list>
            <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="prefix" value="/WEB-INF/jsp/"/>
                <property name="suffix" value=".jsp"/>
            </bean>
        </list>
    </property>
</bean>

]]><emphasis role="bold"><![CDATA[<bean id="movies" class="anyframe.sample.moviefinder.feed.MoviesAtomView"/>]]></emphasis></programlisting>
				</para>
			</listitem>
			
			<listitem>
				<para><emphasis role="bold">MarshallingView : View that can send response as XML</emphasis></para>
				<para>
					MarshallingView uses Marshaller of <link linkend="springrest_restsupport_oxm">Spring OXM</link> 
					to return XML response to client. 
					Basically, all Models returned by controller are converted as XML, 
					but Model to be marshalled and sent to client can be filtered  by setting Model name in <emphasis role="bold">modelKey</emphasis> property of MarshallingView.
				</para>
				<para>
					The following is a part of springrest-servlet.xml which was added due to springrest plugin installation. 
					There are View Resolvers defined in the previously installed foundation plugin, 
					so only BeanNameViewResolver is added for MarshallingView.
					<programlisting language="xml"><![CDATA[<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    <property name="mediaTypes">
        <map>
            <entry key="html" value="text/html" />
            ]]><emphasis role="bold"><![CDATA[<entry key="xml" value="application/xml" />]]></emphasis><![CDATA[
        </map>
    </property>
    <property name="order" value="0" />
</bean>

]]><emphasis role="bold"><![CDATA[<bean id="springrestViewMovie" class="org.springframework.web.servlet.view.xml.MarshallingView">
    <property name="marshaller" ref="marshaller" />
</bean>
  
<bean id="springrestListMovie" class="org.springframework.web.servlet.view.xml.MarshallingView">
    <property name="marshaller" ref="marshaller" />
</bean>
  
<bean id="error" class="test003.springrest.moviefinder.web.view.MarshallingViewForError">
    <property name="marshaller" ref="marshaller" />
</bean>

<oxm:jaxb2-marshaller id="marshaller">
    <oxm:class-to-be-bound name="test003.springrest.domain.Movie" />
    <oxm:class-to-be-bound name="test003.springrest.domain.ResultPage" />
    <oxm:class-to-be-bound name="org.anyframe.pagination.Page" />
</oxm:jaxb2-marshaller>]]></emphasis></programlisting>
				</para>
			</listitem>
			
			<listitem>
				<para><emphasis role="bold">MappingJacksonJsonView : View for JSON representations of objects in your model</emphasis></para>
				<para>
					MappingJacksonJsonView uses ObjectMapper of Jackson library to return JSON response to client. 
					By default, the entire contents of the model map will be encoded as JSON. 
					For cases where the contents of the map need to be filtered, users may specify a specific set of model attributes 
					to encode via the <emphasis role="bold">renderedAttributes</emphasis> property. 
					When ObjectMapper extension is needed, use <emphasis role="bold">objectMapper</emphasis> property to define extended ObjectMapper.
				</para>
				<para>
					MappingJacksonJsonView is applied in simpleweb-json Plugin of Anyframe. 
				    For an example on how to use it, refer to 
				    <ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/optional/simpleweb/1.1.1-SNAPSHOT/reference/htmlsingle/simpleweb.html#simpleweb_configuration_json">JSON View Setting</ulink>.
				</para>
			</listitem>
		</itemizedlist>
	</para>
</chapter>