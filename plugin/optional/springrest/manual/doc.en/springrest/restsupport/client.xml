<chapter id="springrest_restsupport_resttemplate">
	<title>Implementing REST Client</title>
	<para>
		All the contents above are related to server-side implementation. 
		RestTemplate is about client implementation in REST architecture.
	</para>
	<para>
		RestTemplate is a template like JdbcTemplate or JmsTemplate provided by Spring, 
		and helps the development of REST client by providing several methods related with calling RESTful Service. 
		<emphasis role="bold">When RestTemplate converts Java object into HTTP Request to send 
		or converts HTTP Response transferred from server into Java object, 
		HttpMessageConverter is used. </emphasis>
		Concrete implementations for the main media (mime) types are provided in the framework and are registered by default with the RestTemplate. 
		When other additions are needed, use <emphasis role="bold">messageConverters</emphasis> property when defining ResetTemplate.
	</para>
	<section id="springrest_restsupport_resttemplate_configuration">
		<title>Configuration</title>
		<para>
			RestTemplate is also defined as Bean in Spring container, and is injected from the container of used class. 
			The following is a part of src/test/resources/context-restclient.xml of springrest plugin.
			
			<programlisting language="xml"><emphasis role="bold"><![CDATA[<bean id="restTemplate" class="org.springframework.web.client.RestTemplate" />]]></emphasis></programlisting>
		</para>
		<para>
			RestTemplate composes HTTP Request message or uses HttpMessageConverter when parsing Response message. 
			To change HttpMessageConverter registered as default or add new HttpMessageConverter, use <emphasis role="bold">messageConverters</emphasis> property. 
			
			<programlisting language="xml"><emphasis role="bold"><![CDATA[<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="messageConverters">
        <list>
            <bean class="my.custom.MarshallingHttpMessageConverter">
                <property name="unmarshaller" ref="marshaller" />
                <property name="marshaller" ref="marshaller"/>
            </bean>
        </list>
    </property>
</bean>]]></emphasis></programlisting>
		</para>
	</section>
	
	<section id="springrest_restsupport_resttemplate_resttemplate">
		<title>RestTemplate</title>
		<para>
			RestTemplate provides the following methods so that RESTful web service can be called easily and simply 
			by using all HTTP Methods including GET and POST.
		</para>
		<para>
			<informaltable>
	    		<tgroup cols="2">
	    			<colspec colname="col1" colnum="1" colwidth="3*" />
			        <colspec colname="col2" colnum="2" colwidth="7*" />
		
			        <thead>
			        	<row>
			            	<entry align="center">HTTP</entry>
			            	<entry align="center">Method</entry>
			          	</row>
			        </thead>
		
		 	        <tbody>
						<row>
							<entry>DELETE</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#delete(java.lang.String, java.lang.Object...)">delete(java.lang.String, java.lang.Object...)</ulink></entry>
			          	</row>
						<row>
							<entry>GET</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#getForObject(java.lang.String, java.lang.Class, java.lang.Object...)">getForObject(java.lang.String, java.lang.Class, java.lang.Object...)</ulink></entry>
			          	</row>	
			          	<row>
							<entry></entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#getForEntity(java.lang.String, java.lang.Class, java.lang.Object...)">getForEntity(java.lang.String, java.lang.Class, java.lang.Object...)</ulink></entry>
			          	</row>
						<row>
							<entry>HEAD</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#headForHeaders(String, String...)">headForHeaders(java.lang.String, java.lang.Object...)</ulink></entry>
			          	</row>	
						<row>
							<entry>OPTIONS</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#optionsForAllow(String, String...)">optionsForAllow(java.lang.String, java.lang.Object...)</ulink></entry>
			          	</row>	
						<row>
							<entry>POST</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#postForLocation(String, Object, String...)">postForLocation(java.lang.String, java.lang.Object, java.lang.Object...)</ulink></entry>
			          	</row>
			          	<row>
							<entry></entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#postForObject(java.lang.String, java.lang.Object, java.lang.Class, java.lang.Object...)">postForObject(java.lang.String, java.lang.Object, java.lang.Class, java.lang.Object...)</ulink></entry>
			          	</row>	
						<row>
							<entry>PUT</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#put(String, Object, String...)">put(java.lang.String, java.lang.Object, java.lang.Object...)</ulink></entry>
			          	</row>
			          	<row>
							<entry>any</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object...)">exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object...)</ulink></entry>
			          	</row>
			          	<row>
							<entry>&nbsp;</entry>
							<entry><ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor, java.lang.Object...)">execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor, java.lang.Object...)</ulink></entry>
			          	</row>
					</tbody>
				</tgroup>
			</informaltable>
		</para>
		
		<para>
			When using getForObject() method provided by RestTemplate, 
			a function that searches resources from server can be implemented, 
			and when using postForLocation() method, a function that can create or modify server-side resources can be implemented.
		</para>
		
		<para>
			The following is an example of using RestTemplate in TestCase of springrest plugin. 
			As seen in the code, calling RESTful service and getting results can be handled with a single line of code.
			<programlisting language="java">@Inject
@Named("restTemplate")
private RestTemplate restTemplate;

@Test
public void findMovie() {
    String movieId = "MV-00005";
    String movieSearchUrl = "http://localhost:8080/mypjt2/movies/{movieId}";

    Movie movie = restTemplate.getForObject(movieSearchUrl, Movie.class,
        movieId);

    assertThat(movie.getMovieId(), is(movieId));
}</programlisting>
		</para>
		
		<para>
			The RestTemplate methods can all use URI Template to state request URI.
			<programlisting language="java"><![CDATA[String result = restTemplate.getForObject("http://localhost:8080/testrest/springrest/movies/{movieId}/edit.xml", Movie.class, "MV-00005");]]></programlisting>
		</para>
	
		<para>
			Variables of URI Template can be handled as Map as the below.
			<programlisting language="java"><![CDATA[Map<String, String> vars = new HashMap<String, String>();
vars.put("movieId", "MV-00005");
String result = restTemplate.getForObject("http://localhost:8080/testrest/springrest/movies/{movieId}/edit.xml", Movie.class, vars);]]></programlisting>
		</para>
		
		<para>
			Also, exchange method can use header and body information of HTTP Response freely.
			<programlisting language="java"><![CDATA[@Test
public void createMovie() throws Exception {
    String movieCreateUrl = "http://localhost:8080/mypjt2/movies";

    Movie movie = makeMovie();

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_ATOM_XML);
    HttpEntity<Movie> requestEntity = new HttpEntity<Movie>(movie, headers);

    ResponseEntity<String> response = restTemplate.exchange(movieCreateUrl,
        HttpMethod.POST, requestEntity, String.class);
    assertThat(response.getStatusCode().toString(), is("201"));

    String movieSearchUrl = response.getHeaders().getLocation().toURL()
        .toString();
    movie = restTemplate.getForObject(movieSearchUrl, Movie.class);

    assertThat(movie, notNullValue());
    assertThat(movieSearchUrl,
        is("http://localhost:8080/mypjt2/movies/"
            + movie.getMovieId()));
    assertThat(movie.getTitle(), is("The Host"));

    System.out.println("New movie is registered.");
    System.out.println("1.MOVIE ID : " + movieSearchUrl);
    System.out.println("2.MOVIE Object : " + movie);
}]]></programlisting>
		</para>
		
		<note>
			<title>Error Status Code</title>
			<para>
				When calling RESTful web service with RestTemplate, Exception occurs when Error Status Code such as 404 or 500 is returned from server. 
				For information on Response Status Code, 
				refer to <link linkend="springrest_restsupport_contentnegotiation_responsestatuscode">HTTP Response Status Code</link> in this manual.
			</para>
		</note>
	</section>
</chapter>