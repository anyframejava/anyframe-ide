<chapter id="xp_query_integration_mipcontroller">
	<title>HttpXPMessageConverter</title>
	<para>
		XPLATFORM을 사용하는 환경에서 Client UI는 서버로 XML형태의 데이터를 전송한다.
		이 데이터를 이용하여 Business Service를 실행하기 위해서는 변환 작업을 거쳐야 한다.
		Anyframe에서는 복잡한 변환 로직을 간편하게 처리하기 위해 HttpXPMessageConverter를 제공한다.
	</para>
<programlisting language="java"><![CDATA[public class HttpXPMessageConverter implements HttpMessageConverter<Object> {
	// ...중략
	public Object read(Class<? extends Object> clazz,
			HttpInputMessage inputMessage) throws HttpMessageNotReadableException {
		try {
			HttpServletRequest request = ((ServletServerHttpRequest) inputMessage)
					.getServletRequest();
			return new XPRequestHandler(request, contentType, encoding);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new HttpMessageNotReadableException("Could not transform [" + clazz + "]", e);
		}
	}
	
	public void write(Object object, MediaType mediaType,
			HttpOutputMessage outputMessage) throws	HttpMessageNotWritableException {
		if (outputMessage instanceof ServletServerHttpResponse) {
			try {
				((XPResponseHandler) object).sendData(
						((ServletServerHttpResponse) outputMessage)
								.getServletResponse(), contentType, encoding);
			} catch (Exception e) {
				logger.error(e.getMessage());
				new HttpMessageNotWritableException("Could not write [" + object + "]", e);
			}
		}
	}
]]>
</programlisting>

    <para>
    	HttpXPMessageConverter를 이용하기 위해서는 @RequestBody, @ResponseBody Annotation을 이용해야 한다.
    	이에 대한 자세한 내용은 <ulink url="http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.0.4/reference/htmlsingle/core.html#core_springmvc_controller_implementation_requestbody">Anyframe Core Plugin 매뉴얼의 @RequestBody, @ResponseBody 부분</ulink>을 참고한다.
    	(http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.0.4/reference/htmlsingle/core.html#core_springmvc_controller_implementation_requestbody)
    </para>
    <para>
    	HttpXPMessageConverter를 이용한 Controller 코드를 살펴보면 다음과 같다.
    </para>
<programlisting language="java"><![CDATA[@Controller
@RequestMapping("/xpQueryMovie.do")
public class MovieController {

	@Inject
	@Named("xpQueryMovieService")
	private MovieService movieService;

	@RequestMapping(params = "method=getList")
	@ResponseBody
	public XPResponseHandler getList(
			@RequestBody XPRequestHandler requestHandler) throws Exception {
		VariableList inputVariableList = requestHandler.getInputVariableList();
		DataSetList inputDataSetList = requestHandler.getInputDataSetList();

		VariableList outputVariableList = new VariableList();
		DataSetList outputDataSetList = new DataSetList();

		try {
			movieService.getList(inputVariableList, inputDataSetList,
					outputVariableList, outputDataSetList);

			return new XPResponseHandler(outputDataSetList, outputVariableList);
		} catch (Exception e) {
			return setFailMessage(outputDataSetList, outputVariableList, e);
		}

	}
	
	// ...중략
]]>
</programlisting>
	<para>
		위 코드를 살펴보면 일반적인 Spring MVC 아키텍쳐를 활용하는 Annotation 기반의 Controller 클래스임을 확인할 수 있다.
		@RequstBody Annotation을 이용하여 Request를 XPRequestHandler 객체로 변환하고, 
		최종적으로 XPResponseHandler 객체를 리턴하면 @ResponseBody Annotation을 이용하여 XPLATFORM Data를 이용한
		Response를 구성하도록 되어있다.
	</para>
	
	<para>
		위 코드에서 사용된 XPRequestHandler, XPResponseHandler 객체는 Request/Response로부터 XPLATFORM Data를
		핸들링 하기 위해 제공되는 객체이다. 상세한 설명은 아래의 표를 참고 하도록 한다.
	</para>
	
    <itemizedlist>
		<listitem>
			<para>XPRequestHandler</para>

        	<para>
        		<informaltable>
        			<caption>XPRequestHandler</caption>
	          		<tgroup cols="3">
	          			<colspec colnum="1" colname="col1" colwidth="3*"/>
						<colspec colnum="2" colname="col2" colwidth="7*"/>
						<thead>
							<row>
								<entry align="center">Method Name</entry>
								<entry align="center">Description</entry>
							</row>
						</thead>
	            		<tbody>
	              			<row>
	                			<entry>getInputDataSetList()</entry>
	
	                			<entry>Client에서 전송한 DataSetList를 리턴</entry>
	              			</row>
	
	              			<row>
	                			<entry>getInputVariableList()</entry>
	
	                			<entry>Client에서 전송한 VariableList를 리턴</entry>
	              			</row>
	            		</tbody>
	          		</tgroup>
	        	</informaltable>
        	</para>
		</listitem>
		<listitem>
			<para>XPResponseHandler</para>
        	<para>
        		<informaltable>
        			<caption>XPResponseHandler</caption>
	          		<tgroup cols="3">
	          			<colspec colnum="1" colname="col1" colwidth="3*"/>
						<colspec colnum="2" colname="col2" colwidth="7*"/>
						<thead>
							<row>
								<entry align="center">Method Name</entry>
								<entry align="center">Description</entry>
							</row>
						</thead>
	            		<tbody>
	              			<row>
	                			<entry>addVariableList(VariableList variableList)</entry>
	                			<entry>Client로 전송하는 VariableList를 추가</entry>
	              			</row>
	              			<row>
	                			<entry>addDataSet(DataSet dataSet)</entry>
	                			<entry>Client로 전송하는 DataSetList에 DataSet을 추가</entry>
	              			</row>
	              			<row>
	                			<entry>setResultMessage(int errorCode, String message)</entry>
	                			<entry>Client Callback에서 사용할 에러 메세지와 에러 코드를 설정</entry>
	              			</row>
	              			<row>
	                			<entry>addVariableList(String key, Object value)</entry>
	                			<entry>Client로 전송하는 VariableList에 주어진 key/value 쌍을 추가</entry>
	              			</row>
	              			<row>
	                			<entry>addVariableList(String key, Object value)</entry>
	                			<entry>Client로 전송하는 VariableList에 주어진 key/value 쌍을 추가</entry>
	              			</row>
	            		</tbody>
	          		</tgroup>
	        	</informaltable>
        	</para>
		</listitem>

	</itemizedlist>

	<para>
		XPLATFORM에서는 서버에서 대용량 데이터를 클라이언트로 전송할 때 전체 데이터를 분할해서 전송하는 Firstrow 방식을 제공한다. 
		HttpXPMessageConverter에서는 DataSet에 담긴 대량의 데이터를 사용자가 입력한 값(nextDataSize) 만큼의 Row로 잘라서 CSV 포맷으로 전송하도록 구현 되어있다. 
		대용량 데이터가 VariableList의 형태로 저장된 경우에는 Firstrow 방식을 사용할 수 없음을 유의해야 한다.
		아래는 Firstrow 처리를 위한 XPResponseHandler 생성자의 파라미터에 대한 설명이다.
	</para>
	<para>
		<informaltable>
			<caption>Firstrow 처리를 위한 파라미터</caption>
			<tgroup cols="3">
				<colspec colnum="1" colname="col1" colwidth="3*"/>
				<colspec colnum="2" colname="col2" colwidth="7*"/>
				<thead>
					<row>
						<entry align="center">변수명</entry>
						<entry align="center">설명</entry>
					</row>
				</thead>
           		<tbody>
					<row>
						<entry>boolean isFirstrow</entry>
               			<entry>Firstrow 방식으로 전송할지 여부</entry>
					</row>
					<row>
              			<entry>boolean isCompression</entry>
               			<entry>Firstrow 방식으로 전송할 때, 압축 할지 여부</entry>
              		</row>
					<row>
              			<entry>int nextDataSize</entry>
               			<entry>Firstrow 방식으로 전송할 때, DataSet Row 분할 기준이 되는 Data Size 값</entry>
              		</row>
				</tbody>
			</tgroup>
		</informaltable>
	</para>
</chapter>
    
