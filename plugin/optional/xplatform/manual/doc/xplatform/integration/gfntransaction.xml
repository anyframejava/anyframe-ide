<chapter id="xplatform_integration_gfntransaction">
	<title>gfnTransaction</title>
	
	<para>
		XPLATFORM UI에서 서버로 요청을 발생 시키기 위해서는 transaction() 이라는 API를 사용해야 한다.
		transaction 호출을 위한 파라미터를 살펴보면 다음과 같다.
	</para>
	
	<para>
		<informaltable>
			<caption>transaction 호출을 위한 파라미터</caption>
			<tgroup cols="2">
				<colspec colnum="1" colname="col1" colwidth="3*" />
				<colspec colnum="2" colname="col2" colwidth="7*" />
				<thead>
					<row>
						<entry align="center">Parameter</entry>
						<entry align="center">Description</entry>
					</row>
				</thead>

				<tbody>
					<row>
						<entry align="left">strSvcId</entry>
						<entry align="left">transaction을 구분하기 위한 ID값</entry>
					</row>
					
					<row>
						<entry align="left">strUrl</entry>
						<entry align="left">transaction을 요청할 주소</entry>
					</row>
					
					<row>
						<entry align="left">strInDatasets</entry>
						<entry align="left">transaction을 요청할 때 입력값으로 보낼 DataSet의 ID.</entry>
					</row>
					
					<row>
						<entry align="left">strOutDatasets</entry>
						<entry align="left">transaction 처리 결과를 받을 DataSet ID</entry>
					</row>
					
					<row>
						<entry align="left">strArgument</entry>
						<entry align="left">transaction을 위한 인자값.</entry>
					</row>
					
					<row>
						<entry align="left">strCallbackFunc</entry>
						<entry align="left">transaction 결과를 돌려줄 function 이름.</entry>
					</row>
					
					<row>
						<entry align="left">bAsync</entry>
						<entry align="left">비동기 여부</entry>
					</row>
					
					<row>
						<entry align="left">bBinary</entry>
						<entry align="left">Binary 형태로 전송할 지 여부</entry>
					</row>
					
					<row>
						<entry align="left">bCompress</entry>
						<entry align="left">통신시 PostData를 압축할지 여부</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
	</para>
	
	<para>
		개발자가 transaction() 을 호출하기 위해서 사용해야 하는 parameter가 많아서 사용에 불편함이 있기 때문에
		Anyframe에서 공통 스크립트 내에 gfnTransaction() 명령어를 이용해서 쉽게 서버 호출을 사용할 수 있도록 지원한다.
	</para>
	
	<para>
		gfnTransaction() 명령을 수행하기 위해서는 반드시 dsTransaction 이라는 DataSet을 정의해야 한다.
		dsTransaction의 column 정보를 확인 해보면 다음과 같다.
	</para>
	
	<para>
   		<mediaobject>
       		<imageobject>
        			<imagedata align="center"
                    	fileref="../image/xplatform/gfntransaction/dstransaction.png" />
       		</imageobject>
       		<textobject>
				<phrase>dsTransaction DataSet 컬럼 정보</phrase>
			</textobject>
      	</mediaobject>
	</para>
	
	<para>
		<informaltable>
			<caption>dsTransaction DataSet 컬럼 정보</caption>
			<tgroup cols="2">
				<colspec colnum="1" colname="col1" colwidth="3*" />
				<colspec colnum="2" colname="col2" colwidth="7*" />
				<thead>
					<row>
						<entry align="center">Columns</entry>
						<entry align="center">Description</entry>
					</row>
				</thead>

				<tbody>
					<row>
						<entry align="left">SVC_ID</entry>
						<entry align="left">transaction을 구분하기 위한 ID값</entry>
					</row>
					
					<row>
						<entry align="left">IN_DATASET_LIST</entry>
						<entry align="left">transaction을 요청할 때 입력값으로 보낼 DataSet의 ID</entry>
					</row>
					
					<row>
						<entry align="left">OUT_DATASET_LIST</entry>
						<entry align="left">transaction 처리 결과를 받을 DataSet ID</entry>
					</row>

					<row>
						<entry align="left">URL</entry>
						<entry align="left">transaction을 요청할 주소</entry>
					</row>
					
					<row>
						<entry align="left">CALLBACK</entry>
						<entry align="left">transaction 결과를 돌려줄 function 이름.</entry>
					</row>
					
					<row>
						<entry align="left">bAsync</entry>
						<entry align="left">비동기 여부</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
	</para>
	
	<para>
		스크립트에서 gfnTransaction()을 호출하는 방법은 다음과 같다. 
	</para>
	
	<para>
		<programlisting language="java"><![CDATA[gfnTransaction("getListMovie");]]></programlisting>
	</para>
	
	<para>
		gfnTransaction() 메소드에서 인자값으로 받은 "getListMovie"는 dsTransaction에서 정의한 SVC_ID 값이다.
	</para>
</chapter>
    
