<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[ 
/************************
 * 공통 Script Include	*
 ************************/
include "lib::lib_Date.xjs";
include "lib::lib_Form.xjs";
include "lib::lib_Menu.xjs";
include "lib::lib_Service.xjs";
include "lib::lib_String.xjs";
include "lib::lib_Util.xjs";
include "lib::lib_Grid.xjs";

/********************************************************************************
 * Function Name	: gfnToday													*
 * Desc				: 오늘 날짜를 String 형태로 반납							*
 * Parameter		: 															*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnTodayTime												*
 * Desc				: 오늘 날짜와 시간을 String 형태로 반납					*
 * Parameter		: 															*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnAddDate												*
 * Desc				: 입력된 날짜에 파라미터로 입력된 숫자만큼 일을 더해	*
 *					  yyyyMMdd 형태로 리턴한다.								*
 * Parameter		: date('yyyyMMdd' 형태의 날짜 String)						*
 *					  nOffSet(날짜로부터 증가,감소값)						*
 * Return 			: String(yyyyMMdd)											*
 ********************************************************************************
 * Function Name	: gfnAddMonth												*
 * Desc				: 입력된 날짜에 파라미터로 입력된 숫자만큼 달을 더해	*
 *					  yyyyMMdd 형태로 리턴한다.								*
 * Parameter		: date('yyyyMMdd' 형태의 날짜 String)						*
 *					  nOffSet(달로부터 증가,감소값)							*
 * Return 			: String(yyyyMMdd)											*
 ********************************************************************************
 * Function Name	: gfnDateTime												*
 * Desc				: String 형태의 Date Time을 반환							*
 * Parameter		: nYear (년도)												*
 *					  nMonth (월)												*
 *					  nDate (일)												*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnGetDiffDay												*
 * Desc				: gfnGetDiffDay("20110808", "20111001")						*
 *					  두 날짜간의 일수를 계산해서 반납						*
 * Parameter		: sFdate (시작 일자)										*
 *					  sTdate (종료 일자)										*
 * Return 			: 양일간의 Day Count										*
 ********************************************************************************
 * Function Name	: gfnGetDiffDay												*
 * Desc				: gfnGetDiffDay("20110808", "20111001")						*
 *					  두 날짜간의 일수를 계산해서 반납						*
 * Parameter		: sFdate (시작 일자)										*
 *					  sTdate (종료 일자)										*
 * Return 			: 양일간의 Day Count										*
 ********************************************************************************
 * Function Name	: gfnGetDay													*
 * Desc				: 입력된 날짜의 요일을 반납								*
 * Parameter		: sDate (yyyyMMdd 형태의 날짜 String)						*
 * Return 			: 0 = 일요일, 1 = 월요일, ..., 6 = 토요일					*
 *					  -1 = 오류 발생시											*
 ********************************************************************************
 * Function Name	: gfnStrToDate												*
 * Desc				: yyyyMMdd 형태의 String을 Date 객체로 변환하는 함수	*
 * Parameter		: sDate (yyyyMMdd 형태의 날짜 String)						*
 * Return 			: Date														*
 ********************************************************************************
 * Function Name	: gfnGetDayName												*
 * Desc				: 입력된 날짜에 해당하는 요일명을 반납					*
 * Parameter		: sDate (yyyyMMdd 형태의 날짜 String)						*
 * Return 			: String("일요일, "월요일", ...., "토요일")				*
 ********************************************************************************
 * Function Name	: gfnIsLeapYear												*
 * Desc				: 윤년 여부를 확인하는 함수								*
 * Parameter		: sDate (yyyyMMdd 형태의 날짜 String)						*
 * Return 			: true  = 윤년												*
 *					  false = 윤년이 아님 or 입력값이 없음					*
 ********************************************************************************
 * Function Name	: gfnLastDateNum											*
 * Desc				: 해당 월의 마지막 날짜를 반환							*
 * Parameter		: sDate (yyyyMMdd 형태의 날짜 String)						*
 * Return 			: 1, 3, 5, 7, 8, 10, 12월 = 31								*
 *					  4, 6, 9, 11월 = 30										*
 *					  2월 = 28 or 29(윤년)										*
 ********************************************************************************
 * Function Name	: gfnLastDate												*
 * Desc				: 해당 월의 마지막 날짜를 yyyyMMdd 형태로 반납			*
 * Parameter		: sDate (yyyyMMdd 형태의 날짜 String)						*
 * Return 			: String(yyyyMMdd)											*
 ********************************************************************************
 * Function Name	: gfnSolar2Lunar											*
 * Desc				: 입력일에 해당하는 음력 날짜를 반납하는 함수			*
 *					  (처리 가능 기간 : 1841 ~ 2043년)						*
 * Parameter		: sDate (yyyyMMdd 형태의 날짜 String)						*
 * Return 			: 성공 = Flag(1 Byte) + (yyyyMMdd형태의 음력일자)			*
 *					  ( Flag : 평달 = "0", 윤달 = "1" )						*
 *					  실패 = "" ( 1841 ~ 2043 범위 오류시 )					*
 ********************************************************************************
 * Function Name	: gfnLunar2Solar											*
 * Desc				: 음력을 양력으로 변환하는 함수							*
 *					  (처리 가능 기간 : 1841 ~ 2043년)						*
 * Parameter		: sDate (Flag(1 Byte)+yyyyMMdd형태의 음력일자)			*
 *					  (예 : "020121122") (Flag : 평달 = "0", 윤달 = "1")		*
 * Return 			: 성공 = yyyyMMdd형태의 양력일자							*
 *					  실패 = null 												*
 *  			  		- 1841 ~ 2043 범위 오류의 경우						*
 *  		  			- sDate가 9자리가 아닐경우							*
 *  		  			- sDate의 첫자리 Flag가 "0"도 아니고 "1"도 아닌 경우*
 ********************************************************************************
 * Function Name	: gfnGetHolidays											*
 * Desc				: 입력한 년도의 모든 한국 법정 공휴일을 List로 반납	*
 *					  (처리 가능 기간 : 1841 ~ 2043년)						*
 * Parameter		: nYear (yyyy 형태의 String)								*
 * Return 			: 성공 = 공휴일 List Array									*
						Array[i] = "yyyyMMdd공휴일명" 형태로 저장				*
 *					  실패 = empty Array										*
 ********************************************************************************
 * Function Name	: gfnAlertMsg												*
 * Desc				: 공통 메세지에 정의된 메세지를 alert box로 보여줌		*
 * Parameter		: msgId(공통 메세지에 정의된 messageId)					*
 *					  param1, ...(공통 메세지에서 치환될 데이터)			*
 * Return 			: String(치환된 메세지)									*
 ********************************************************************************
 * Function Name	: gfnGridSort												*
 * Desc				: Grid의 컬럼에 따라 정렬하는 함수						*
 * Parameter		: obj(Grid)													*
 *					  e(GridClickEventInfo)										*
 * Return 			: 															*
 ********************************************************************************
 * Function Name	: gfnCheckedRowDelete										*
 * Desc				: Grid의 Column중 Check box(_chk)가 존재하는 경우			*
 *					  Check Box가 체크 된 상태인 Row만 삭제하는 함수		*
 * Parameter		: objDs(DataSet)											*
 * Return 			: 															*
 ********************************************************************************
 * Function Name	: gfnGridSetHeadText										*
 * Desc				: Grid의 header를 공통 정의된 메세지 기반으로 처리하는	*
 *					  함수														*
 * Parameter		: obj(Grid)													*
 * Return 			: 															*
 ********************************************************************************
 * Function Name	: gfnDsCheckValid											*
 * Desc				: DataSet 내의 데이터 뮤결성을 검사하는 함수			*
 * Parameter		: objGrd(DataSet)											*
 * Return 			: 															*
 ********************************************************************************
 * Function Name	: gfnItemCheck												*
 * Desc				: DataSet 내의 데이터 무결성을 검사하는 함수			*
 *					  private function											*
 * Parameter		: rowNum = DataSet row position								*
 *					  colNum = DataSet Column Index								*
 *					  objGrd = DataSet(Grid에 bind된 DataSet)					*
 *					  objDsValid = Dataset(objGrd의 무결성 검사용 DataSet		*
 * Return 			: true = Data에 문제 없음									*
 *					  false = 무결성 위한										*
 ********************************************************************************
 * Function Name	: gfnSetGridCheckAll										*
 * Desc				: Grid Head중 check box가 있을 경우, check box 클릭		*
 *					  이벤트 발생시 전체 row에 대한 check/uncheck 설정 함수	*
 * Parameter		: obj = Grid												*
 *					  e = GridClickEventInfo									*
 * Return 			: 															*
 ********************************************************************************
 * Function Name	: gfnShowModal												*
 * Desc				: 주어진 URL의 Form 객체를 팝업으로 생성하는 함수		*
 * Parameter		: sUrl = 팝업을 생성시킬 xfdl 파일의 위치				*
 *					  objSender = 팝업창으로 전송할 파라미터 객체			*
 *					  sTitlebar	= 팝업창 타이틀								*
 *					  nWidth = 팝업창 폭										*
 *					  nHeight = 팝업창 높이									*
 * Return 			: 팝업창의 close() 메소드의 파라미터값					*
 ********************************************************************************
 * Function Name	: gfnSetTitle												*
 * Desc				: Form에 속한 모든 컴포넌트의 title을 공통 영역에 	 	*
 *					  정의한 MsgId를 바탕으로 변경시키는 함수				*
 * Parameter		: 															*
 * Return 			:															*
 ********************************************************************************
 * Function Name	: gfnDsGetUpdate											*
 * Desc				: DataSet의 Row 중에서 변경된 내용이 있는지 여부를		*
 *					  판단하는 함수											*
 * Parameter		: obj(DataSet)												*
 * Return 			: true = 변경 된 데이터가 존재							*
 *					  false = 변경 된 데이터가 없음							*
 ********************************************************************************
 * Function Name	: gfnRight													*
 * Desc				: 문자열의 오른쪽부분을 지정한 길이만큼 반환			*
 * Parameter		: strString(String - 오른쪽 부분을 얻어올 원본 문자열)	*
 *					  nSize(얻어올 크기)										*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnLeft													*
 * Desc				: 문자열의 왼쪽 부분을 지정한 길이만큼 반환			*
 * Parameter		: strString(String - 왼쪽 부분을 얻어올 원본 문자열)	*
 *					  nSize(얻어올 크기)										*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnBlankStr												*
 * Desc				: 입력값이 undefined일 경우 ""를 반환하는 함수			*
 * Parameter		: oParam(String)											*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnTrim													*
 * Desc				: 입력된 문자열의 좌우측 공백을 제거한 문자열을 반환	*
 * Parameter		: arg(String)												*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnLtrim													*
 * Desc				: 입력된 문자열의 좌측 공백을 제거한 문자열을 반환	*
 * Parameter		: arg(String)												*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnRtrim													*
 * Desc				: 입력된 문자열의 우측 공백을 제거한 문자열을 반환	*
 * Parameter		: arg(String)												*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnLength													*
 * Desc				: 입력값 형태에 따라서 길이 또는 범위를 구하는 함수	*
 * Parameter		: 객체, 문자열, 배열										*
 * Return 			: Type에 따라 구해진 길이 또는 범위						*
 ********************************************************************************
 * Function Name	: gfnReplace												*
 * Desc				: 입력된 문자열의 일부분을 다른 문자열로 치환			*
 *					  ex) gfnReplace("abc", "b", "*")							*
 * Parameter		: strString(원본 String)									*
 *					  strOld(새로 바꿀 문자열)								*
 * Return 			: String(대체 된 문자열)									*
 ********************************************************************************
 * Function Name	: gfnIndexOf												*
 * Desc				: 전체 문자열 중 특정 문자열이 포함된 위치를 반납		*
 *					  ex) gfnIndexOf("abc", "b")								*
 * Parameter		: strString(원본 문자열)									*
 *					  strOld(검사할 문자열)									*
 *					  index(시작순서)											*
 * Return 			: 문자열이 포함된 위치의 index값							*
 ********************************************************************************
 * Function Name	: gfnCharAt													*
 * Desc				: 전체 문자열 중 특정 위치에 존재하는 문자를 반납		*
 *					  ex) gfnCharAt("abc", 2)									*
 * Parameter		: strString(원본 문자열)									*
 *					  index(인덱스)											*
 * Return 			: index에 해당하는 문자									*
 ********************************************************************************
 * Function Name	: gfnLPad													*
 * Desc				: 문자열이 지정된 길이가 되도록 왼쪽을 채우는 함수	*
 *					  ex) gfnLPad("abc", "*", 5)								*
 * Parameter		: strString(원본 문자열)									*
 *					  strPadChar(왼쪽을 채울 문자열)							*
 *					  nCount(문자열의 최종 길이)								*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnRPad													*
 * Desc				: 문자열이 지정된 길이가 되도록 오른쪽을 채우는 함수	*
 *					  ex) gfnRPad("abc", "*", 5)								*
 * Parameter		: strString(원본 문자열)									*
 *					  strPadChar(오른쪽을 채울 문자열)						*
 *					  nCount(문자열의 최종 길이)								*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnSplit													*
 * Desc				: 특정 문자열을 기준으로 전체 문자열을 나누어서 	 	*
 *					  하나의 배열(Array)로 만들어 반납하는 함수				*
 *					  ex) gfnSplit("aa::bb::cc::dd", "::")						*
 * Parameter		: strString(원본 문자열)									*
 *					  strChar(나눌 기준이 되는 문자)							*
 * Return 			: Array														*
 ********************************************************************************
 * Function Name	: gfnNumFormat												*
 * Desc				: 입력된 실수를 문자열 표현법으로 표현하는 함수 	 	*
 * Parameter		: dNumber(문자열로 출력할 실수)							*
 *					  nDetail(출력시 소숫점 이하의 자릿수(Default : 0))		*
 * Return 			: 문자열로 바뀐 실수										*
 *					  출력되는 실수는 정수부분에 3자리마다 ',' 가 삽입		*
 ********************************************************************************
 * Function Name	: gfnStripBlank												*
 * Desc				: 문자열 중 "=" 좌우의 빈공백을 제거하는 함수	 	 	*
 * Parameter		: strArg(String)											*
 *					  gfnStripBlank("a = \" b = d \" c='1'  d = \"b = d ")		*
 * Return 			: String("=" 좌우의 빈공백 제거된 문자열)				*
 ********************************************************************************
 * Function Name	: gfnQuote													*
 * Desc				: 입력된 문자열의 양쪽에 쌍따옴표를 붙여 반환	 	 	*
 * Parameter		: strString(String 대상 문자열)							*
 *					  gfnStripBlank("a = \" b = d \" c='1'  d = \"b = d ")		*
 * Return 			: String(쌍따옴표가 붙여진 문자열)						*
 ********************************************************************************
 * Function Name	: gfnSubStr													*
 * Desc				: 입력된 문자열에서 특정 위치 안에 있는 문자열 반환	*
 * Parameter		: strString(String 문자열)									*
 *					  nIndex(얻어올 첫 글자의 Index)							*
 *					  nSize(얻어올 글자수, Default length(해당 객체의 길이)	*
 * Return 			: String(지정 위치 안의 문자열)							*
 ********************************************************************************
 * Function Name	: gfnNvl													*
 * Desc				: 입력값이 존재하는지를 판단하여						*
 *					  존재하는 경우 입력값을 그대로 반환, 그렇지 않으면	*
 *					  두 번째 파라미터를 반환하는 함수						*
 * Parameter		: arrArgument[0](입력값)									*
 *					  arrArgument[1](arrArgument[0]이 Null일 경우 대체할 값)	*
 * Return 			: String													*
 ********************************************************************************
 * Function Name	: gfnIsEmpty												*
 * Desc				: 값이 존재하는지 여부 체크								*
 * Parameter		: val(입력값)												*
 * Return 			: false = 입력값이 null, 빈 스트링(""), undefined일 경우	*
 *					  true = 그 외 값이 존재하는 경우						*
 ********************************************************************************
 * Function Name	: gfnGetMessage												*
 * Desc				: 메세지 코드에 따른 실제 메세지값을 반환				*
 * Parameter		: code(MessageId)											*
 *					  strMsgParam[](메세지값으로 치환될 Parameter Array)		*
 * Return 			: 등록된 MessageId에 해당하는 실제 메세지값				*
 *					  등록된 MessageId가 없을 경우 code를 그대로 반환		*
 ********************************************************************************
 * Function Name	: gfnAlertMsg												*
 * Desc				: 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을	*
 *					  생성해서 해당 값을 보여주는 함수						*
 * Parameter		: strMsgId(MessageId)										*
 *					  strMsgType(메세지 종류 : ERR, WARN, INFO)				*
 *					  strMsgParam[](메세지값으로 치환될 Parameter Array)		*
 * Return 			: 팝업에 해당 메세지값을 표현							*
 ********************************************************************************
 * Function Name	: gfnConfirm												*
 * Desc				: 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을	*
 *					  생성해서 해당 값을 보여주는 함수						*
 * Parameter		: strMsgId(MessageId)										*
 *					  strMsgType(메세지 종류 : ERR, WARN, INFO)				*
 *					  strMsgParam[](메세지값으로 치환될 Parameter Array)		*
 * Return 			: 팝업에 해당 메세지값을 표현							*
 ********************************************************************************
 * Function Name	: gfnIsNull													*
 * Desc				: 값이 null 이거나 white space 문자로만 이루어진 경우	*
 *					  true를 리턴한다											*
 * Parameter		: sValue(String)											*
 * Return 			: true = 입력값이 null, undefined, 빈문자열("")일 경우	*
 *					  false = 그 외 입력값이 존재할 경우						*
 ********************************************************************************
 * Function Name	: gfnCheckURL												*
 * Desc				: 입력값이 URL Type인지 체크하는 함수					*
 * Parameter		: strValue(String)											*
 * Return 			: true = 입력값이 URL형태일 경우							*
 ********************************************************************************
 * Function Name	: gfnCheckEmail												*
 * Desc				: 입력값이 e-mail Type인지 체크하는 함수					*
 * Parameter		: strValue(String)											*
 * Return 			: true = 입력값이 email형태일 경우						*
 ********************************************************************************
 * Function Name	: gfnCheckPhone												*
 * Desc				: 입력값이 전화번호 format 인지 체크하는 함수			*
 * Parameter		: strValue(String)											*
 * Return 			: true = 입력값이 전화번호 형태일 경우					*
 ********************************************************************************
 * Function Name	: gfnCheckNumber											*
 * Desc				: 입력값이 숫자 인지 체크하는 함수						*
 * Parameter		: strValue(String)											*
 *					  strSign(String - 음수(-), 소수점(.) 등 표시문자)		*
 * Return 			: true = 입력값이 숫자 형태일 경우						*
 ********************************************************************************
 * Function Name	: gfnCheckDate8												*
 * Desc				: 입력값이 날짜 형태 인지 체크하는 함수					*
 * Parameter		: strValue(String)											*
 * Return 			: true = 입력값이 8자리 날짜(yyyyMMdd) 형태일 경우		*
 ********************************************************************************
 * Function Name	: gfnCheckDate10											*
 * Desc				: 입력값이 날짜 형태 인지 체크하는 함수					*
 * Parameter		: strValue(String)											*
 * Return 			: true = 입력값이 10자리 날짜 형태일 경우				*
 *					  허용 입력 타입(yyyy-MM-dd, yyyy/MM/dd, yyyy.MM.dd)		* 
 ********************************************************************************
 * Function Name	: gfnCheckTime12											*
 * Desc				: 12시 기준 시간포맷 유효성 체크							*
 * Parameter		: strValue(String)											*
 * Return 			: true = 입력값이 주어진 시간 형태일 경우				*
 *					  허용 입력 타입(hh:mm:ss (am,Am,AM,aM)|(pm,pM,Pm,PM)	)	* 
 ********************************************************************************
 * Function Name	: gfnCheckTime24											*
 * Desc				: 24시 기준 시간포맷 유효성 체크							*
 * Parameter		: strValue(String)											*
 * Return 			: true = 입력값이 주어진 시간 형태일 경우				*
 *					  허용 입력 타입(hh:mm:ss)								* 
 ********************************************************************************
 * Function Name	: gfnSchParameterSetting									*
 * Desc				: 화면 객체를 모두 찾아 id=value로 매핑하여				*
 *					  parameter를 만들어 string으로 return					*
 * Parameter		: 															*
 * Return 			: String(id1=value1 id2=value2 id3=value3 ...)				* 
 ********************************************************************************
 * Function Name	: gfnSchDataSetSetting										*
 * Desc				: 모든 컴포넌트의 값을 지정한 DataSet에 담는 함수		*
 * 					  (ex) gfnSchDataSetSetting("dsSearch")		 				*
 * Parameter		: strDsId(DataSet Id)										*
 * Return 			: 															* 
 ********************************************************************************
 * Function Name	: gfnGetComponent											*
 * Desc				: 프로그램의 특정 컴포넌트를 컴포넌트의 id값을  		*
 * 					  이용하여 찾아내는 함수									*
 * Parameter		: componentId(Component의 ID값)								*
 * Return 			: Component Object											* 
 ********************************************************************************
 * Function Name	: gfnGetComponentValue										*
 * Desc				: 프로그램의 특정 컴포넌트의 Attribute값을 찾는 함수	*
 *					  (ex) gfnGetComponent("stInputBox", "value")				*
 * Parameter		: strID(Component의 ID값), strAttributeNM(Attribute Name)	*
 * Return 			: String													* 
 ********************************************************************************
 * Function Name	: gfnGetFrame												*
 * Desc				: 주어진 ID값을 가지는 Frame을 찾아 반환하는 함수		*
 * Parameter		: strID(Frame의 ID값)										*
 * Return 			: Frame object												* 
 ********************************************************************************/ 
 
 
/********************************************************************************
 * Function Name	: gfnTransaction											*
 * Desc				: 서버로 Request를 발생시키는 공통 함수			 		*
 * Parameter		: strServiceId - dsTransaction에 선언한 SVC_ID				*
 *					  strArgument - get 방식으로 전달하는 parameter			*
 * Return 			: 															* 
 ********************************************************************************/ 
function gfnTransaction(strServiceId, strArgument){
	var nRow = dsTransaction.findRow("SVC_ID", strServiceId);
	
	var strUrl = dsTransaction.getColumn(nRow, "URL");
	
	var strInDataSets = dsTransaction.getColumn(nRow, "IN_DATASET_LIST");
	
	var strOutDataSets = dsTransaction.getColumn(nRow, "OUT_DATASET_LIST");
	
	var strCallback = dsTransaction.getColumn(nRow, "CALLBACK");
	
	if(gfnIsEmpty(strCallback)){
		strCallback = "gfnCallback";
	}
	
	strUrl = gvDataGroup + "::" + strUrl;
	
	var bSync = dsTransaction.getColumn(nRow, "SYNC_YN") == "Y" ? true : false;
	
	transaction(strServiceId, strUrl, strInDataSets, strOutDataSets, strArgument, strCallback, bSync, false );
}


// *****************************************************************************
// Function Name: gfnCallback
// Description	: 공통Callback function - 항상 수행됨
// Argument		: strServiceId(서비스ID), strErrorCode(에러코드), strErrorMsg(에러메세지)
// Return		: 없음
// *****************************************************************************
function gfnCallback(strServiceId, strErrorCode, strErrorMsg) {
	var nCurrentServiceRow = dsTransaction.findRow("SVC_ID", strServiceId);
		
	//local callback function call
	var strCallback = dsTransaction.getColumn(nCurrentServiceRow, "CALLBACK");
	
	if(!gfnIsEmpty(strCallback)) {
		eval(strCallback + "(strServiceId, strErrorCode, strErrorMsg)");
	} else {
		try{
			fnCallback(strServiceId, strErrorCode, strErrorMsg);
		} catch(e) {
			if(strErrorCode < 0){
				alert(strErrorMsg);
			}else{
				alert("정상 처리 되었습니다.");
			}
		}
	}
}

// *****************************************************************************
// Function Name: gfnSetHttpParam
// Description	: 서버와 통신시 객체의 값을 dataset에 추가
// Argument		: strServiceId(서비스ID), strErrorCode(에러코드), strErrorMsg(에러메세지)
// Return		: 없음
// *****************************************************************************
function gfnSetHttpParam(obj_dataset) {
	
}

//====================== EVENT 관련 처리 =============================
]]></Script>
