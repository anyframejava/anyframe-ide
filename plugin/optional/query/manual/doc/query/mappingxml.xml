<chapter id="query_mapping">
	<title>Mapping XML Files</title>
	<para>
		Query 서비스 초기화 시, Query 서비스는 SqlLoader를 이용하여 매핑 정보들을 로드한다.
		그리고 사용자 요청 시 매핑 정보를 기반으로 query id를 이용해 실행하고자 하는 쿼리문을 찾아 실행한다. 
	</para>
	<para>	
		다음에서는 Query 서비스에서 제공하는 org.anyframe.query.impl.config.loader.MappingXMLLoader를 통해 로드되는 매핑 XML 파일을
		작성하는 방법에 대해서 알아보기로 한다.
		매핑 XML 파일은 <![CDATA[<queryservice>]]>와 <![CDATA[</queryservice>]]>내에 크게 <![CDATA[<table-mapping>]]>과
		<![CDATA[<queries>]]>로 구성된다. <![CDATA[<queries>]]>는 필수 요소이므로
		빠뜨리지 않도록 주의해야 한다.
	</para>
	<section id="query_mapping_schema">
		<title>Mapping XML 스키마</title>
		<para>
			Query 서비스를 통해 로드되는 매핑 XML 파일의 스키마는 XSD 기반(버전 1.1.0 이후)으로 정의해야 한다. (1.0.0 이전은 DTD 기반)
			따라서 매핑 XML 파일을 정의하기 위해서는 먼저 다음과 같은 Namespace 정의가 선행되어야 한다.
		</para>
		<programlisting language="xml"><![CDATA[
<queryservice ]]><emphasis role="bold">xmlns="http://www.anyframejava.org/schema/query/mapping"</emphasis><![CDATA[
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        ]]><emphasis role="bold">xsi:schemaLocation="http://www.anyframejava.org/schema/query/mapping
        http://www.anyframejava.org/schema/query/mapping/anyframe-query-mapping-1.0.xsd</emphasis><![CDATA[">
    ...
</queryservice>]]></programlisting>
	</section>
	<section id="query_mapping_table">
		<title>table-mapping 정의 방법</title>

		<para><![CDATA[<table-mapping>]]> 내에 <![CDATA[<table>]]>을 이용하여, 테이블과 특정 클래스간의 매핑
			정보들을 정의할 수 있다. <![CDATA[<table-mapping>]]> 내에는 여러 개의 <![CDATA[<table>]]>을 정의할 수
			있다.
		</para>

		<informaltable>
			<caption>table-mapping 정의 방법</caption>
			<tgroup cols="3">
				<colspec colname="col1" colnum="1" colwidth="2*" />
				<colspec colname="col2" colnum="2" colwidth="4*" />
				<colspec colname="col3" colnum="3" colwidth="4*" />				

				<thead>
					<row>
						<entry align="center">Tag Name</entry>
						<entry align="center">Description</entry>
						<entry align="center">Child Tag</entry>
					</row>
				</thead>

				<tbody>
					<row>
						<entry>table</entry>
						<entry>
							테이블과 클래스간의 매핑 정보를 정의한다.
							<para> * attribute 설명</para>
							<para> name: 해당 테이블명 </para>
							<para>class : 매핑 클래스명</para>
						</entry>
						<entry>field-mapping(필수), primary-key(필수)</entry>
					</row>

					<row>
						<entry>field-mapping</entry>
						<entry>테이블의 칼럼과 이에 매핑되는 클래스의 attribute를 정의한다.</entry>
						<entry>dbms-column(필수), class-attribute(필수)</entry>
					</row>

					<row>
						<entry>primary-key</entry>
						<entry>해당 테이블의 Primary Key를 정의한다.</entry>
						<entry>dbms-column(필수)</entry>
					</row>

					<row>
						<entry>dbms-column</entry>
						<entry>해당 테이블의 칼럼명을 정의한다.</entry>
						<entry/>
					</row>

					<row>
						<entry>class-attribute</entry>
						<entry>dbms-column에서 정의한 칼럼과 매핑되는 해당 클래스의 attribute명을
							정의한다.
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</informaltable>

		<para>
			다음은 위에서 나열한 설정 정보들을 이용한 <![CDATA[<table-mapping>]]>의 설정 예제로, 테이블
			TBL_CUSTOMER와 클래스 Customer간의 매핑 정보를 담고 있다.
			<programlisting language="xml"><![CDATA[<queryservice>
    <table-mapping>
        <table name="TBL_CUSTOMER"
            class="org.anyframe.sample.domain.Customer">
            <field-mapping>
                <dbms-column>ssno</dbms-column>
                <class-attribute>ssno</class-attribute>
            </field-mapping>
            <field-mapping>
                <dbms-column>name</dbms-column>
                <class-attribute>nm</class-attribute>
            </field-mapping>
            <field-mapping>
                <dbms-column>address</dbms-column>
                <class-attribute>addr</class-attribute>
            </field-mapping>
            <primary-key>
                <dbms-column>ssno</dbms-column>
            </primary-key>
        </table>
    </table-mapping>
</queryservice>]]></programlisting>
		</para>
	</section>

	<section id="query_mapping_queries">
		<title>queries 정의 방법</title>

		<para>
			<![CDATA[<queries>]]> 내에 <![CDATA[<query>]]>를 이용하여, Query 서비스들을 통해 실행할
			쿼리문들을 정의할 수 있다. <![CDATA[<queries>]]> 내에는 여러 개의 <![CDATA[<query>]]>를 정의할 수 있다.
		</para>

		<informaltable>
			<caption>queries 정의 방법</caption>
			<tgroup cols="3">
				<colspec colname="col1" colnum="1" colwidth="1*" />
				<colspec colname="col2" colnum="2" colwidth="7*" />
				<colspec colname="col3" colnum="3" colwidth="2*" />				

				<thead>
					<row>
						<entry align="center">Tag Name</entry>
						<entry align="center">Description</entry>
						<entry align="center">Child Tag</entry>
					</row>
				</thead>

				<tbody>
					<row>
						<entry>query</entry>
						<entry>
							쿼리문을 정의 한다.
							<para>
								 * attribute설명
							</para>
							<para>
								id : 해당하는 쿼리문을 식별하기 위한 식별자
							</para>
							<para>
								isDynamic : 동적 쿼리인지 아닌지 식별 	(Default=true)
							</para>
							<para>
								isCamelCase : 조회 결과 매핑시 조회 칼럼명에 대해
								CamelCase 적용할 것인지 정의 (Default=true)
							</para>
							<para>
								maxFetchSize : 다량의 데이터 전체 조회시 발생할 수 있는 성능 저하를 방지하기 위해, 쿼리문별로 maxFetchSize를 정의하여 허용되는
								최대 조회 건수를 제한할 수 있다. 조회된 결과 데이터의 건수가 정의된 maxFetchSize보다 큰 경우 Exception 처리된다.
								특정 쿼리문에 대해 maxFetchSize가 정의되지 않은 경우 jdbcTemplate의 maxFetchSize가 적용된다. 
								jdbcTemplate에 대해서도 maxFetchSize가 정의되지 않은 경우에는 조회된 결과 데이터의 건수를 제한하지 않는다.
							</para>
							<para> 
								mappingStyle : 조회 결과 매핑시 조회 칼럼명에 대해 어떤 유형으로 변경할 것인지 정의
								(camel,lower, upper, none 중 택일, Default=camel)
							</para>
							<para> 
								 camel - 조회 칼럼명에 대해 CamelCase 적용
							</para>
							<para>
								 lower - 조회 칼럼명에 대해 LowerCase 적용 
							</para>
							<para>
								 upper - 조회 칼럼명에 대해 UpperCase 적용 
							</para>
							<para>
								 none - 조회 칼럼명을 DBMS가 전달한 그대로 적용 
							</para>
							<para>
								*isCamelCase로는 다양한 스타일의 칼럼 매핑 지원에 제한이 있어 신규 속성을 추가함. 
								따라서 isCamelCase는 Deprecated 예정임 (Anyframe 3.2.1 이후) mappingStyle이 적용된 경우 
								isCamelCase는 무시되며, 이전 버전과의 호환을 위해 isCamelCase가 true인 경우 mappingStyle은 
								'camel', false인 경우 'lower'로 처리됨.
							</para>
						</entry>
						<entry>statement(필수), lobStatement(선택), param(선택), result(선택)</entry>
					</row>

					<row>
						<entry>statement</entry>
						<entry>
							실행할 쿼리문을 정의한다. Joined 쿼리에서는 동일한 조회 칼럼명이 있을 경우, Alias를
							부여하도록 한다.
						</entry>
						<entry/>
					</row>

					<row>
						<entry>param</entry>
						<entry>
							Query 서비스는 해당 쿼리문을 미리 컴파일하여 PreparedStatement 형태로 저장하여
							처리하고 있다. 따라서 입력값 셋팅을 위해 PreparedStatement에 setXXX를 수행하려면, 입력
							Parameter에 해당하는 SQL Type을 java.sql.Types에 정의된 값을 참조하여 param tag의
							attribute인 type의 값으로 정의한다. param tag는 입력 Parameter의 개수와 순서에 맞게
							추가한다. 입력 Parameter의 데이터를 가져오기 위해서는 다음과 같은 기준에 따라 데이터 타입을 정의해야만
							한다
							<informaltable>
								<caption>parameter type 매핑 정보</caption>
								<tgroup cols="2">
									<thead>
										<row>
											<entry align="center">Java Type</entry>
											<entry align="center">DBMS Type</entry>
										</row>
									</thead>

									<tbody>
										<row>
											<entry>String</entry>
											<entry>CHAR</entry>
										</row>

										<row>
											<entry>String</entry>
											<entry>VARCHAR</entry>
										</row>

										<row>
											<entry>String</entry>
											<entry>LONGVARCHAR</entry>
										</row>

										<row>
											<entry>java.math.BigDecimal</entry>
											<entry>NUMERIC </entry>
										</row>

										<row>
											<entry>java.math.BigDecimal</entry>
											<entry>DECIMAL</entry>
										</row>

										<row>
											<entry>boolean</entry>
											<entry>BIT</entry>
										</row>

										<row>
											<entry>byte</entry>
											<entry>TINYINT</entry>
										</row>

										<row>
											<entry>short</entry>
											<entry>SMALLINT</entry>
										</row>

										<row>
											<entry>int</entry>
											<entry>INTEGER</entry>
										</row>

										<row>
											<entry>long</entry>
											<entry>BIGINT</entry>
										</row>

										<row>
											<entry>float</entry>
											<entry>REAL</entry>
										</row>

										<row>
											<entry>double</entry>
											<entry>FLOAT</entry>
										</row>

										<row>
											<entry>double</entry>
											<entry>DOUBLE</entry>
										</row>

										<row>
											<entry>byte[]</entry>
											<entry>BINARY</entry>
										</row>

										<row>
											<entry>byte[]</entry>
											<entry>VARBINARY</entry>
										</row>

										<row>
											<entry>byte[]</entry>
											<entry>LONGVARBINARY</entry>
										</row>

										<row>
											<entry>java.sql.Date</entry>
											<entry>DATE</entry>
										</row>

										<row>
											<entry>java.sql.Time</entry>
											<entry>TIME</entry>
										</row>

										<row>
											<entry>java.sql.Timestamp</entry>
											<entry>TIMESTAMP</entry>
										</row>
									</tbody>
								</tgroup>
							</informaltable>
							<para>
								* attribute 설정 
							</para>
							<para>
								type : parameter의 DBMS type
							</para>
							<para>
								binding : CallableStatement경우 'IN','OUT','INOUT' 중 선택
							 </para>
							<para>
								name : CallableStatement경우 Stored Procedure 내에 정의된 변수 이름 정의
							</para>
						</entry>
						<entry>생략 시 VARCHAR로 인식됨</entry>
					</row>

					<row>
						<entry>result</entry>

						<entry>
							해당 쿼리가 조회를 위한 SELECT문일 경우에 사용할 수 있으며, 쿼리 수행 결과를 매핑할 클래스명을
							정의한다. <![CDATA[<result>]]>가 지정되지 않았을 경우 쿼리 수행 결과의 각 Row에 대해 칼럼명,
							칼럼값을 쌍으로 Map에 put하고 각 Row별 Map들을 ArrayList에 담은 형태로 결과값을 리턴하게 된다.
							isCamelCase, mappingStyle 속성값에 따라 Map에 저장되는 키값이 달라짐에 유의하도록 한다. (예를 들어,
							mappingStyle의 속성값이 'camel'이고 조회 칼럼명이 USER_NAME인 경우 Map의 키값은 userName이 된다.)
							<para> 
							* attribute 설명
							</para>
							<para>
								length : 한 페이지에 보여질 데이터의 건수 
							</para>
							<para>
								class : 수행 결과를 저장할 클래스명
							</para>
						</entry>
						<entry>result-mapping(선택)</entry>
					</row>

					<row>
						<entry>result-mapping</entry>
						<entry>
							해당 쿼리가 조회를 위한 SELECT문일 경우에 사용할 수 있으며, 수행 결과를 저장할 클래스와
							매핑되는 테이블이 정의되지 않았을 경우 또는 수행 결과를 저장할 클래스의 속성명이 조회 칼럼명에 mappingStyle을
							적용한 이름과 일치하지 않는 경우에 한해 해당하는 칼럼에 대해 매핑되는 해당 클래스의 attribute 명을 정의한다.
							<para> 
								* attribute 설명 
							</para>
							<para>
								column : 조회된 칼럼명
							</para>
							<para>
								attribute : 정의한 칼럼에 매핑되는 클래스의 attribute명
							</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
	</section>
</chapter>

