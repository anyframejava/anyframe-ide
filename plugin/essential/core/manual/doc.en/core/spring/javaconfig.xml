<chapter id="core_spring_javaconfig">
	<title>Java based Configuration</title>
	<para>
		Spring 3 enables Java-based configuration by adding some core features of 
		<ulink url="http://www.springsource.org/javaconfig">Spring Java Configuration project</ulink>.
		As Java-based configuration is mainly implemented by Java code,
		if there is any type error in injection, even compile is not executed, thereby guaranteeing type safety.
		In addition, as this directly manages bean instance in logic, this guarantees that bean implementation does not 
		depend on Spring and can be implemented by pure java code.
	</para>
	<itemizedlist>
   		<listitem><para>@Configuration</para></listitem>
   		<listitem><para><link linkend="core_spring_javaconfig_bean">@Bean</link></para></listitem>
   		<listitem><para><link linkend="core_spring_javaconfig_bean_lifecycle">@Lazy</link></para></listitem>   		
   		<listitem><para><link linkend="core_spring_javaconfig_bean_di">@DependsOn</link></para></listitem>
   		<listitem><para><link linkend="core_spring_javaconfig_bean_di">@Primary</link></para></listitem>
   		<listitem><para><link linkend="core_spring_javaconfig_bean_spel">@Value</link></para></listitem>
   		<listitem><para><link linkend="core_spring_javaconfig_combine_java">@Import</link></para></listitem>
   		<listitem><para><link linkend="core_spring_javaconfig_combine_xml">@ImportResource</link></para></listitem>
    </itemizedlist>
    <para>
    	Above annotations are now directly supported:, and in this section we will have a look at examples of such annotations.
    </para>
	<para>
		When defining Java-based configuration, the basic annotations are @Configuration and @Bean.
		@Configuration is an annotation that can be defined to class level.
		Class containing @Configuration definition means configuration class which contains bean information and are handled by Spring container.
		As an annotation that can be defined to method level, @Bean plays the same role as the <![CDATA[<bean/>]]> in XML.
	</para>		
	<programlisting language="java"><emphasis role="bold">@Configuration</emphasis>
public class MovieFinderConfig {
    // ...
    <emphasis role="bold">@Bean</emphasis>
    public MovieFinder movieFinder() {
        return new MovieFinderImpl(movieDao);
    }
}</programlisting>	
	<para>
		The above-mentioned MovieFinderConfig class is a configuration class and defines bean named 'movieFinder'.
		Modifying the above code on xml is as the following.
		
	</para>
	<programlisting language="xml"><![CDATA[<bean id="movieFinder" class="org.anyframe.sample.javaconfig.moviefinder.service.impl">
	<constructor-arg ref="movieDao"/>
</bean>]]></programlisting>	
	<section id="core_spring_javaconfig_bean">
		<title>Bean Management</title>
		<para>
			As mentioned above, @Bean is an annotation that can be defined to method level and is used to define a bean.
			This plays the same role as <![CDATA[<bean/>]]> in XML, and can be defined in @Configuration or @Component class.
			Method with newly added @Bean definition needs to contain logic that creates and return the relevant bean instance,
			and Spring container registers method name as bean name.
		</para>
		<programlisting language="java"><emphasis role="bold">@Bean</emphasis>
public MovieFinder movieFinder() {
    return new MovieFinderImpl(movieDao);
}</programlisting>	
		<para>
			According to the code above, due to the movieFinder() with added @Bean definition, 'movieFinder' bean will be registered to Spring container.
			In addition, if 'movieFinder' bean is requested, MovieFinderImpl object where MovieDao object was set will be returned by the defined logic.
		</para>	
		<section id="core_spring_javaconfig_bean_naming">
			<title>Naming</title>
			<para>
				@Bean Annotation has 'name' property. If value is assigned to name property,
				this value becomes the name of the relevant bean.
			</para>
			<programlisting language="java"><emphasis role="bold">@Bean(name="movieFinderImpl")</emphasis>
public MovieFinder movieFinder() {
    return new MovieFinderImpl(movieDao);
}</programlisting>				
		</section>
		<section id="core_spring_javaconfig_bean_lifecycle">
			<title>Lifecycle Management</title>
			<para>
				It is possible to manage lifecycle for the beans defined using @Bean like xml- or annotation-based beans.
				In other words, if a bean contains JSR-250 Annotation such as @PreDestroy, @PostConstruct
				or implements interfaces such as InitializingBean, DisposableBean in Spring, lifecycle of the relevant bean is managed by Spring container.
				In addition, as @Bean can have 'init-method', 'destroy-method' properties, if property value is assigned, the defined method is executed
				when the bean is initialized or destroyed.
				This plays the same role as init-method, destroy-method of <![CDATA[<bean/>]]>.
			</para>
			<programlisting language="java">@Bean(<emphasis role="bold">initMethod = "initialize", destroyMethod = "destroy"</emphasis>)
public MovieFinder movieFinder() {
    return new MovieFinderImpl(movieDao);
}</programlisting>		
			<para>
				According to the code above, MovieFinderImpl.initialize() and MovieFinderImpl.destroy() will be executed
				at bean initialization and destruction respectively.
			</para>	
			<para>
				By pre-loading all singleton beans at the initialization time, Spring container guarantees the immediate use of the bean whenever needed.
				However, to instantiate singleton bean not at the container initialization time but at the request of the bean for the first time,
				@Lazy must be defined. This plays the same role as 'lazy-init' property in <![CDATA[<bean/>]]>.
			</para>
			<programlisting language="java">@Bean
<emphasis role="bold">@Lazy</emphasis>
public MovieFinder movieFinder() {
    return new MovieFinderImpl(movieDao);
}</programlisting>			
		</section>			
		<section id="core_spring_javaconfig_bean_Scope">
			<title>Scope</title>
			<para>
				In the case of adding @Scope along with @Bean, specific scope can be granted to the relevant bean.
				If no @Scope is defined, basically singleton scope is applied.
			</para>
			<programlisting language="java">@Bean
<emphasis role="bold">@Scope("prototype")</emphasis>
public MovieFinder movieFinder() {
    return new MovieFinderImpl(movieDao);
}</programlisting>	
			<para>
				In addition, when requesting bean of request, session, globalSession scope, 'proxyMode' value can be additionally assigned to make AOP 
				proxy to be returned. 'proxyMode' is basically defined as ScopedProxyMode.NO and can be defined as ScopedProxyMode.TARGET_CLASS 
				or ScopedProxyMode.INTERFACES. This plays the same role as <![CDATA[<aop:scoped-proxy/>]]> under <![CDATA[<bean/>]]>.				
			</para>	
			<programlisting language="java">@Bean
<emphasis role="bold">@Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)</emphasis>
public MoviePreferences moviePreferences() {
    return new MoviePreferences();
}

@Bean
public MovieFinder movieFinder() {
    return new MovieFinderImpl(moviePreferences);
}</programlisting>		
		</section>		
		<section id="core_spring_javaconfig_bean_di">
			<title>Dependency Injection</title>
			<para>
				When there are relationships among beans, injection occurs by calling a method related to the target bean.
			</para>
			<programlisting language="java">@Configuration
public class MovieFinderConfig {
    @Bean
    public MovieFinder movieFinder() {
        return <emphasis role="bold">new MovieFinderImpl(movieDao())</emphasis>;
    }
    
    @Bean
    public MovieDao <emphasis role="bold">movieDao()</emphasis> {
        return new MovieDao();
    }    
}</programlisting>
			<para>
				Let's assume that 'movieFinder' bean refers to 'movieDao' bean.
				To express this as Java-based configuration, by calling  movieDao() method when creating MovieFinderImpl instance in movieFinder(),
				you can inject 'movieDao' bean as the code above.
				Or, when calling setter of MovieFinderImpl object, by returning the result of movieDao(), you can inject 'movieDao' bean.
			</para>
			<programlisting language="java">@Configuration
public class MovieFinderConfig {
    @Bean
    public MovieFinder movieFinder() {
        MovieFinderImpl movieFinder = new MovieFinderImpl();
        <emphasis role="bold">movieFinder.setMovieDao(movieDao());</emphasis>
        return movierFinder;
    }
    
    @Bean
    public MovieDao <emphasis role="bold">movieDao()</emphasis> {
        return new MovieDao();
    }    
}</programlisting>	
			<para>
				If the referring bean is defined in XML/Annotation-base or in other configuration class,
				Spring can use annotations (@Inject, @Autowired, @Resource) as it is to handle Dependency Injection.
			
			</para>		
			<programlisting language="java">@Configuration
public class MovieDaoConfig {
    <emphasis role="bold">@Autowired</emphasis>
    private IIdGenerationService idGenService;

    @Bean
    public MovieDao movieDao() {
        MovieDao movieDao = new MovieDao();
        <emphasis role="bold">movieDao.setIIdGenerationService(idGenService);</emphasis>
        return movieDao;
    }
}</programlisting>
			<para>
				The code above is a part of configuration class 'MovieDaoConfig' which manages 'movieDao' bean.
				As 'movieDao' bean requires IdGenerationService in Anyframe internally, it injects xml-based IdGenerationService using @Autowired
				and sets IdGenerationService object targeting MovieDao object by using setter in movieDao() method.
			</para>
			<para>
				To explicitly force one or more beans which must be initialized before the relevant bean,
				@DependsOn can be used.			
				This plays the same role as 'depends-on' property in <![CDATA[<bean/>]]>.
			</para>
			<programlisting language="java">@Configuration
public class MovieFinderConfig {
    @Bean
    public MovieService movieService(){
        return new MovieServiceImpl();
    }

    @Bean
    <emphasis role="bold">@DependsOn(value = { "movieService" })</emphasis>		
    public MovieFinder movieFinder() {
        return new MovieFinderImpl(movieDao());
    }

    // ...
}</programlisting>
			<para>
				According to the code above, we can guess that 'movieService' bean will be initialized before 'movieFinder' bean is initialized
				by defining  @DependsOn property.
			</para>
			<para>
				In case that there are several beans for type injection as there are several definitions for the beans with same type,
				the bean assigned with @Primary will be a priority injection target.
				This plays the same role as 'primary' property in <![CDATA[<bean/>]]>.
			</para>
			<programlisting language="java">@Configuration
public class MovieDaoConfig {
    @Bean
    public MovieDao defaultMovieDao() {
        return new MovieDaoImpl();
    }

    @Bean
    <emphasis role="bold">@Primary</emphasis>
    public MovieDao anotherMovieDao() {
        return new AnotherMovieDaoImpl();
    }
}</programlisting>
			<para>
				In the configuration defined as above, injected bean will be 'anotherMovieDao'bean with @Primary property according to the code like
				<emphasis role="bold">@Autowired MovieDao movieDao;</emphasis>.
			
			</para>
		</section>	
		<section id="core_spring_javaconfig_bean_method">
			<title>Method Injection</title>
			<para>
				When using setter injection and constructor injection, singleton bean basically handles referring beans in singleton style.
				However, if singleton bean has dependency to non singleton bean (namely, prototype bean), refer to the following.
			
			</para>
			<orderedlist numeration="arabic">
				<listitem>
					<para>
						Defines abstract method which returns non-singleton style's reference bean in singleton bean implementation.
					</para>
				</listitem>
				<listitem>
					<para>
						Executes logic by injecting non singleton bean using abstract method in business method of singleton bean implementation.
					</para>
				</listitem>
				<listitem>
					<para>
						Adds above-mentioned abstract method implementing logic along with instance creation in the method relevant to singleton bean
						when defining Java-based configuration. 
						In this case, abstract method logic creates and return Non Singleton Bean instance.

					</para>
				</listitem>
				<listitem>
					<para>
						If handled in the order mentioned above, whenever abstract method is called in singleton bean business method, 
						new non-singleton bean instance returns possible by abstract method implementing logic that the relevant bean instance contains.
						In other words, reference to non singleton bean becomes possible in singleton bean.
					</para>
				</listitem> 
			</orderedlist>
			<para>
				The following is a configuration class defined for referring from singleton bean('movieFinder') to non singleton bean('movieDao').
			</para>
			<programlisting language="java">@Configuration
public class MovieFinderConfig {
    @Bean
    @Scope("prototype")
    public MovieDao movieDao() {
        return new MovieDaoImpl();
    }

    @Bean
    public MovieFinder movieFinder() {
        <emphasis role="bold">return new MovieFinderImpl() {
            protected MovieDao getMovieDao() {
                return movieDao();
            }
        };</emphasis>
    }
}</programlisting>
			<para>
				MovieFinderImpl class mentioned in the configuration class above will have the following pattern.
			</para>
			<programlisting language="java">public abstract class MovieFinderImpl implements MovieFinder {
    <emphasis role="bold">protected abstract MovieDao getMovieDao();</emphasis>

    public <![CDATA[List<Movie>]]> getPagingList(Movie movie, int pageIndex) 
        throws Exception{
        return <emphasis role="bold">getMovieDao()</emphasis>.getPagingList(movie, pageIndex);
    }
}</programlisting>
		</section>
		<section id="core_spring_javaconfig_bean_spel">
			<title>Spring Expression Language</title>
			<para>
				When defining Java-based configuration,
				if you define <link linkend="core_spring_spel">Spring Expression Language</link> along with @Value,
				you can assign the expression evaluating result at the bean instance creation time.
			</para>
			<programlisting language="java">@Configuration
public class MovieFinderConfig {
    <emphasis role="bold">private @Value("${jdbc.url}") String dbUrl;</emphasis>
    <emphasis role="bold">private @Value("${jdbc.username}") String userName;</emphasis>
    <emphasis role="bold">private @Value("${jdbc.password}") String password;</emphasis>

    @Bean
    public MovieDao movieDao() {
        return new MovieDaoImpl(dbUrl, userName, password);
    }
}</programlisting>
		</section>		
	</section>
	<section id="core_spring_javaconfig_combine">
		<title>Combining Java and XML Configuration</title>
		<para>
			By using @Import/@ImportResource, it is possible to refer to bean defined in xml or other @Configuration class.
		
		</para>
		<section id="core_spring_javaconfig_combine_java">
			<title>Combine Java Configuration</title>
			<para>
				By assigning other @Configuration class as value when defining @Import,
				it is possible to refer to @Bean information defined in other @Configuration class at the current @Configuration class.
				If the number of target @Configuration class is multiple, specify the class by using ',' identifier in { } .
				@Import plays the same role as <![CDATA[<import/>]]>.
			</para>
			<programlisting language="java">@Configuration
<emphasis role="bold">@Import(value = { MovieDaoConfig.class })</emphasis>
public class <emphasis role="bold">MovieFinderConfig</emphasis> {
    <emphasis role="bold">@Autowired
    private MovieDao movieDao;</emphasis>

    @Bean
    public MovieFinder movieFinder() {
        return new MovieFinderImpl(movieDao);
    }
}

@Configuration
public class <emphasis role="bold">MovieDaoConfig</emphasis> {
    // ...

    @Bean
    public MovieDao movieDao() {
        MovieDao movieDao = new MovieDao();
        movieDao.setIIdGenerationService(idGenService);
        return movieDao;
    }
}</programlisting>
			<para>
				As @Configuration MovieFinderConfig mentioned above imports MovieDaoConfig class, it can refer to 'movieDao' defined in this class.
				In addition, we can see that @Autowired is used to refer to @Bean defined in other @Configuration class.
				Is is also possible to use @Inject, @Resource.
			</para>
		</section>
		<section id="core_spring_javaconfig_combine_xml">
			<title>Combine XML Configuration</title>
			<para>
 				If xml configuration file location is assigned as value when defining @ImportResource ,
 				you can refer to bean defined in xml at current @Configuration class.
 				If the number of imported xml file is multiple, specify the xml file by using ',' identifier in { } in the same style as @Import.
 				
			</para>
			<programlisting language="java">@Configuration
<emphasis role="bold">@ImportResource("classpath:/spring/context-*.xml")</emphasis>
public class MovieDaoConfig {

    @Bean
    public MovieDao movieDao() {
        MovieDao movieDao = new MovieDao();
        movieDao.setIIdGenerationService(idGenService);
        return movieDao;
    }
}</programlisting>
			<para>
				In the code above, we can see that @Autowired is used to refer to bean defined in other xml.
				It is also possible to use @Inject, @Resource.
			</para>
		</section>		
	</section>
	<section id="core_spring_javaconfig_instantiation">
		<title>Instantiating spring container</title>
		<para>
			Spring 3 additionally provides AnnotationConfigApplicationContext, an implementation of ApplicationContext, to manage defined beans by recognizing 
			@Configuration class. AnnotationConfigApplicationContext can recognize Stereotype Annotation, JSR-330 Annotation
			in addition to @Configuration class.
			Let's take a look at how to start Spring container based in @Configuration class.
		</para>
		<section id="core_spring_javaconfig_instantiation_server">
			<title>AnnotationConfigApplicationContext</title>
			<para>
				To start Spring container in XML/Annotation base,
				implementation such as XmlWebApplicationContext, FileSystemXmlApplicationContext, ClassPathXmlApplicationContext was used.
			</para>
			<programlisting language="java">String[] locations = new String[] { "classpath:spring/context-*.xml" };
ClassPathXmlApplicationContext context = <emphasis role="bold">new ClassPathXmlApplicationContext(locations, false);</emphasis>
context.refresh();</programlisting>
			<para>
				However, to recognize @Configuration class, it is needed to start spring container by using AnnotationConfigApplicationContext implementation.
				If the number of @Configuration to recognize is multiple, define the relevant classes with the value of input parameter.
			</para>
			<programlisting language="java">AnnotationConfigApplicationContext context = <emphasis role="bold">new AnnotationConfigApplicationContext(MovieFinderConfig.class, ...);</emphasis></programlisting>
			<para>
				Or, create instance by calling Default Constructor of AnnotationConfigApplicationContext and register @Configuration classes
				to recognize.
			</para>
			<programlisting language="java">AnnotationConfigApplicationContext context = <emphasis role="bold">new AnnotationConfigApplicationContext();</emphasis>
<emphasis role="bold">context.register(MovieFinderConfig.class, ...);</emphasis>
context.register(...);
context.refresh();
</programlisting>
			<para>
				Like <![CDATA[<context:component-scan/>]]> which was defined for spring container to search annotation-based bean,
				scanning specific sub-package is also possible by using AnnotationConfigApplicationContext.
				In this case, all @Configuration classes in the relevant sub-package are searched and managed by container.
			</para>
			<programlisting language="java">AnnotationConfigApplicationContext context = <emphasis role="bold">new AnnotationConfigApplicationContext();</emphasis>
<emphasis role="bold">context.scan("org.anyframe.sample");</emphasis>
context.refresh();
</programlisting>			
		</section>
		<section id="core_spring_javaconfig_instantiation_web">
			<title>AnnotationConfigWebApplicationContext</title>
			<para>
				To start spring container by recognizing @Configuration in web application, assign the value of contextClass, contextConfigLocation,
				a properties of ContextLoaderListener Listener.
				In this case, define contextClass as AnnotationConfigWebApplicationContext and define @Configuration classes to load with the value of 
				contextConfigLocation.
			</para>
			<programlisting language="xml"><![CDATA[<context-param>
    <param-name>]]><emphasis role="bold">contextClass</emphasis><![CDATA[</param-name>
    <param-value>]]><emphasis role="bold">org.springframework.web.context.support.AnnotationConfigWebApplicationContext</emphasis><![CDATA[</param-value>
</context-param>

<context-param>
    <param-name>]]><emphasis role="bold">contextConfigLocation</emphasis><![CDATA[</param-name>
    <param-value>]]><emphasis role="bold">org.anyframe.samples.moviefinder.basic.config.MovieFinderConfig</emphasis><![CDATA[</param-value>
</context-param>

<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>]]></programlisting>
		</section>
	</section>
	<important>
		<title>Note for defining Java-based Configuration</title>
		<para>
			In the following code, 'movieFinder1', 'movieFinder2' bean refers to 'movieDao' bean. 
			As  movieDao() method is called for referring to 'movieDao' bean, it is expected that the instance of MovieDao which 'movieFinder1'and 'movieFinder2' beans
			refer to will be different.
		</para>
		<programlisting language="java">@Configuration
public class MovieFinderConfig {
			
    @Bean 
    public MovieFinder movieFinder1() {
        return new MovieFinderImpl(movieDao());
    }
    
    @Bean 
    public MovieFinder movieFinder2() {
        return new MovieFinderImpl(movieDao());
    }
		
    @Bean
    public MovieDao movieDao() {
        return new MovieDao();
    }
}</programlisting>			
		<para>
			Spring, however, sub-classifies  all  @Configuration classes by using CGLIB at the initialization time, and checks whether there exists 
			singleton bean cached by container. Therefore, 'movieFinder1' and 'movieFinder2' refer to same 'movieDao' instance.
		</para>
		<para>
			As explained above, as Spring uses CGLIB to handle @Configuration class, CGLIB library is necessary in the relevant project
			and note that for subclassification of @Configuration class by using CGLIB,  @Configuration class must have default constructor
			and should not be defined as final.
		</para>
	</important>
	<section id="core_spring_javaconfig_resource">
  		<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>Download</para>
					<para>
						Download and extract Eclipse project file which contains sample code in the following.
					</para>
					<itemizedlist>
						<listitem>
							<para>Maven-based run</para>
							<para>
								After moving the extracted folder at command window, execute 'mvn compile exec:java -Dexec.mainClass=...' command
								and check the result.
								Refer to JavaDoc in main class in each Eclipse project.
							</para>
						</listitem>
						<listitem>
							<para>Eclipse-based run</para>
							<para>
								After importing extracted project at Eclipse, select Main.java under src/main/java folder,
								and click mouse right button and click on Run As > Java Application at context menu.
								Then, check the result.
							</para>
						</listitem>									
					</itemizedlist>						
					<table>
						<title>Download List</title>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="4*"/>
							<colspec colnum="2" colname="col2" colwidth="6*"/>
							<thead>
								<row>
									<entry align="center">Name</entry>
									<entry align="center">Download</entry>
								</row>
							</thead>
							<tbody>										
								<row>
									<entry align="center">anyframe-sample-javaconfig.zip</entry>
									<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.0.1/reference/sample/anyframe-sample-javaconfig.zip">Download</ulink>
									</entry>
								</row>														
							</tbody>
						</tgroup>
					</table> 
				</listitem>
			</itemizedlist>
		</para>	
	</section>
</chapter>