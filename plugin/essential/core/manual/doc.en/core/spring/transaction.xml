<chapter id="core_spring_transaction">
	<title>Transaction Management</title>
		<para>Provides the following merits as a service providing consistently abstracted method on Transaction management.
		</para>
  		<itemizedlist>
		    <listitem>
				<para>Provides consistent programming model on different Transaction API such as JTA, JDBC.
			</para>
    		</listitem>
 		   	<listitem>
				<para>Provides easy-to-use API on programmatic transaction management.
				</para>
    		</listitem>
    		<listitem>
      			<para>Supports declarative transaction management.</para>
    		</listitem>
    		<listitem>
      			<para>Easy to combine with Query Service.</para>
    		</listitem>
    		<listitem>
      			<para>Easy to combine with Hibernate.</para>
   			</listitem>
  		</itemizedlist>
		<para>Can manage transaction by selecting proper service among transaction services listed below.</para>
  		<para><emphasis role="bold">DataSource Transaction Service</emphasis></para>
  		<para>DataSource Transaction service manages Local Transaction using a datasource.
  		</para>
  		<itemizedlist>
    		<listitem>
      			<para><emphasis role="bold">Samples</emphasis></para>
			    <para>The following is an example of configuration and test code of DataSource Transaction service.
			</para>
	    	<itemizedlist>
        		<listitem>
				<para><emphasis role="bold">Configuration</emphasis></para>
		        <para>
		        	The following is a part of context-transaction-datasource.xml, configuration file of DataSourceTransactionManager.
		        	Here, dataSource property must be defined.
		        
		        	<programlisting language="xml"><![CDATA[<bean id="transactionManagerDataSource" 
    class=]]><emphasis role="bold"><![CDATA["org.springframework.jdbc.datasource.DataSourceTransactionManager"]]></emphasis><![CDATA[>
    <property name="dataSource"><ref bean="common_datasource"/></property>
</bean>]]></programlisting>
				</para>
		        <para>
		        	Above-mentioned common_datasource Bean is defined as the following in context-datasource-common.xml file,
		        	configuration file of DataSource service.
		        
          			<programlisting language="xml"><![CDATA[<bean id=]]><emphasis role="bold">"common_datasource"</emphasis>
     <![CDATA[class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
    <property name="url" value="jdbc:hsqldb:file:/./db/sampledb"/>
    <property name="username" value="sa"/>
</bean>]]></programlisting>
				</para>
        		</listitem>	
        		<listitem>
          		<para><emphasis role="bold">TestCase</emphasis></para>
				<para>
					The following is a part of TransactionServiceTestDataSource.java which tests Transaction Management by using
					DataSource Transaction service based on above-defined configuration.
					Actual test method is defined as the following in AbstractTransactionServiceTest.java in common.
					To test DataSource Transaction service, define setUp() method as the following.
				
          			<programlisting
          			language="xml">public class TransactionServiceTestDataSource extends AbstractTransactionServiceTest {
    ...
    protected void setup() {
        super.setup();
        this.service = (TransactionTestSampleService)context
                .getBean(<emphasis role="bold">"transactionSampleDataSource"</emphasis>);
        this.transactionManager = (PlatformTransactionManager)context
                .getBean(<emphasis role="bold">"transactionManagerDataSource"</emphasis>);
   }
}</programlisting>
				</para>
        		</listitem>
      		</itemizedlist>
    		</listitem>
		</itemizedlist>

		<para><emphasis role="bold">Hibernate Transaction Service</emphasis></para>
  		<para>
  			Hibernate Transaction service manages Local Transaction and Hibernate Session by using DataSource.
  			As HibernateTransactionManager is dependent on SessionFactoryBean, it must be defined along with SessionFactoryBean definition.
  			
  		</para>
	 	<itemizedlist>
    		<listitem>
      			<para><emphasis role="bold">Samples</emphasis></para>
			    <para>The following is an example of configuration and test code of Hibernate Transaction service.
			 </para>
      		<itemizedlist>
        		<listitem>
          			<para><emphasis role="bold">Configuration</emphasis></para>
			        <para>
			        	The following is a part of context-transaction-hibernate.xml, configuration file of HibernateTransactionManager.
			        	Here, sessionFactory property is defined, and sessionFactory
          				Bean is referred for sessionFactory definition.
          				For how to define sessionFactory Bean of Hibernate, 
          				refer to <ulink
          				url="http://dev.anyframejava.org/docs.en/anyframe/plugin/optional/hibernate/1.0.1/reference/htmlsingle/hibernate.html#hibernate_hibernate_springintegration_property">Hibernate</ulink> service manual.
			        	
          				<programlisting language="xml"><![CDATA[<bean id="transactionManagerHibernate"
    class=]]><emphasis role="bold">"org.springframework.orm.hibernate3.HibernateTransactionManager"</emphasis><![CDATA[>
    <property name="sessionFactory" ref="sessionFactory" />
</bean>]]></programlisting>
					</para>

					<para>
						sessionFactory Bean above is defined as the following in context-hibernate.xml file, configuration file of Hibernate.
						
					 	<programlisting language="xml"><![CDATA[<bean id=]]><emphasis
					 	role="bold">"sessionFactory"</emphasis> class=<emphasis
              			role="bold">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</emphasis><![CDATA[>
    <property name="dataSource" ref="common_datasource" />
    <property name="mappingDirectoryLocations">
        <value>classpath:/spring/services/hibernate</value>
    </property>
    <property name="hibernateProperties">
        <props>
            <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
            <prop key="hibernate.show_sql">true</prop>
            <prop key=
            "hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> 
            <prop key="hibernate.cache.use_second_level_cache">true</prop>         
        </props>
    </property>
</bean>]]></programlisting>
					</para>
        		</listitem>
        		<listitem>
          			<para><emphasis role="bold">TestCase</emphasis></para>
          			<para>
          				The following is a part of TransactionServiceTestHibernate.java which tests Transaction Management by using
                        Hibernate Transaction service based on above-defined configuration.
					    Actual test method is defined as the following in AbstractTransactionServiceTest.java in common.
					    To test Hibernate Transaction service, define setUp() method as the following.
          			
          				<programlisting
          				language="xml">public class TransactionServiceTestHibernate extends AbstractTransactionServiceTest {    
    ...
    protected void setup() {
    super.setup();
    this.service =
        (TransactionTestSampleService)context.getBean("transactionSampleHibernate");
    this.transactionManager =
        (PlatformTransactionManager)context.getBean("transactionManagerHibernate");
    }
}</programlisting>
					</para>
        		</listitem>
      		</itemizedlist>
    		</listitem>
  		</itemizedlist>

  		<para><emphasis role="bold">JTA Transaction Service</emphasis></para>
		<para>
			JTA Transaction service abstracts Global Transaction management by using JTA and helps the implementation
   			without being dependent on JTA, JNDI, etc. due to such services.
			In addition, DataSource service must be defined as <link
			linkend="core_spring_datasource_JNDIDataSource">
			JNDI DataSource service</link>.
		
		</para>

  		<itemizedlist>
    		<listitem>
      			<para><emphasis role="bold">Samples</emphasis></para>
      			<para>The following is an example of configuration and test code of JTA Transaction service.
      			</para>
      			<itemizedlist>
        			<listitem>
          			<para><emphasis role="bold">Configuration</emphasis></para>
          			<para>
          				The following is a part of context-transaction-weblogic.xml, configuration file of JTATransactionManager.
          				Here, define transactionManagerName property and jnditemplate property.
          				transactionManagerName property must be defined as the name of JNDI of TransactionManager registered in the relevant WAS.
          				In addition, define jnditemplate property as provider url of the relevant WAS and class name of initial context factory.
          				
          			</para>
          			
          			<programlisting language="xml"><![CDATA[<bean id="transactionManagerWebLogic"
   class="org.springframework.transaction.jta.WebLogicJtaTransactionManager">
   <property name="transactionManagerName" value="javax.transaction.TransactionManager" />
   <property name="jndiTemplate" ref="jnditemplate"></property>
</bean>

<bean id="jnditemplate" class="org.springframework.jndi.JndiTemplate" >
   <property name="environment">
      <props>
         <prop key=
             "java.naming.factory.initial">weblogic.jndi.WLInitialContextFactory</prop>
         <prop key="java.naming.provider.url">t3://server.ip:7001</prop>
      </props>
   </property>
</bean>]]></programlisting>

	      			<para>
	      				In addition, when managing Transaction by JEUS Server, 
	      				TransactionManager can be set as the following.
	      			
	      			</para>
	      			
	      			<programlisting language="xml"><![CDATA[<bean id="transactionManagerJEUS"
   class="org.springframework.transaction.jta.JtaTransactionManager">
   <property name="transactionManagerName"	value="java:/TransactionManager" />
   <property name="jndiTemplate" ref="jnditemplate"></property>
</bean>

<bean id="jnditemplate" class="org.springframework.jndi.JndiTemplate" >
   <property name="environment">
      <props>
         <prop key="java.naming.factory.initial">jeus.jndi.JNSContextFactory</prop>
         <prop key="java.naming.provider.url">server.ip:9736</prop>
      </props>
   </property>
</bean>]]></programlisting>

		  			<para>
		  				JEUS Server basically has TransactionManager even without additional setting,
		  				and the JNDI name of the relevant TransactionManager is java:/TransactionManager.
		  				If javax.naming.NameNotFoundException occurs due to the failure of finding TransactionManager
		  				whose JNDI name is java:/TransactionManager,
		  				check whether j2ee-x.x.jar file is added in the classpath of the relevant project and delete it.
		  				This is because this problem is caused by the conflict with class related with Transaction Management
		  				existing in basic library for JEUS Server.
		  			
		  			</para>

          			<para>
          				Using the setting element of tx:jta-transaction-manager newly added in Spring 2.5
          				can add proper PlatformTransactionManager by auto-detecting JTA-based transaction platform.
          				Here, note that transaction manager bean id is automatically set as "transactionManager". 
          				The following is a part of context-transaction-jta.xml, configuration file of JTATransactionManager.
          				In this case, as JTATransactionManager is used along with JNDIDataSource, it was expressed in the same 
          				configuration file.
          				But, in most cases, it is defined in different configuration file(context-datasource.xml).
          			
         			</para>
         			
          			<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:jee="http://www.springframework.org/schema/jee"
    ]]><emphasis role="bold">xmlns:tx="http://www.springframework.org/schema/tx"</emphasis><![CDATA[
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/jee 
    http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
    ]]><emphasis role="bold">http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd</emphasis><![CDATA[">

    ]]><emphasis role="bold"><![CDATA[<tx:jta-transaction-manager/>]]></emphasis><![CDATA[
    
    <jee:jndi-lookup id="dataSource" jndi-name="AnyframeDS" resource-ref="true">
        <jee:environment>
          java.naming.factory.initial=weblogic.jndi.WLInitialContextFactory
          java.naming.provider.url=t3://server.ip:7001
        </jee:environment>
    </jee:jndi-lookup>

</beans>]]></programlisting>
          
          			<para>
          				For IBM WebSphere, BEA Weblogic, Oracle OC4J, vendor-specific (note for version) adaptor class can be used.
          				 
          			</para>
      				</listitem>

        			<listitem>
          			<para><emphasis role="bold">TestCase</emphasis></para>

          			<para>
          				The following is a part of TransactionServiceTestJTA.java which tests JTA Transaction service by using
					    JTA Transaction service based on above-defined configuration.
					    Actual test method is defined as the following in AbstractTransactionServiceTest.java in common.
					    To test DataSource Transaction service, define setUp() method as the following.
          			
          				<programlisting
          				language="xml">public class TransactionServiceTestHibernate extends AbstractTransactionServiceTest {
   ...
    protected void setup() {
        super.setup();
        this.service = (TransactionTestSampleService)context
                .getBean(<emphasis role="bold">"transactionManager"</emphasis>);
        this.transactionManager = (PlatformTransactionManager)context
                                .getBean(<emphasis role="bold">"transactionManager"</emphasis>);
   }
}</programlisting>
					</para>

        			<para>
        				As example test code refers to WebLogic library at runtime,
        				set weblogic-9.2.jar, xbean-9.2.jar file under [WebLogic Home]/server/lib/ folder as a reference library properly.
        				After the task above is complete, execute example test code when WebLogic Server was started successfully.
        				
        			</para>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>
  
	<section id="core_spring_transaction_declarative">
    <title>Declarative Transaction Management</title>

    	<para>
    		In this document, let's have a look at declarative Transaction Management without directly handling transaction at code.
    		Spring provides various ways for declarative Transaction Management.
</para>
    
    	<section id="core_spring_transaction_declarative_annotation">
      	<title>Transaction Management using Annotation</title>
    		
    		<section id="core_spring_transaction_declarative_annotation_configuration">
       		<title>Configuration</title>

        		<para>
        			Define the property of Transaction service by referring to 
        			this Core Plugin >> Spring >> <link linkend="core_spring_transaction"> Transaction Management</link>.
        			The following is Transaction service configuraition xml file(context-transaction-datasource-oracle.xml)
        			and defines TransactionManager which plays a actual role of Transaction Management.
        			
        			<programlisting language="xml"><![CDATA[<bean id="oracleTransactionManagerDataSource" 
      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource"><ref bean="oracle_datasource"/></property>
</bean>]]></programlisting>
				</para>

		        <para>		                	
		        	In addition, replace @Transactional-applied classes with Proxy class at runtime, 
		        	and when the transaction management target method is called,
		        	add the following Spring configuration xml file to use the replaced class
		        	in order for the relevant method to be called after transaction began at Proxy through Transaction service.
		        	
        			<programlisting
        			 language="xml"><![CDATA[<tx:annotation-driven transaction-manager="oracleTransactionManagerDataSource"/>]]></programlisting>
        	 	</para>
     		</section>
      
			<section id="core_spring_transaction_declarative_annotation_managementtaget">
			<title>Definition of Transaction Management target</title>

        		<para>
		        	Identifies Transaction Management target class or method by using @Transactional Annotation provided in Spring.
		        	The following is a part of MovieServiceImpl, which defines whether or not to manage transaction for all classes.
		        	In addition, @Transactional Annotation can be shown on the method or can direct detailed property.
		        	Note that, however, in the case that multiple number of Transaction Managers are defined and you'd like to manage transaction based on Annotation,
		        	you cannot define and use Transaction Manager for specific class.(up to Spring 2.5)
		        	
		        	<programlisting language="java"><![CDATA[@Service("annotationMovieService")
]]><emphasis role="bold">@Transactional</emphasis><![CDATA[
public class MovieServiceImplWithAnnotation implements MovieService {

    ...
    
    @Transactional(noRollbackFor = { MovieException.class }, propagation = Propagation.REQUIRED)
    public void updateMovieList(Movie newMovie, Movie updateMovie)
            throws MovieException {
        String movieName = "";
        try {
            movieName = newMovie.getTitle();
            create(newMovie);

            movieName = updateMovie.getTitle();
            int result = update(updateMovie);
            if (result <= 0) {
                throw new MovieException("fail to update with wrong movieid.");
            }

        } catch (Exception e) {
            throw new MovieException("'" + movieName
                    + "' - Failed to update movie data");
        }
    }

}]]></programlisting>
				</para>
	
		        <para>
		        	As defined in the sample code above, the following detailed property can be assigned to @Transactional
		        	Annotation for Transaction Management.
		        
		        </para>
		
		        <informaltable>
		        	<tgroup cols="2">
		                <colspec colnum="1" colname="col1" colwidth="3*"/>
		                <colspec colnum="2" colname="col2" colwidth="7*"/>
		            <thead>
		              <row>
		                <entry align="center">Property</entry>
		                <entry align="center">Description</entry>
		              </row>
		            </thead>
		
		            <tbody>
		              <row>
		                <entry>
		                  <emphasis role="bold">isolation</emphasis>
		                </entry>
		
		                <entry>
		                	Element defining isolation Level of transaction.
		                	If not defined separately, it follows the Isolation Level of DB.
		                	Can select among Isolation.DEFAULT, Isolation.READ_COMMITTED, Isolation.READ_UNCOMMITTED,
		                	Isolation.REPEATABLE_READ, Isolation.SERIALIZABLE and define.
		                	(Default = Isolation.DEFAULT) For more details on each Isolation level,
		                	refer to <link linkend="core_spring_transaction_declarative_reference"> [Reference]
		                	Propagation Behavior, Isolation Level</link> in this page.
		                	
		                </entry>
		              </row>
		
		              <row>
		                <entry>
		                  <emphasis role="bold">noRollbackFor</emphasis>
		                </entry>
		                <entry>Does not execute rollback on the defined Exception list.
		         </entry>
		              </row>
		
		              <row>
		                <entry>
		                  <emphasis role="bold">noRollbackForClassname</emphasis>
		                </entry>
		                <entry>Defines Exception list not to execute rollback by using string not class object.
		                  </entry>
		              </row>
		              <row>
		                <entry>
		                  <emphasis role="bold">propagation</emphasis>
		                </entry>
		                <entry>
		                	Element to define the propagation type of transaction.
		                	Can select among Propagation.MANDATORY,
		                	Propagation.NESTED, Propagation.NEVER, Propagation.NOT_SUPPORTED,
		                	Propagation.REQUIRED, Propagation.REQUIRES_NEW,	Propagation.SUPPORTS
		                	and define.(Default = Propagation.REQUIRED) For more details on each propagation type, refer to
		                	 <link
		                	linkend="core_spring_transaction_declarative_reference">[Reference]
		                	Propagation Behavior, Isolation Level</link> in this manual.
		                	
		             	</entry>
		              </row>
		              <row>
		                <entry>
		                  <emphasis role="bold">readOnly</emphasis>
		                </entry>
		                <entry>Handles all transactions as Read-only. (Default = false)</entry>
		              </row>
		              <row>
		                <entry>
		                  <emphasis role="bold">rollbackFor</emphasis>
		                </entry>
		                <entry>Executes rollback for defined Exception list.</entry>
		              </row>
		              <row>
		                <entry>
		                  <emphasis role="bold">rollbackForClassName</emphasis>
		                </entry>
		                <entry>Defines Exception list to execute rollback by using string not class object.</entry>
		              </row>
		              <row>
		                <entry>
		                  <emphasis role="bold">timeout</emphasis>
		                </entry>
		                <entry>Executes rollback if the relevant method execution was not complete in the given time.
		                If -1,  no
		                timeout (Default = -1).
		      </entry>
		              </row>
		            </tbody>
				</tgroup>
		      </informaltable>
		    </section>
		    
		    <section id="core_spring_transaction_declarative_annotation_testclass">
	        <title>Test class run</title>
	        	<para>
					For test on Transaction Management method by using Annotation defined in MovieServiceImpl class level,
					refer to org.anyframe.sample.transaction.Main.java, basic sample execution code.
				</para>
	      	</section>
	    </section>
	    
	    <section id="core_spring_transaction_declarative_xml">
      	<title>Transaction Management by using XML definition</title>
      	
	      	<section id="core_spring_transaction_declarative_xml_configuration">
	        <title>Configuration</title>

				<para>
      		  		Defines the property of Transaction service by referring to 
      		  		this Core Plugin >> Spring >> <link linkend="core_spring_transaction">Transaction Management</link>.
      		  		The following is a part of context-transaction-jta.xml, configuration file of JTATransactionManager,
      		  		and defines TransactionManager which plays an actual role of Transaction Management.
      		  		
        			<programlisting language="xml"><![CDATA[<bean id="oracleTransactionManagerDataSource" 
      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      <property name="dataSource"><ref bean="oracle_datasource"/></property>
</bean>]]></programlisting>
				</para>
      		</section>
	
			<section id="core_spring_transaction_declarative_xml_managementtaget">
        	<title>Transaction Management target definition </title>

				<para>
		        	
		        	<![CDATA[Define Advice and Pointcut by using <tx:advice> and <aop:config> like   
           Spring configuration XML(context-user-aop.xml) below.
		        	Note that to use <tx:advice> and <aop:config>, defintion on tx, aop
		      		namespace in needed.]]>
		        	
	        		<programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]]>
    <emphasis role="bold">xmlns:aop="http://www.springframework.org/schema/aop"</emphasis>
    <emphasis role="bold">xmlns:tx="http://www.springframework.org/schema/tx"</emphasis>
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    <emphasis role="bold">http://www.springframework.org/schema/aop </emphasis>
    <emphasis role="bold">http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</emphasis>
    <emphasis role="bold">http://www.springframework.org/schema/tx</emphasis> 
    <emphasis role="bold">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"</emphasis><![CDATA[>

<tx:advice id="txAdvice" ]]><emphasis role="bold">transaction-manager="oracleTransactionManagerDataSource"</emphasis><![CDATA[>
    <tx:attributes>
        <!-- If case of EmpException during method execution, rollback is not executed. -->
        <]]><emphasis role="bold">tx:method name="*" no-rollback-for="org.anyframe.sample.transaction.MovieException"/</emphasis><![CDATA[>
    </tx:attributes>
</tx:advice>

<aop:config>
    <!-- pointcut definition : when calling all methods of UserServiceImplWithXML class -->
    <aop:pointcut id="movieServiceOperations" 
        expression=
            "execution(* org.anyframe.sample.transaction.moviefinder.service.impl.MovieServiceImpl.*(..))"/>
    <!-- advice definition : refer to advice defined using the above tx tag -->
    <aop:advisor advice-ref=]]><emphasis role="bold">"txAdvice"</emphasis> pointcut-ref=<emphasis
            role="bold">"userServiceOperations"</emphasis><![CDATA[/>
</aop:config>]]></programlisting>
				</para>

       			<para>
	       			<![CDATA[As in the samle xml above, the following property can be assigned to <tx:method>,
	       			subtage of <tx:advice>, for Transaction Management.
	       			 ]]>
			        <informaltable>
			            <tgroup cols="2">
			                <colspec colnum="1" colname="col1" colwidth="3*"/>
			                <colspec colnum="2" colname="col2" colwidth="7*"/>
			              <thead>
			                <row>
			                  <entry align="center">Property</entry>
			
			                  <entry align="center">Description</entry>
			                </row>
			              </thead>
			
			              <tbody>
			                <row>
			                  <entry>name</entry>
			                  <entry>Method name. Can use wild card. </entry>
			                </row>
			                <row>
			                  <entry>
			                    <emphasis role="bold">isolation</emphasis>
			                  </entry>
			                  <entry>
			                  	Element defining isolation level of transaction.
			                  	If not defined separately, it follows the Isolation Level of DB.
			                  	Can select among DEFAULT, READ_COMMITTED, READ_UNCOMMITTED,
			                  	REPEATABLE_READ, SERIALIZABLE and define.
			                  	(Default = DEFAULT) For more details on each Isolation level,
			                  	refer to <link url="core_spring_transaction_declarative_reference">[Reference] Propagation
			                  	Behavior, Isolation Level</link> in this page.
			                  </entry>
			                </row>
			                <row>
			                  <entry>
			                    <emphasis role="bold">no-rollback-for</emphasis>
			                  </entry>
			                  <entry>Does not execute rollback for defined Exception list.</entry>
			                </row>
			                <row>
			                  <entry>
			                    <emphasis role="bold">propagation</emphasis>
			                  </entry>
			                  <entry>
			                  		Element to define the propagation type of transaction.
		                	Can select among MANDATORY,
			                  	NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW,
			                  	SUPPORTS and define.(Default = REQUIRED) For more details on each propagation type, refer to
		                	  <link
			                  	url="core_spring_transaction_declarative_reference">[Reference] Propagation Behavior,
			                  	Isolation Level</link> in this manual.
			                 
			                 </entry>
			                </row>
			                <row>
			                  <entry>
			                    <emphasis role="bold">read-only</emphasis>
			                  </entry>
			                  <entry>Handles all transactions as Read-only. (Default = false)</entry>
			                </row>
			                <row>
			                  <entry>
			                    <emphasis role="bold">rollback-for</emphasis>
			                  </entry>
			                  <entry>Executes rollback for defined Exception list. </entry>
			                </row>
			                <row>
			                  <entry>
			                    <emphasis role="bold">timeout</emphasis>
			                  </entry>
			                  <entry>
			                  	Executes rollback if the relevant method execution was not complete in the given time.
		                If -1,  no
		                timeout (Default = -1).
			                  
			                  </entry>
			                </row>
			              </tbody>
			            </tgroup>
					</informaltable>
	          	</para>
			</section>
		<section id="core_spring_transaction_declarative_xml_testclass">
	        <title>Test class run</title>
	
		        <para>
		        	Test on Transaction Management way using xml definition is based on the Transaction Management property defined
		        	in updateUserList method of context-user-aop.xml.
		        	For details on composition of test class, refer to 
		        	<link linkend="core_spring_transaction_declarative_testcase">Details on test case </link>
		        	and for more detailed code, refer to UserServiceWithXMLTest.
		        
		        </para>
	      	</section></section>
		
			 	
     	<section id="core_spring_transaction_declarative_reference">
      	<title>[Reference] Propagation Behavior, Isolation Level</title>

      		<para>
      			Now, let's have a look at Propagation Behavior and Isolation
      			Level in detail which can define transaction as property value.
      		
      		</para>
			
			<section id="core_spring_transaction_declarative_reference_propagation">
        	<title>Propagation Behavior</title>

        		<para>
        			Propagation Behavior is used to define the rule of Transaction Propagation. </para>
		        <informaltable>
		          <tgroup cols="2">
		                <colspec colnum="1" colname="col1" colwidth="4*" />
		                <colspec colnum="2" colname="col2" colwidth="6*" />
		            <thead>
		              <row>
		                <entry align="center">Attribute Name</entry>
		                <entry align="center">Description</entry>
		              </row>
		            </thead>
		            <tbody>
		              <row>
		                <entry>PROPAGATION_MADATORY</entry>
		                <entry>
					      Method must be executed within transaction. Without transaction, exception occurs.       
					            
					    </entry>
		              </row>
		              <row>
		                <entry>PROPAGATION_NESTED</entry>
		                <entry>
			                If there is transaction, method is executed in the format of nested transaction
			                in the existing transaction, and commit and rollback is possible by nested transaction itself.
			                If there is no transaction, behaves as PROPAGATION_REQUIRED.
			               
			      		</entry>
		              </row>
		              <row>
		                <entry>PROPAGATION_NEVER</entry>
		                <entry>
		                	Must be executed without transaction context.
		                	With transaction, exception occurs.
		                	
		                </entry>
		              </row>
		              <row>
		                <entry>PROPAGATION_NOT_SUPPORTED</entry>
		                <entry>
		                	Executes method without transaction.
		                	If there is existing transaction, suspended for a while until the method which called this transaction is over.
		                	.
		                </entry>
		              </row>
		              <row>
		                <entry>PROPAGATION_REQUIRED</entry>
		                <entry>
		                	Method must be executed within transaction context.
		                	If there is existing transaction, executed within the existing transaction,
		                	and if not, creates new transaction.
		                	
		                </entry>
		              </row>
		              <row>
		                <entry>PROPAGATION_REQUIRED_NEW</entry>
		                <entry>
		                	Called method executes its own transaction, and existing transactions are put on hold.
		                	
		                </entry>
		              </row>
		              <row>
		                <entry>PROPAGATION_SUPPORTS</entry>
		                <entry>
		                	Although new transaction is not needed, if there is existing transaction,
		                	method is executed within transaction.
		                	
		                </entry>
		              </row>
		            </tbody>
		          </tgroup>
		        </informaltable>
      		</section>
      		
      		<section id="core_spring_transaction_declarative_reference_isoation">
        	<title>Isolation Level</title>

        		<para>
        			The default Isolation level in most databases.
        			It also refers to the level of protection of various transactions from other transactions.
        			For example, if one user modifies certain data, access to the data by other users are blocked, thereby
        			providing complete data only for users.
        			In addition, if a user cannot develop statistical data due to modification process by many users,
        			Isolation Level can be modified for the user to be able to execute Read task.
        		
        			<informaltable>
						<tgroup cols="2">
			            	<colspec colnum="1" colname="col1" colwidth="4*" />
			                <colspec colnum="2" colname="col2" colwidth="6*" />
			              <thead>
			                <row>
			                  <entry align="center">Attribute Name</entry>
			                  <entry align="center">Description</entry>
			                </row>
			              </thead>
			              <tbody>
			                <row>
			                  <entry>ISOLATION_DEFAULT</entry>
			                  <entry>Default Isolation level for independent PlatformTransactionManager</entry>
			                </row>
			                <row>
			                  <entry>ISOLATION_READ_COMMITTED</entry>
			                  <entry>
								Method using this isolation level cannot read uncommitted data.
								Write Lock cannot get data already modified by transaction.
								Therefore, uncommitted data under search is impossible.
								This level is the default Isolation level in most databases.
								
			                  </entry>
			                </row>
			                <row>
			                  <entry>ISOLATION_READ_UNCOMMITTED</entry>
			                  <entry>
			                  	The lowest level of transaction.
			                  	Method using this isolation level can read uncommitted data.
			                    We cannot know from this isolation level, however, whether new record has been added.
			              
			                  </entry>
			                </row>
			                <row>
			                  <entry>ISOLATION_REPEATABLE_READ</entry>
			                  <entry>
			                  	Isolation level which is slightly more strict than ISOLATION_READ_COMMITED.
			                  	This level means that if another transaction adds new data, it can search the newly added one.
			                
			                  </entry>
			                </row>
			                <row>
			                  <entry>ISOLATION_SERIALIZABLE</entry>
			                  <entry>
			                  	The highest level of isolation.
			                  	All transactions (including read) process is very slow as it is needed to wait whenever new line is executed.
			                  	Method using this isolation level get exclusive Write Lock on data, thereby blocking 
			                  	other transaction handling from READ, UPDATE, CREATION data until transaction is finished.
			                  	Costs the most but provides reliable isolation level.
			                 
			                  </entry>
			                </row>
			              </tbody>
						</tgroup>
					</informaltable>
				</para>
  	    	</section>
		</section><section id="core_spring_transaction_declarative_testcase">
    	<title>Test case details</title>

      	<para>
      		The following is a part of test class composed of the same logic to test above-mentioned 
      		<link linkend="core_spring_transaction_declarative_annotation">
      		Transaction Management using Annotation</link> , <link linkend="core_spring_transaction_declarative_xml">
      		Transaction Management using XML definition</link> method.
      		testUpdateMovieWithNotExistUser method of each test class calls updateMovieList method of MovieService.
      		The first input parameter of updateMovieList method is recognized as a new movie, and the second one as a movie to modify.
      		Therefore, if the first input parameter returns a new movie while the second one is a movie who does not exist,
      		then when you try to modify the second specific user information after adding the new movie successfully,
      		as the movie with the relevant ID does not exist, modification will fail.
      		Newly added movie information must be committed without rollback by transaction property defined in updateMovieList method of MovieService.
      		
      		 <programlisting language="java">public void testUpdateMovieWithNotExistMovie() throws Exception {
    Movie newMovie = getMovie();
    String newMovieID = newMovie.getMovieId();
    Movie updateMovie = movieService.get("MV-00003");
    // Modify to user ID that does not exist
    updateMovie.setMovieId("MV-11111");
    updateMovie.setTitle("TEST Movie");
    
    try {
        // set new user information and to-modify user information as parameter 
        <emphasis role="bold">movieService.updateMovieList(newMovie, updateMovie);</emphasis>
        //If error does not occur during the relevant method execution, fail.
        fail("fail to get user.");
    } catch (Exception e) {
        try {
            //Search user information with the new user ID
            <emphasis role="bold">Movie movie =  movieService.get(newMovieID);</emphasis>
            assertNotNull("fail to commit.", movie);
        } catch (Exception ie) {
			// Although modification of user information failed, according to Annotation definition,
			// newly added user information must be committed. 		
            fail("fail to trnasaction management.");
        }
    }
}</programlisting></para>
	</section></section>
     
     	
		
		
	
	<section id="core_spring_transaction_programmatic">
    <title>Programmatic Transaction Management</title>

    	<para>
    		Now, let's have a look at how to directly manage transaction in case that detailed transaction control is needed.
    		Spring provides two Programmatic Transaction Management ways as the following.
    		
    	</para>
    	
    	<section id="core_spring_transaction_programmatic_template">
      	<title>Transaction Management using TransactionTemplate</title>
      	
      		<section id="core_spring_transaction_programmatic_template_configuration">
        	<title>Configuration</title>

        		<para>
        			To manage transaction by using TransactionTemplate, configuration on Transaction Service and TransactionTemplate is needed.
        			The following is a part of TransactionTemplate configuration file(context-transaction-template.xml),
        			which requires the definition of transactionManager property.
        		
					<programlisting language="xml"><![CDATA[<bean id="transactionTemplate" 
      class="org.springframework.transaction.support.TransactionTemplate">
	<property name="transactionManager" ref="oracleTransactionManagerDataSource"/>
</bean>]]></programlisting>
				</para>

		        <para>
		        	The following is Transaction Service configuration xml file(context-transaction-datasource-oracle.xml),
		        	and defines TransactionManager which plays an actual role of Transaction Management.
		        	
        			<programlisting language="xml"><![CDATA[<bean id="oracleTransactionManagerDataSource" 
      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource"><ref bean="oracle_datasource"/></property>
</bean>]]></programlisting>
				</para>

       			<para>
       				When defining the property of Transaction Service,
       				refer to this Core Plugin >> Spring >> <link linkend="core_spring_transaction">Transaction Management</link>.
       			
     			</para>
			</section>
			
			<section id="core_spring_transaction_programmatic_template_management">
        	<title>Transaction Management</title>

        		<para>
        			In case of Programmatic Transaction Management by using TransactionTemplate,
        			define callback method to be called by Transaction Context and implement business logic in this method.
        			<programlisting language="java"><emphasis
        			role="bold">this.transactionTemplate.execute(new TransactionCallbackWithoutResult()</emphasis> {                
  <emphasis role="bold">public void doInTransactionWithoutResult(TransactionStatus status)</emphasis> {                    
  //... biz. logic ...       
}});

<emphasis role="bold">this.transactionTemplate.execute(new TransactionCallback()</emphasis> {                
  <emphasis role="bold">public Object doInTransaction(TransactionStatus status)</emphasis> {                    
  //... biz. logic ...       
}});
</programlisting>
				</para>

        		<para>
        			callback method doInTransactionWithoutResult() can be defined when return value does not exist.
        			If return value exists, define as doInTransaction().
        			In addition, by calling setRollbackOnly() method of TransactionStatus object parameter in callback method,
        			it is possible to rollback the relevant transaction.
        			
        		</para>
      		</section>
      		
      		<section id="core_spring_transaction_programmatic_template_testclass">
      		<title>Test class run</title>

        	<para>
        		Test class MovieServiceWithProgrammaticTest calls addUser method of MovieService twice
        		by using same movie information.
        		At second call, as the movie information was already added, MovieException occurs.
        		Therefore, by using  transactionStatus of catch block, the modification occurred at the current transaction 
        		is rolled back.
        		The following is testAddMovieUsingTransactionTemplate method logic of test class MovieServiceWithProgrammaticTest.
        		 <programlisting
        		language="xml">public void testAddMovieUsingTransactionTemplate() throws Exception {
    TransactionTemplate transactionTemplate = (TransactionTemplate) context
                                        .getBean("transactionTemplate");
    final MovieService movieService = (MovieService) context
                                        .getBean(MovieService.ROLE);

    <emphasis role="bold">transactionTemplate.execute(new TransactionCallbackWithoutResult()</emphasis> {
        <emphasis role="bold">public void doInTransactionWithoutResult(TransactionStatus status)</emphasis> {

            try {
                //1. Set Movie
                Movie newMovie = getMovie();
                newMovieID = newMovie.getMovieId();
        
                // 2. Request movie create.
                movieService.create(newMovie);
        
                // 3. Request the same movie add.
                movieService.create(newMovie);
                
            } catch (MovieException e) {
                // 4. Rollback handling on modification occurred at current transaction. 
                <emphasis role="bold">status.setRollbackOnly();</emphasis>
            }
        }
    }

    try {
        // 5. Check whether user add handling was rolled back. 
        movieService.get(newMovieID);
        
        // 6. If rollback was executed successfully, the relevant movie was not added.
        throw new Exception("fail to transaction management.");
    } catch (MovieException e) {
        System.out.println("Successful!");
    }
}
</programlisting>
</para>
      		</section>
		</section>
		
		<section id="core_spring_transaction_programmatic_transactionmanager">
     	<title>Transaction Management using TransactionManager directly</title>

      		<section id="core_spring_transaction_programmatic_transactionmanager_configuration">
        	<title>Configuration</title>

        		<para>
	        		The following is Transaction Service configuration xml (context-transaction-datasource-oracle.xml) file
	        		and defines TransactionManager which plays an actual role of Transaction Management.
	        		
	        		<programlisting language="xml"><![CDATA[<bean id="oracleTransactionManagerDataSource" 
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource"><ref bean="oracle_datasource"/></property>
</bean>]]></programlisting>
				</para>

				<para>
					For Transaction Service configuration,
					refer to 
					this Core Plugin >> Spring >> <link linkend="core_spring_transaction">Transaction Management</link>.
				
        		</para>
      		</section>

      		<section id="core_spring_transaction_programmatic_transactionmanager_management">
			<title>Transaction Management</title>

		        <para>
		        	After directly getting Transaction Service, use Transaction service in 'try~catch' block as the following
		        	and execute begin, commit, rollback properly.
		        	In this case, use TransactionDefinition and
	        		TransactionStatus properly.
		        	
					<programlisting language="java">...
DefaultTransactionDefinition def = new DefaultTransactionDefinition();
def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
TransactionStatus status = transactionService.getTransaction(def);
    try {
    // ... biz logic ...
    <emphasis role="bold">transactionService.commit(status);</emphasis>
    }
    catch (Exception ex) {
    <emphasis role="bold">transactionService.rollback(status);</emphasis>
    throw ex;
    }
...</programlisting>
				</para>
      		</section>

     		<section id="core_spring_transaction_programmatic_transactionmanager_testclass">
     		<title>Test class run</title>

			<para>
				Test class UserServiceWithProgrammaticTest calls addUser method of UserService twice
        		by using same user information.
				At second call, as the user information was already registered, EmpException occurs.
				Therefore, by using  TransactionStatus of catch block, the modification occurred at the current transaction 
        		is rolled back.
        		The following is testAddUserUsingTransactionManager method logic of test class UserServiceWithProgrammaticTest.
        		
		       	<programlisting language="java">public void testAddMovieUsingTransactionManager() throws Exception {
    DefaultTransactionDefinition txDefinition = new DefaultTransactionDefinition();
    // Defining Propagation Behavior, Isolation Level, etc. for the relevant transaction 
    txDefinition
                .setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
    TransactionStatus status = transactionService
                .getTransaction(txDefinition);
    String newMovidId = "";

    try {
        //1. Set Movie
        Movie newMovie = getMovie();
        newMovidId = newMovie.getMovieId();

        // 2. Request Movie create
        movieService.create(newMovie);
        
        //3. equest the same movie add.
        movieService.create(newMovie);

        //4. If handled properly, commit the modification occurred at current transaction.
        <emphasis role="bold">transactionService.commit(status);</emphasis>
    } catch (Exception e) {
    	// 5.  Rollback handling on modification occurred at current transaction
        transactionService.rollback(status);
    }

    try {
        // 6. Check whether movie add handling was rolled back.
        movieService.get(newMovidId);
    	
        // 7. If rollback was executed successfully, the relevant movie was not added.
       fail("fail to transaction management.");
    } catch (Exception e) {
        assertTrue("fail to rollback.", e instanceof Exception);
    }
}</programlisting>
				</para>
			</section>
		</section>
	</section>
	
	<section id="core_spring_transaction_resources">
	<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem><para>Download</para>
					<para>
						Download hsqldb.zip file which contains test DB and anyframe-sample-transaction.zip which contains sample code
						and then extract them in the following.
						Then, execute start.cmd (or start.sh) file in hsqldb folder and start test DB.
					
						<itemizedlist>
							<listitem>
								<para>Maven-based run</para>
								<para>
									After moving to extracted directory in the command window,
									execute 'mvn compile exec:java -Dexec.mainClass=...' command and check the result.
									Refer to JavaDoc of Main class in each Eclipse project.
								</para>
							</listitem>
							<listitem>
								<para>Eclipse-based run</para>
								<para>
									After importing extracted directory at Eclipse,
									select Main.Java under anyframe/sample/transaction of src/main/java
									and click mouth right button, and then click Run As > Java Application on context menu.
									Then, check the execution result.
								</para>
							</listitem>									
						</itemizedlist>
					</para>
					<table>
						<title>Download List</title>
							<tgroup cols="2">
								<colspec colnum="1" colname="col1" colwidth="4*"/>
								<colspec colnum="2" colname="col2" colwidth="6*"/>
								<thead>
									<row>
										<entry align="center">Name</entry>
										<entry align="center">Download</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="center">hsqldb.zip</entry>
										<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.0.1/reference/sample/hsqldb.zip">Download</ulink></entry>
									</row>										
									<row>
										<entry align="center">anyframe-sample-transaction.zip</entry>
										<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.0.1/reference/sample/anyframe-sample-transaction.zip">Download</ulink></entry>
									</row>
								</tbody>
							</tgroup>
						</table> 
				</listitem>
				<listitem>
					<para>Reference</para>
					<itemizedlist>
						<listitem><para><ulink url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html">Transaction management manual</ulink></para></listitem>
						<listitem><para><ulink url="http://www.oracle.com/technology/tech/java/spring/jta_spring_article.pdf">Bringing Advanced Transaction Management Capabilities to Spring Applications</ulink></para></listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</para>
	</section>
</chapter>