<chapter id="core_spring_spel">
	<title>SpEL(Spring Expression Language)</title>
	<para>
		Spring Expression Language(SpEL) newly introduced in Spring 3
		is one of Expression Languages and support the access or handling of specific object during runtime.
		Syntax is similar to Unified EL, but additional function is provided.
		In addition, SpEL is utilized as the basis of  Expression Evaluation in all internal projects of Spring.
		In this section, we will have a look at how to utilize SpEL when defining bean based on  XML/Annotation,
		and how to evaluate defined Expression  by using Expression Interface provided in Spring.
		For Syntax to define Expression based on Spring,
		refer to <link linkend="core_spring_spel_language">Language Reference</link>.
	
	</para>
	
	<section id="core_spring_spel_bean">	
		<title>Bean Definition using SpEL</title>
		<para>
			When defining XML/Annotation bean in Spring, SpEL can be utilized in #{expression} format.
		</para>
		<section id="core_spring_spel_bean_xml">
			<title>XML based Bean Definition</title>
			<para>
				The following is a part of context-transaction.xml, Spring configuration file 
				which was newly added by Core Plugin installation
				and defines dataSource Bean by utilizing SpEL.
				You can see that by loading context.properties file existing on classpath and define it to be managed at 'contextProperties' bean,			
    dataSource Bean access contextProperties Bean and extracts property on url, username, password,
    thereby property setting of the datasource bean.
				dataSource Bean access contextProperties Bean and extracts property on url, username, password,
				thereby property setting of the relevant bean.
			</para>			
			<programlisting language="xml"><![CDATA[
<util:properties id="contextProperties" location="classpath:context.properties"/>
 	
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value=]]><emphasis role="bold">"#{contextProperties.driver}"</emphasis><![CDATA[/>
    <property name="url" value=]]><emphasis role="bold">"#{contextProperties.url}"</emphasis><![CDATA[/>
    <property name="username" value=]]><emphasis role="bold">"#{contextProperties.username}"</emphasis><![CDATA[/>
    <property name="password" value=]]><emphasis role="bold">"#{contextProperties.password}"</emphasis><![CDATA[/>
</bean>]]></programlisting>
			<para>
				When trying to extract the value of system variable as internal variable name defined in SpEL, 'systemProperties'
				can be utilized as the format of  #{systemProperties[...]}.
				In other words, if above-mentioned DB property was set as system variable of 'Driver, URL, UserName, Password',
				property of dataSource Bean can be modified as the following.
			</para>
			<programlisting language="xml"><![CDATA[
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value=]]><emphasis role="bold">"#{systemProperties['Driver']}"</emphasis><![CDATA[/>
    <property name="url" value=]]><emphasis role="bold">"#{systemProperties['URL']}"</emphasis><![CDATA[/>
    <property name="username" value=]]><emphasis role="bold">"#{systemProperties['UserName']}"</emphasis><![CDATA[/>
    <property name="password" value=]]><emphasis role="bold">"#{systemProperties['Password']}"</emphasis><![CDATA[/>
</bean>]]></programlisting>			
		</section>
		
		<section id="core_spring_spel_bean_annotation">
			<title>Annotation based Bean Definition</title>
			<para>
				When defining Annotation bean in Spring, unlike XML,
				Expression must be defined along with '@Value' annotation, which can be applied to  field, method, 
				method/constructor argument.
			</para>
			<para>
				The following is a part of DAO class ~/service/impl/MovieDao.java newly added by Foundataion Plugin installation,
				and shows that pageSize, pageUnit property of  MovieDao Bean was set by utilizing SpEL.
				By extracting 'pageSize', 'pageUnit' information from contextProperties Bean,
				the value of relevant field will be set and utilized. 
			</para>	
			<programlisting language="java">@Repository("coreMovieDao")
public class MovieDao extends SimpleJdbcDaoSupport  {
    <emphasis role="bold">@Value("#{contextProperties['pageSize'] ?: 10}")</emphasis>
    int pageSize;

    <emphasis role="bold">@Value("#{contextProperties['pageUnit'] ?: 10}")</emphasis>
    int pageUnit;

    @Inject
    public void setJdbcDaoDataSource(DataSource dataSource) {
        super.setDataSource(dataSource);
    }

    ...
}</programlisting>
			<para>
				The code above defines Expression by utilizing Elvis Operator,
				and requests that if a bean named 'contextProperties' does not have 'pageSize' value, 
				default value will be set as '10'.
			</para>
			<para>
				When defining Annotation bean, like XML, 
				the value of system variable can be extracted by utilizing 'systemProperties'.
			</para>
		</section>			
	</section>
	
	<section id="core_spring_spel_evaluation">
		<title>Expression Evaluation using Spring's Expression Interface</title>
		<para>
			org.springframework.expression.ExpressionParser parses defined expression and returns 
			in the format of 'org.springframework.expression.Expression'.
			And org.springframework.expression.Expression plays a role of executing Expression Evaluation parsed above.
			
		</para>
		<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
Expression expression = parser.parseExpression("'Hello Anyframe'");
String stringVal = (String)expression.getValue();</programlisting>
		<para>
			Therefore, Expression object after executing above code will evaluate defined Literal Expression "'Hello Anyframe'"
			and assign 'Hello Anyframe' to 'stringVal'.
			If you want to get evaluated value in specific type class, 
			you can define class type by parameter of getValue() method call.
		</para>
		<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
Expression expression = parser.parseExpression("'Hello Anyframe'");
String stringVal = expression.getValue(String.class);</programlisting>		
		<para>
			SpEL provides two methods for accessing or modifying property of specific object by defined Expression Evaluation.
			Now, let's take a look at logic accessing 'nowPlaying' property from Movie object through Expression.
		</para>
		<para>
			The following code utilizes org.springframework.expression.spel.support.StandardEvaluationContext object
			which set Movie object when calling getValue() of Expression.
			Therefore, Expression Evaluation will occur based on EvaluationContext.
			In the case that the the evaluating object must be frequently changed, however,
			SpelExpressionParser() creation logic must be implemented whenever the relevant object is changed, hence not recommended.
		</para>
		<programlisting language="java">Movie movie = getGenre().getMovies().get(0);
StandardEvaluationContext context = new StandardEvaluationContext(movie);

ExpressionParser parser = new SpelExpressionParser();
String playing = parser.parseExpression("nowPlaying").<emphasis role="bold">getValue(context, String.class)</emphasis>;</programlisting>
		<para>
			The following directly utilizes Movie object when calling getValue() method of Expression.
			In this case, EvaluationContext will be created and managed internally at every Expression Evaluation.
			This method can be used when evaluating object is changed frequently.
			
		</para>
		<programlisting language="java">Movie movie = getGenre().getMovies().get(0);
ExpressionParser parser = new SpelExpressionParser();
String playing = parser.parseExpression("nowPlaying").<emphasis role="bold">getValue(movie, String.class)</emphasis>;</programlisting>		
		<para>
			However, SpEL recommends to use the first-mentioned method for the following reasons.
			
		</para>
		<itemizedlist>
     		<listitem>
     			<para>Cost of EvalutionContext creation and composition is relatively expensive.
     		</para>
     		</listitem>
     		<listitem>
     			<para>As EvalutionContext executes caching status information, Expression Evaluation can be executed faster when reusing.
     			</para>
     		</listitem>
     	</itemizedlist>		
	</section>	
	
	<section id="core_spring_spel_language">
		<title>Language Reference</title>
		<para>
			Now, let's have a look at how to define various formats of Spring Expression and example codes.
		</para>
		<section id="core_spring_spel_language_literal">
			<title>Literal Expressions</title>
			<para>
				Defined string can be modified to String, Date, Number, boolean, null type and returned.
				In the case of String type, it was defined using single quote(').
				The following is a test method of logic modifying various strings to designated type by utilizing Spring ExpressionParser.
			</para>
			<programlisting language="java">public void evaluateLiteralExpression() throws Exception {
    ExpressionParser parser = new SpelExpressionParser();
    String stringVal = (String) parser.parseExpression("'Hello Anyframe'").getValue();
    System.out.println("[Literal Expression] Evaluate 'Hello Anyframe' : " + stringVal);

    double doubleVal = (Double) parser.parseExpression("6.0221415E+23").getValue();
    System.out.println("[Literal Expression] Evaluate '6.0221415E' : " + doubleVal);

    Date dateVal = (Date) parser.parseExpression("'2010/07/05'").getValue(Date.class);
    System.out.println("[Literal Expression] Evaluate '2010/07/05' : " + dateVal);

    boolean booleanVal = (Boolean) parser.parseExpression("true").getValue();
    System.out.println("[Literal Expression] Evaluate 'true' : " + booleanVal);

    Object nullVal = parser.parseExpression("null").getValue();
    System.out.println("[Literal Expression] Evaluate null : " + nullVal);
}</programlisting>
			<para>
				Execution result of the method above will be shown as the following.
			</para>				
			<programlisting language="java">[Literal Expression] Evaluate 'Hello Anyframe' : Hello Anyframe
[Literal Expression] Evaluate '6.0221415E' : 6.0221415E23
[Literal Expression] Evaluate '2010/07/05' : Mon Jul 05 00:00:00 KST 2010
[Literal Expression] Evaluate 'true' : true
[Literal Expression] Evaluate null : null</programlisting>
		</section>
		
		<section id="core_spring_spel_language_list">
			<title>Properties, Arrays, Lists, Maps, Indexers</title>
			<para>
				To access internal object list which objects such as Properties, Arrays, List, Map,etc. have,
				Expression in ['index'] or ['key'] can be defined.
				In addition, by using period(.), it is possible to access internal object property.
				(When accessing property of specific object, the first letter of property name is Case Insensitive.)
				The following is a test method that extracts title value of first Movie information from java.util.ArrayList type movies
				which is contained in Genre object.
			</para>
			<programlisting language="java">public void evaluateListExpression() throws Exception {
    Genre genre = getGenre();
    StandardEvaluationContext context = new StandardEvaluationContext(genre);

    ExpressionParser parser = new SpelExpressionParser();
    String title = parser.parseExpression(<emphasis role="bold">"movies[0].Title"</emphasis>).getValue(context, String.class);
    System.out.println("[List Expression] Movie title : " + title);
}</programlisting>
			<para>
				If the test data Genre which method above is utilizing is composed of 
				[<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>] format,
				 'Shrek (2001)', Title value of the first Movies information will be shown.
			</para>
			<programlisting language="java">[List Expression] Movie title : Shrek (2001)</programlisting>
		</section>	
		
		<section id="core_spring_spel_language_method">
			<title>Methods</title>
			<para>
				Designated method can be executed by utilizing general Java Syntax.
				The following is a part of test logic which executes substring() method by utilizing Spring ExpressionParser.
			</para>
			<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();			
String c = parser.parseExpression(<emphasis role="bold">"'abc'.substring(1)"</emphasis>).getValue(String.class);</programlisting>
			<para>
				If Expression is defined as above, 'bc' which is a substring result of specific string will be returned.
			</para>
		</section>
		
		<section id="core_spring_spel_language_relationalop">
			<title>Relational Operators</title>
			<para>
				Can utilize Relational Operator 
				such as equal('=='), not equal('!='), less than('<![CDATA[<]]>'), less than or equal('<![CDATA[<=]]>'), greater than('>'), and greater than or equal('>=').
				To avoid problems caused by using  <![CDATA[<]]> in xml,
				letters such as Relational Operators can also be used in expression.
				(case insensitive)
			</para>
			<programlisting language="java">lt ('<![CDATA[<]]>'), gt ('>'), le ('<![CDATA[<=]]>'), ge ('>='), 
eq ('=='), ne ('!='), div ('/'), mod ('%'), not ('!')</programlisting>
			<para>	
				Other than these,  'instanceof' and 'matches' based on Regular Expression  are also supported.
				The following is a part of test logic which executes Expression including  Relational Operator
				by utilizing Spring ExpressionParser.
			</para>
			<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
boolean falseValue = parser.parseExpression("2 <![CDATA[<]]> -5.0").getValue(Boolean.class);
boolean falseValue = parser.parseExpression("'xyz' instanceof T(int)").getValue(Boolean.class);
boolean trueValue = 
    parser.parseExpression("'5.00' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);</programlisting>
		</section>
		
		<section id="core_spring_spel_language_logicalop">
			<title>Logical Operators</title>
			<para>
				Can utilize Logical Operator such as and, or, not,etc.
				The following is a part of test logic which executes Expression including Logical Operator
				by utilizing Spring ExpressionParser.
			</para>
			<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
boolean falseValue = parser.parseExpression("true and false").getValue(Boolean.class);
boolean trueValue = parser.parseExpression("true or false").getValue(Boolean.class);
boolean falseValue = parser.parseExpression("!true").getValue(Boolean.class);</programlisting>
		</section>		
		
		<section id="core_spring_spel_language_mathematicalop">
			<title>Mathematical Operators</title>
			<para>
				Can utilize Mathematical Operator such as +, -, *, /, %, ^,etc.
				The following is a part of test logic which executes Expression including Mathematical Operator
				by utilizing Spring ExpressionParser.
			</para>
			<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
String testString = 
    parser.parseExpression("'test' + ' ' + 'string'").getValue(String.class);			
int two = parser.parseExpression("1 + 1").getValue(Integer.class);	
int minusTwentyOne = parser.parseExpression("1+2-3*8").getValue(Integer.class);</programlisting>
		</section>	
		
		<section id="core_spring_spel_language_assignment">
			<title>Assignment</title>
			<para>
				Can modify the property value of specific object to same to setter method execution
				by utilizing Assignment Operator('=').
				The following is a test method including logic which modifies 'Name' value of Genre object 
				to 'Animation' by utilizing  Assignment Operator.
			</para>
			<programlisting language="java">public void evaluateAssignmentExpression() throws Exception {
    Genre genre = getGenre();
    StandardEvaluationContext context = new StandardEvaluationContext(genre);

    ExpressionParser parser = new SpelExpressionParser();
    String genreName = parser.parseExpression(<emphasis role="bold">"Name = 'Animation'"</emphasis>)
        .getValue(context, String.class);
    System.out.println("[Assignment Expression] Genre Name : " + genreName);
}</programlisting>
			<para>
				If the test data Genre utilizing the method above is composed of 
				 [<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>],
				 'Name' value was 'Adventure' but value has been modified by utilizing Assignment Operator,
				 therefore, the execution result of the above method will be shown as the following.
			</para>
			<programlisting language="java">[Assignment Expression] Genre Name : Animation</programlisting>
		</section>		
		
		<section id="core_spring_spel_language_types">
			<title>Types</title>
			<para>
				To express special type class, 'T' Operator can be utilized.
				In addition, by using 'T' Operator, static method call of specific class is possible.
				In the case of class under java.lang package, there is no need to declare package separately.
				The following is a part of test logic which executes Expression including  'T' Operator
				by utilizing Spring ExpressionParser.
			</para>
			<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
Class dateClass = parser.parseExpression("T(java.util.Date)").getValue(Class.class);
Class stringClass = parser.parseExpression("T(String)").getValue(Class.class);
</programlisting>
		</section>
		
		<section id="core_spring_spel_language_constructor">
			<title>Constructors</title>
			<para>
				Can call constructor of specific class by utilizing 'new' Operator.
				Class name must be described in fully qualified format.
				(Exception. primitive-type class, java.lang package class)
				The following is a test method which contains logic creating new Genre object by calling Constructor of Genre class
				by utilizing 'new' Operator.
			</para>
			<programlisting language="java">public void evaluateConstructorExpression() throws Exception {
    ExpressionParser parser = new SpelExpressionParser();
    Genre genre = parser.parseExpression(
        <emphasis role="bold">"new anyframe.sample.domain.Genre('GR-01', 'Action')"</emphasis>)
        .getValue(Genre.class);
    System.out.println("[Constructor Expression] Genre Id : "
        + genre.getGenreId() + ", Genre Name : " + genre.getName());
}</programlisting>
			<para>
				As a result of the above method execution, new Genre object will be created by Constructor call,
				and this Genre object will have value of GenreId : 'GR-01', GenreName : 'Action'.
				Therefore, the execution result of the method above will be shown as the following.
			</para>
			<programlisting language="java">[Constructor Expression] Genre Id : GR-01, Genre Name : Action</programlisting>
		</section>		
		
		<section id="core_spring_spel_language_variable">
			<title>Variables</title>
			<para>
				Can call setVariable() method of StandardEvaluationContext and define variable,
				and utilize defined variable as  #{variable name} format in Spring Expression.
				The following is a test method including logic which defines variable value of 'newName' as 'Animation'
				and modifying 'Name' property value of Genre object by utilizing #newName.
			</para>
			<programlisting language="java">public void evaluateVariablesExpression() throws Exception {
    Genre genre = getGenre();
    StandardEvaluationContext context = new StandardEvaluationContext(genre);
    <emphasis role="bold">context.setVariable("newName", "Animation");</emphasis>

    ExpressionParser parser = new SpelExpressionParser();
    parser.parseExpression(<emphasis role="bold">"Name = #newName"</emphasis>).getValue(context);
    System.out.println("[Variables Expression] Genre New Name : "
        + genre.getName());
}</programlisting>
			<para>
				If the test data Genre utilizing the method above is composed of 
				 [<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>],
				 'Name' value was 'Adventure' but value has been modified by utilizing #newName,
				 therefore, the execution result of the above method will be shown as the following.
			</para>
			<programlisting language="java">[Variables Expression] Genre New Name : Animation</programlisting>
			<para>
				Note that #this and #root are reserved words. #this is current evaluating object, and #root is root object set in Context.
			</para>
		</section>	
		
		<section id="core_spring_spel_language_function">
			<title>Functions</title>
			<para>
				Can call registerFunction() method of StandardEvaluationContext and register the method of specific class
				and utilize the relevant method in the format of #{method name} in Spring Expression.
				The following is a test method including logic which calls 'capitalize' method within org.springframework.util.StringUtils class
				in Spring Expression.
			</para>
			<programlisting language="java">public void evaluateFunctionExpression() throws Exception {
    StandardEvaluationContext context = new StandardEvaluationContext();
    <emphasis role="bold">context.registerFunction("capitalize", StringUtils.class
        .getDeclaredMethod("capitalize", new Class[] { String.class }));</emphasis>

    ExpressionParser parser = new SpelExpressionParser();
    String capitalizedString = parser.parseExpression(
        <emphasis role="bold">"#capitalize('hello anyframe')"</emphasis>)
        .getValue(context, String.class);
    System.out.println("[Function Expression] Capitalized String : "
        + capitalizedString);
}</programlisting>
			<para>
				As a result of execution of the method above, the first letter of 'hello anyframe' string 
				which was defined as a parameter of capitalize()
				will be capitalized and be shown as the following.
			</para>
			<programlisting language="java">[Function Expression] Capitalized String : Hello anyframe</programlisting>
		</section>	
		
		<section id="core_spring_spel_language_ternaryop">
			<title>Ternary Operator</title>
			<para>
				To execute if-then-else logic, Ternary Operator can be utilized.
				The following is a test method which applies Ternary Operator 
				to the result value of executing getNowPlaying() method of Movie object.
			</para>
			<programlisting language="java">public void evaluateTernaryOperatorExpression() throws Exception {
    Movie movie = getGenre().getMovies().get(0);
    StandardEvaluationContext context = new StandardEvaluationContext(movie);

    ExpressionParser parser = new SpelExpressionParser();
    String playing = parser.parseExpression(
        <emphasis role="bold">"getNowPlaying().equals('Y') ? 'playing' : 'not playing'"</emphasis>)
        .getValue(context, String.class);
    System.out
        .println("[Ternary Operator Expression] Movie 'Shrek (2001)' is " + playing);
}</programlisting>
			<para>
				If the test data Movie utilizing the method above is composed 
				of [<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>] format,
				as the value of getNowPlaying() of Movie object is 'N', 'not playing' string will be returned.
				Therefore, the execution result of the method above will be shown as the following.
			</para>
			<programlisting language="java">[Ternary Operator Expression] Movie 'Shrek (2001)' is not playing</programlisting>
		</section>		
		
		<section id="core_spring_spel_language_elvisop">
			<title>Elvis Operator</title>
			<para>
				Generally, when using Ternary Operator, variables are repetitively expressed as the following.
			</para>
			<programlisting language="java">ticketPrice!=null ? ticketPrice :'8000'</programlisting>
			<para>
				If you utilize Elvis Operator, a simplified format of Ternary Operator,
				Expression definition will become simpler.
				(Used in Groovy Language, and it is called 'Elvis Operator' as it looks similar to the hairstyle of Elvis.)
			</para>
			<programlisting language="java">ticketPrice ? :'8000'</programlisting>
			<para>
				The following is a test method which applies Elvis Operator to the value of execution result of getTicketPrice() method of Movie object.
			</para>
			<programlisting language="java">public void evaluateElvisOperatorExpression() throws Exception {
    Movie movie = getGenre().getMovies().get(1);
    StandardEvaluationContext context = new StandardEvaluationContext(movie);

    ExpressionParser parser = new SpelExpressionParser();
    int ticketPrice = parser.parseExpression(<emphasis role="bold">"getTicketPrice()?:'8000'"</emphasis>)
        .getValue(context, Integer.class);
    System.out
        .println("[Elvis Operator Expression] The ticket-price of 'Shrek (2001)' is "
        + ticketPrice);
}</programlisting>
			<para>
				If test data Movie utilizing the method above is composed of 
				[<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>] format,
				as the value of getTicketPrice() of Movie object is not set (in other words, having Null value),
				the execution result of Elvis Operator will return int type value named '8000'.
				Therefore, the execution result of the method above will be shown as the following.
			</para>
			<programlisting language="java">[Elvis Operator Expression] The ticket-price of 'Shrek (2001)' is 8000</programlisting>
		</section>	
		
		<section id="core_spring_spel_language_safenaviop">
			<title>Safe Navigation Operator</title>
			<para>
				Safe Navigation Operator used in Groovy Language can be utilized to prevent NullPointerException which occurs 
				in the cases of calling specific method or accessing properties for object with Null value.			
				The following is a test method which prevents NullPointerException from being thrown
				by utilizing Safe Navigation Operator when Genre in Movie object has Null value.
			</para>
			<programlisting language="java">public void evaluateSafeNavigationOperatorExpression() throws Exception {
    Movie movie = getGenre().getMovies().get(0);
    StandardEvaluationContext context = new StandardEvaluationContext(movie);

    ExpressionParser parser = new SpelExpressionParser();
    String name = parser.parseExpression(<emphasis role="bold">"genre?.Name"</emphasis>).getValue(context,
        String.class);
    System.out
        .println("[Save Navigation Operator Expression] The genre of 'Shrek (2001)' is "
        + name);

    <emphasis role="bold">movie.setGenre(null);</emphasis>
    name = parser.parseExpression(<emphasis role="bold">"genre?.Name"</emphasis>).getValue(context,
        String.class);
    System.out
        .println("[Safe Navigation Operator Expression] The genre of 'Shrek (2001)' is "
        + name);
}</programlisting>
			<para>
				If the test data Movie of the method above is composed of 
				 [<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>] format,
				 the execution result of the first Expression ("genre?.Name") will be  'Adventure'.
				 And, as shown in the middle of the code above,
				 if you modify the value of Genre of Movie object to Null and execute the second Expression ("genre?.Name"),
				 NullPointerException will not occur and null value will be returned, and then 
				 the execution result will be shown as the following.
			</para>
			<programlisting language="java">[Save Navigation Operator Expression] The genre of 'Shrek (2001)' is Adventure
[Safe Navigation Operator Expression] The genre of 'Shrek (2001)' is null</programlisting>
		</section>		
		
		<section id="core_spring_spel_language_collectionsel">
			<title>Collection Selection</title>
			<para>
				By utilizing Expression in ?[selectionExpression] format,
				Sub Collection relevant to the defined condition can be drawn from the target Collection object.
				In addition, ?^[selectionExpression] and ?$[selectionExpression] can utilize the first data and final data relevant to the defined condition
				respectively when drawing data.
				The following is a test logic including Collection Selection Expression which extracts Movie information whose runtime property value exceeds 90
				from java.util.ArrayList-type movies in Genre object.
			</para>
			<programlisting language="java">public void evaluateCollectionSelectionExpression() throws Exception {
    Genre genre = getGenre();
    StandardEvaluationContext context = new StandardEvaluationContext(genre);

    ExpressionParser parser = new SpelExpressionParser();
    List<![CDATA[<Movie>]]> movies = (List<![CDATA[<Movie>]]>) parser.parseExpression(
        <emphasis role="bold">"movies.?[Runtime > 90]"</emphasis>).getValue(context);

    System.out.println("[Collection Selection Expression] Movie title is "
        + movies.get(0).getTitle());
}</programlisting>
			<para>
				If test data Genre utilizing the method above is composed of 
				 [<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>] format,
				 as the number of Movie object whose runtime property value exceeds '90' is one,
				 the method execution result will be shown as the following.
			</para>
			<programlisting language="java">[Collection Selection Expression] Movie title is Avatar</programlisting>			
		</section>	
		
		<section id="core_spring_spel_language_collectionproj">
			<title>Collection Projection</title>
			<para>
				If you use Expression in ![projectionExpression] format,
				you can get new collection created by extracting the only information relevant to the target collection object.
				The following is a test method including Collection Projection Expression which extracts 'title' information only from 
				java.util.ArrayList-format movies in Genre object.
			</para>
			<programlisting language="java">public void evaluateCollectionProjectionExpression() throws Exception {
    Genre genre = getGenre();
    StandardEvaluationContext context = new StandardEvaluationContext(genre);

    ExpressionParser parser = new SpelExpressionParser();
    List<![CDATA[<String>]]> titleList = (List<![CDATA[<String>]]>) parser.parseExpression(
        "movies.![title]").getValue(context);

    System.out
        .println("[Collection Projection Expression] first movie title is "
            + titleList.get(0) + ", second movie title is " + titleList.get(1));
}</programlisting>
			<para>
				If the test data Genre utilizing the method above is composed of 
				[<link linkend="core_spring_spel_language_resource">test data : Genre <![CDATA[&]]> Movies</link>],
				new 'titleList' which was returned by extracting  'title' value only will have two Titles,
				and the method execution result will be shown as the following.
			</para>
			<programlisting language="java">[Collection Projection Expression] first movie title is Shrek (2001), second movie title is Avatar</programlisting>
		</section>	
		
		<section id="core_spring_spel_language_templating">
			<title>Expression Templating</title>
			<para>
				Expression Template supports that the combination of numerous Evaluation Blocks and defined strings.
				Each Evaluation Block can be defined by dividing into  prefix and suffix.
				To utilize Expression Template, it is needed to designate first parameter as Spring Expression and the second one as  ParserContext for Expression Templating
				when calling ExpressionParser.parseExpression() method.
				Spring Framework provides org.springframework.expression.common.TemplateParserContext
				which can be basically utilized,
				and TemplateParserContext designates '#{' as  prefix and '}' as suffix delimiter.
			</para>
			<programlisting language="java">public class TemplateParserContext implements ParserContext {
    public String getExpressionPrefix() { return "#{"; }
    public String getExpressionSuffix() { return "}"; }
    public boolean isTemplate() { return true; }
}</programlisting>
			<para>
				Therefore, if Expression is defined as the following,
				the value of randomPhrase will be like 'random number is ####'.
			</para>
			<programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
String randomPhrase = 
    parser.parseExpression("random number is #{T(java.lang.Math).random()}", 
    new TemplateParserContext()).getValue(String.class);</programlisting>
		</section>								
		
		<section id="core_spring_spel_language_resource">
			<title>test data : Genre <![CDATA[&]]> Movies</title>
			<para>
				Can get Genre object which is utilized for various Expression provided in SpEL by calling getGenre() method,
				and Genre object contains the following data.
				Basically, in addition to basic property, Genre contains java.util.ArrayList-type Movie list.
				Besides, Movie list contains relevant Genre object as well as basic property.
			</para>
			<programlisting language="java">private Genre getGenre() {
    Genre genre = new Genre();
    genre.setGenreId("GR-02");
    genre.setName("Adventure");

    ArrayList<![CDATA[<Movie>]]> movies = new ArrayList<![CDATA[<Movie>]]>();

    Movie movie = new Movie();
    movie.setGenre(genre);
    movie.setMovieId("MV-000001");
    movie.setTitle("Shrek (2001)");
    movie.setActors("Shrek");
    movie.setDirector("Andrew Adamson");
    movie.setReleaseDate(new Date());
    movie.setRuntime(90);
    movie.setTicketPrice(8000);
    movie.setNowPlaying("N");
    movies.add(movie);

    movie = new Movie();
    movie.setGenre(genre);
    movie.setMovieId("MV-000002");
    movie.setTitle("Avatar");
    movie.setActors("Sigourney Weaver");
    movie.setDirector("James Cameron");
    movie.setReleaseDate(new Date());
    movie.setRuntime(100);
    movie.setNowPlaying("Y");
    movies.add(movie);

    genre.setMovies(movies);

    return genre;
}</programlisting>
		</section>		
	</section>
  	<section id="core_spring_spel_resources">
  		<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>Download</para>
					<para>
						Download Eclipse project file which contains sample code in the following and extract the file.
					</para>
					<itemizedlist>
						<listitem>
							<para>Maven-based run</para>
							<para>
								After moving the extract project in the command window, 
								execute 'mvn compile exec:java -Dexec.mainClass=...' command and check the result.
								Refer to JavaDoc of Main class included in each Eclipse project.
							</para>
						</listitem>
						<listitem>
							<para>Eclipse-based run</para>
							<para>
								After importing extracted project in Eclipse,
								select Main.Java under src/main/java  folder, 
								then click mouse right button and click Run As > Java Application on the context menu.
								Then, check the execution result.
							</para>
						</listitem>									
					</itemizedlist>						
					<table>
						<title>Download List</title>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="4*"/>
							<colspec colnum="2" colname="col2" colwidth="6*"/>
							<thead>
								<row>
									<entry align="center">Name</entry>
									<entry align="center">Download</entry>
								</row>
							</thead>
							<tbody>										
								<row>
									<entry align="center">anyframe-sample-spel.zip</entry>
									<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.0.1/reference/sample/anyframe-sample-spel.zip">Download</ulink>
									</entry>
								</row>														
							</tbody>
						</tgroup>
					</table> 
				</listitem>
			</itemizedlist>
		</para>
	</section>	
</chapter>