<chapter id="core_spring_annotation">
	<title>Annotation</title>

	<para>
		Using Spring XML independently can sometimes raise the possibility of the delay in system development and maintenance due to huge and complicated
		configuration files. To solve this issue, Spring Framework focuses on supporting annotation 
		which is usable without the need of separate xml definition.
		If Spring 2.0 provided annotations for transaction management or persistence handling such as @Transactional, @Required, @PersistenceConetxt
		/@PersistenceUnit, From Spring 2.5, annotations directly related to Spring configuration xml are introduced
		such as bean or dependency definition.
		In addition, Spring 3 has started to provided JSR-330(Dependency Injection for Java) Annotation, a standard annotation for dependency injection
		as well as Spring-specialized annotation.
		In this chapter, annotation is divided into Bean Management, Dependency Injection, Life Cycle based on usage,
		and let's take a look at how to use each annotation.
		
		
 	</para>

  	<para>
  		Annotation can basically be used in JDK 1.5 or over.
  		For Spring container to recognize annotation, note that the following definition must be added to the configuration xml file.
  		
        <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]]>
    <emphasis role="bold"><![CDATA[xmlns:context="http://www.springframework.org/schema/context"]]></emphasis>
    <![CDATA[xsi:schemalLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd>]]>
        <emphasis role="bold">http://www.springframework.org/schema/context</emphasis>
        <emphasis role="bold">http://www.springframework.org/schema/context/spring-context-3.1.xsd"></emphasis>
        <emphasis role="bold"><![CDATA[<context:annotation-config/>]]></emphasis>	                            
<![CDATA[</beans>]]></programlisting></para>

	<itemizedlist>
    	<listitem>
      		<para>
      			<emphasis role="bold">XML vs. Annotation</emphasis></para>

      		<para>
      			The following is a comparison table of using xml and using annotation for implementation class, DAO class and configuration xml.
      			
      			
      		</para>

			<mediaobject>
				<imageobject>
          			<imagedata align="center" fileref="../image/core/spring/annotation_comp.jpg" />
				</imageobject>
			</mediaobject>
		</listitem>
	</itemizedlist>

	<section id="core_spring_annotation_mc">
		<title>Bean Management</title>

		<para>
			Using Stereotype annotation can define beans that need to be managed by Spring Framework container.
			Generally, @Component, a parent stereotype annotation, can define all beans.
			However, Spring Framework divides component by layer and recommends to use annotation as the following.
			In the future, properties reflecting the characteristic of each layer will be continuously updated.
			
    	</para>

    	<itemizedlist>
      		<listitem>
        		<para><emphasis role="bold">@Service</emphasis></para>

        		<para>Used when defining class which handles business logic.</para>
      		</listitem>
    	</itemizedlist>

    	<itemizedlist>
      		<listitem>
        		<para><emphasis role="bold">@Controller</emphasis></para>

        		<para>
        			Used when defining controller class composing presentation layer,
        			and available only on Spring MVC.  
        		
        		</para>
      		</listitem>

      		<listitem>
				<para><emphasis role="bold">@Repository</emphasis></para>

				<para>
					Used when defining class which handles data access logic
					and translation is provided on the exception occurred at persistence layer.
				
				</para>
				<note>
					<title>[Notes] Persistence Layer Exception Translation</title>
					<para>
						If frameworks such as Hibernate, JPA or JDO are used when DAO is implemented, 
						unique exceptions used by each technology (e.g. HibernateException, PersistenceException, JDOException, etc.) 
						can occur during run time.  
						Spring provides 'PersistenceExceptionTranslator' and converts the unique exception of Data Access Framework 
						to the DataAccessException type exception of Spring, 
						and thus helps consistent handling of exception in the application codes, not subject to the Exception API of a specific data access framework. 
						
					</para>
				</note>
			</listitem>
		</itemizedlist>
		
    	<para>
    		JSR-330 provides @Named Annotation for component identification. For a specific bean class, JSR-330
    		grants @Named and helps the relevant bean be managed by container like the case granting Stereotype Annotation.
    		However, for the bean granted with @Named, 'Singleton' will be applied as a basic scope,
    		and handling of other types of scope will be reflected to the future release.
    		
    		
    	</para>
    	
    	<para>
    		In this document, let's take a look at how to use above-mentioned annotations in detail.
    	  	
    	</para>

		<section id="core_spring_annotation_mc_auto">
      		<title>Auto Detecting</title>

			<para>
				If you use Stereotype Annotation in defining bean, Spring Container can identify and manage bean
				without separately defining the bean in xml.
				However, for auto detecting, it is needed to define  <emphasis role="bold">
				<![CDATA[<context:component-scan/>]]></emphasis> in service configuration xml.
				If you add this definition, Spring container will scan classes existing in classpath, and recognize the class bean defined with
				Stereotype Annotation and automatically register.
				
				
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]]>
    <emphasis role="bold"><![CDATA[xmlns:context="http://www.springframework.org/schema/context"]]></emphasis>
    <![CDATA[xsi:schemalLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd]]>
        <emphasis role="bold">http://www.springframework.org/schema/context</emphasis>
        <emphasis role="bold">http://www.springframework.org/schema/context/spring-context-3.1.xsd"></emphasis>
    <emphasis role="bold"><![CDATA[<context:component-scan base-package="anyframe.sample" />]]></emphasis>	                            
<![CDATA[</beans>]]></programlisting>
			</para>

      		<para>
      			If <![CDATA[<context:component-scan />]]> is defined, 
      			there is no need to separately add definition for annotation recognition<emphasis role="bold">
      			<![CDATA[<context:annotation-config/>]]></emphasis>.
      		
      		</para>

      		<para>
      			The following is an example of using Stereotype Annotation called @Service for MovieServiceImpl class,
      			a component of service layer.
      		
                <programlisting language="java"><emphasis role="bold">@Service</emphasis><![CDATA[
public class MovieServiceImpl implements MovieService{
    @Inject
    @Named("coreMovieDao");
    MovieDao movieDao;
}]]></programlisting>
			</para>

      		<para>
      			In the example above, the class name of the relevant class (starting with lower case) is set with bean name.
      			Therefore, when searching for the relevant bean, you have to use <emphasis role="bold">movieServiceImpl</emphasis> string.
      			
                <programlisting language="java">MovieService service = (MovieServiceImpl) context.getBean(<emphasis role="bold">"movieServiceImpl"</emphasis>);</programlisting>
        	</para>

      		<para>
      			If property is granted to the relevant annotation, you can define bean name as you want.
      			
                <programlisting language="java"><emphasis role="bold">@Service("movieServiceImpl")</emphasis><![CDATA[
public class MovieServiceImpl implements MovieService {
    @Inject
    @Named("coreMovieDao")
    private MovieDao movieDao;

}]]></programlisting>
			</para>

			<para>
      			In this case, to find the relevant bean, you have use the name defined as property.
      			
                <programlisting language="java"><![CDATA[MovieService service = (MovieServiceImpl) context.getBean(]]><emphasis role="bold">"movieServiceImpl"</emphasis>)</programlisting>
        	</para>
		</section>

		<section id="core_spring_annotation_mc_filter">
			<title>Using Filters to customize scanning</title>

      		<para>
      			By using various properties of <![CDATA[<context:component-scan>]]>, classes are automatically detected by adjusting the search range
      			and it is possible to filter classes registered as bean.
      			Base-package property can be defined in <![CDATA[<context:component-scan>]]>, and is used to define the search target package.
      			Other than this, <![CDATA[<context:component-scan>]]> can have <![CDATA[<context:include-filter>]]>, <![CDATA[<context:exclude-filter>]]>
      			as sub-element. By defining expression relevant to various filter types, the relevant classes can be added or excluded.
      			The following is an example of using <![CDATA[<context:include-filter>]]>, <![CDATA[<context:exclude-filter>]]>.
      			
      			
                <programlisting language="xml"><![CDATA[<context:component-scan base-package="org.anyframe.plugin">]]>
    <![CDATA[<context]]><emphasis role="bold"><![CDATA[:include-filter type="regex" expression=".*Stub.*Repository">]]></emphasis>
    <![CDATA[<context]]><emphasis role="bold"><![CDATA[:exclude-filter type="annotation" 
        expression="org.springframework.stereotype.Repository"/>]]></emphasis>
<![CDATA[</context:component-scan>]]></programlisting>
			</para>

      		<para>
				There are four filter types that can be defined, as the following.
				
			</para>

			<informaltable>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" colwidth="3*"/>
        			<colspec colnum="2" colname="col2" colwidth="7*"/>        
          			<thead>
						<row>
              				<entry align="center">Filter Type</entry>
              				<entry align="center">Example Expressions</entry>
            			</row>
          			</thead>

          			<tbody>
            			<row>
              				<entry>
                				<emphasis role="bold">annotation</emphasis>
              				</entry>

              				<entry>org.example.SomeAnnotation</entry>
            			</row>

            			<row>
              				<entry>
                				<emphasis role="bold">assignable</emphasis>
              				</entry>

              				<entry>org.example.SomeClass</entry>
            			</row>

            			<row>
							<entry>
                				<emphasis role="bold">regex</emphasis>
              				</entry>

              				<entry>org\.example\.Default.*</entry>
            			</row>

            			<row>
              				<entry>
                				<emphasis role="bold">aspectj</emphasis>
              				</entry>

							<entry>org.example..*Service+</entry>
            			</row>
          			</tbody>
        		</tgroup>
			</informaltable>

      		<note>
      			If you don't want auto detecting of annotation-granted class as a default for bean definition,
      			add <emphasis role="bold">use-default-filters="false"</emphasis>  property to <![CDATA[<context:component-scan />]]> tag.
      			
      			
      		</note>
		</section>

		<section id="core_spring_annotation_mc_scope">
			<title>Scope Definition</title>

			<para>
				<link linkend="core_spring_ioc_extensions_scope">Spring Framework provides five
				scopes based on bean instance creation mechanism</link>, and to define such bean scope,
				use @Scope as the following.
				
				
				
				
                <programlisting language="java"><emphasis role="bold"><![CDATA[@Scope("prototype")]]></emphasis>
<![CDATA[@Service("movieServiceImpl")
public class MovieServiceImpl implements MovieService {
    @Inject
    @Named("coreMovieDao")
    private MovieDao movieDao;

}]]></programlisting>
			</para>
		</section>
	</section>

	<section id="core_spring_annotation_di">
		<title>Dependency Injection</title>

		<para>
			For referring to other bean for performing a specific bean function, 
			annotations such as @Autowired, @Resource and @Inject are used.
			
			
		</para>

		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">@Autowired</emphasis></para>

				<para>
					Annotation for defining dependency provided in Spring Framework.
					Dependent on Framework, but useful when detailed dependency injection is required.
					
				</para>
			</listitem>

			<listitem>
 				<para><emphasis role="bold">@Resource</emphasis></para>

				<para>
					JSR-250 standard annotation, provided from Spring Framework 2.5.* 
					@Resource can be considered to be related to JNDI resource
				(datasource, java messaging service destination or environment entry), and when a specific bean needs
				injection for JNDI resource, it is recommended to use @Resource.
					
					
					
				</para>
      		</listitem>
      		
      		<listitem>
      			<para><emphasis role="bold">@Inject</emphasis></para>
      			
      			<para>
      				As a JSR-330 standard annotation, this is provided from Spring 3.
      				To compose application not dependent on a specific framework, it is recommended to use @Inject.
      				Note that to use @Inject, javax.inject-x.x.x.jar file, JSR-330 library, must be added into classpath.
      				
      		
      			</para>
      		</listitem>
    	</itemizedlist>

		<para>
			Location where @Autowired, @Resource, @Inject can be used has some differences as the following.
			Therefore you can use them properly depending on the need.
			
    	</para>

		<itemizedlist>
			<listitem>
        		<para>@Autowired : applicable to member variable, setter method, constructor, generic method</para>
			</listitem>

			<listitem>
				<para>@Resource : applicable to member variable, setter method</para>
			</listitem>
			
			<listitem>
				<para>@Inject : applicable to member variable, setter method, constructor, generic method</para>
			</listitem>
		</itemizedlist>

		<para>
			When defining @Autowired, @Resource, @Inject at member variable directly,
			there is no need to define setter method separately.
			
		</para>
		
		<section id="core_spring_annotation_di_inject">
			<title>@Inject</title>
			<para>
				Refers to a standard annotation performing the same function as @Autowired in Spring.
				Unlike @Autowired, however, this does not have 'required' property.
				In addition, when used with @Named, injection is performed using the defined bean.
				The following is an example of using @Inject, a part of ~/moviefinde/service/impl/MovieServiceImpl.java,
				service class newly added by Core Plugin installation.
				
			</para>
			<programlisting language="java">@Service("movieServiceImpl")
@Transactional(rollbackFor = { Exception.class }, propagation = Propagation.REQUIRED)
public class MovieServiceImpl implements MovieService {

    <emphasis role="bold">@Inject</emphasis>
    @Named("coreMovieDao")
    private MovieDao movieDao;

    // ...	
}</programlisting>
		</section>
    
		<section id="core_spring_annotation_di_autowired">
			<title>@Autowired</title>
			<para>
				@Autowired is dependent on Spring, but its applicable location is more various than @Resource or @Inject,
				and it is useful when detailed Dependency Injection is required.
								
			</para>

			<para>
				The following is an example of using @Autowired.
				
                <programlisting language="java"><![CDATA[@Service("movieServiceImpl")]]>
<![CDATA[public class MovieServiceImpl implements MovieService {]]>
     <emphasis role="bold"><![CDATA[@Autowired]]></emphasis>
     <![CDATA[MovieDao movieDao;
}]]></programlisting></para>
			<para>The following is an example of using  @Autowired by applicable location.
			</para>
			<itemizedlist>
				<listitem>
        			<para>
        				Constructor and member variable
                        <programlisting language="java"><![CDATA[@Service("movieServiceImpl")]]>
<![CDATA[public class MovieServiceImpl implements MovieService  {]]>
    <emphasis role="bold">@Autowired</emphasis>
    <![CDATA[MovieDao movieDao;
    MessageSource messageSource;]]>
		
    <emphasis role="bold"><![CDATA[@Autowired
    public MovieServiceImpl(MessageSource messageSource) {]]></emphasis>
        <![CDATA[this.messageSource = messageSource;
    }
}]]></programlisting>
						As in the example above, if @Autowired is used, MessageSource type bean is automatically injected
						as a constructor argument by Spring container when MovieServiceImpl is created.
						In addition, as @Autowired is applied as movieDao member variable,
						MovieDao type bean is automatically injected.
						
						
					
        			</para>
        		</listitem>
        
        		<listitem>
        			<para>setter method
                        <programlisting language="java"><![CDATA[@Service("movieServiceImpl")]]>
<![CDATA[public class MovieServiceImpl implements MovieService {
    MovieDao movieDao;]]>
    <emphasis role="bold"><![CDATA[@Autowired
    public void setMovieDao(MovieDao movieDao) {]]></emphasis>
        <![CDATA[this.movieDao = movieDao;
    }
}]]></programlisting>
						setMovieDao() method is automatically called by Spring container and MovieDao type bean
						is injected as movieDao member variable.
					
					</para>
        		</listitem>
        
        		<listitem>
        			<para>
        				generic method
                        <programlisting language="java"><![CDATA[@Service("movieServiceImpl")
public class MovieServiceImpl implements MovieService {
    MovieDao movieDao;
    MessageSource messageSource;]]>
    <emphasis role="bold"><![CDATA[@Autowired
    public void prepare(MovieDao movieDao, MessageSource messageSource) {]]></emphasis>
        <![CDATA[this.movieDao = movieDao;
        this.messageSource = messageSource;
    }
}]]></programlisting>
						Unlike @Resource, @Autowired can be applied to generic method like  prepare(),
						dependency injection can be handled by Spring container.
						In the example above, MovieDao type bean was injected as movieDao and MessageSource type bean as messageSource.
						
					
					</para>
        		</listitem>
        
        		<listitem>
        			<para>
        				Array or collection-type member variable and method
        				
                        <programlisting language="java"><![CDATA[@Service("movieServiceImpl")]]>
<![CDATA[public class MovieServiceImpl implements MovieService {
    MovieDao movieDao;]]>
    <emphasis role="bold"><![CDATA[@Autowired
    Genre[] genres;]]></emphasis>
}</programlisting>
		
                        <programlisting language="java"><![CDATA[@Service("movieServiceImpl")
public class MovieServiceImpl implements MovieService {
    MovieDao movieDao;
    Set<Genre> genres;]]>
    <emphasis role="bold"><![CDATA[@Autowired
    public void setGenre(MovieDao movieDao, Set<Genre> genres) {]]></emphasis>
        <![CDATA[this.movieDao = movieDao;
        this.genres = genres;
    }
}]]></programlisting>
						In the example source above, all Genre-type beans registered to Spring container
						are injected to genres array (or collection).
						
					</para>
        		</listitem>
        
        		<listitem>
        			<para>
        				Map(key=Bean Name, value=Bean object)-type member variable and method type
                        <programlisting language="java"><![CDATA[@Service("movieServiceImpl")
public class MovieServiceImpl implements MovieService {
    MovieDao movieDao;
    Map<String, Genre> genres;]]>
    <emphasis role="bold"><![CDATA[@Autowired
    public void setGenre(MovieDao movieDao, Map<String, Genre> genres) {]]></emphasis>
        <![CDATA[this.movieDao = movieDao;
        this.genres = genres;
    }
}]]></programlisting>
						In the example source above, Genre-type beans registered to Spring container are injected to Genre map where
						bean name is key and bean object is value.
						
        			</para>
        		</listitem>
    		</itemizedlist>
    
    		<para>
    			Basically, reference where @Autowired is applied must have the relevant bean,
    			but if <emphasis role="bold">required
      			property is set false</emphasis>, no error occurs even when the relevant bean is not found.
    			
                <programlisting language="java"><![CDATA[@Service
public MovieServiceImpl implements MovieService {]]>
    <emphasis role="bold"><![CDATA[@Autowired(required=false)]]></emphasis>
    <![CDATA[private MovieDao movieDao;
}]]></programlisting></para>

			<para>
				In addition, As explained at @Resource, @Autowired can use BeanFactory, ApplicationContext, ResourceLoader, 
				ApplicationEventPublisher, MessageSource interface and sub-interface without any separate set-up.
				
                <programlisting language="java"><![CDATA[@Service("movieServiceImpl")
public class MovieServiceImpl implements MovieService {]]>
    <emphasis role="bold"><![CDATA[@Autowired]]></emphasis>
    <![CDATA[ApplicationContext context;
}]]></programlisting></para>       
	     
		</section>
		
		<section id="core_spring_annotation_di_resource">
			<title>@Resource</title>

			<para>
				Used when using dependency injection by defining bean name.
				As @Resource has 'name' property, when Spring container searches for bean to inject to the @Resource-defined element,
				name property uses designated name to search.
				
                <programlisting language="java"><![CDATA[@Service("movieServiceImpl")
public class MovieServiceImpl implements MovieService {
    @Resource
    MessageSource messageSource;]]>
    <emphasis role="bold"><![CDATA[@Resource (name="movieDao")]]></emphasis>
    <![CDATA[ MovieDao movieDao;]]></programlisting>
    		</para>
			<para>
				If name property is not explicitly defined, bean name to search follows the following rule.
				
			</para>
			<itemizedlist>
      			<listitem>
        			<para>If @Resource is defined to member variable: the name of member variable</para>
      			</listitem>

      			<listitem>
        			<para>
        				If @Resource is defined to setter method: the rest of the setter method excluding 'set'(the first letter is lower case) 
					</para>
					<para>
						example) setFoo(...) --> 'foo'
					</para>
      			</listitem>
    		</itemizedlist>
    		<para>
    			If failed to find bean to inject with the relevant bean name, search the bean type like @Autowired.
    			</para>
    		<para>
    			@Resource can use BeanFactory, ApplicationContext, ResourceLoader, ApplicationEventPublisher, 
    			MessageSource interface and sub-interface without any separate set-up.
    			
    			
                <programlisting language="java"><![CDATA[@Service("movieServiceImpl")]]>
<![CDATA[public class MovieServiceImpl implements MovieService {]]>
    <emphasis role="bold"><![CDATA[@Resource]]></emphasis>
    <![CDATA[ApplicationContext context;
}]]></programlisting></para>
		</section>		
		
		<section id="core_spring_annotation_di_qualifier">
			<title>@Qualifier</title>
			<para>
				In the case of type-driven injection, Spring container performs search based on the object type when searching for the relevant bean.
				In this case, if several beans are found in the same type, you can use @Qualifier for more detailed control to decide the target bean.
				
				
			</para>
			<section id="core_spring_annotation_di_qualifier_spring">
				<title>Spring @Qualifier</title>
				<para>
					Basically, @Autowired runs in type-driven injection type, and when several beans are found in the same object type,
					you can use  @Qualifier for more detailed control to decide the target bean.
					
				</para>
	    		<para>
	    			The following is an example of using @Qualifier along with @Autowired.
	    			
                	<programlisting language="java"><![CDATA[@Service("movieServiceImpl")
public class MovieServiceImpl implements MovieService {
    @Autowired]]>
    <emphasis role="bold"><![CDATA[@Qualifier("sports")]]></emphasis>
    <![CDATA[Movie sportsMovie;
}]]></programlisting>
    			</para>
    			<para>
    				Based on the definition above, bean whose qualifier property value is "sports" is injected as sportsMovie member variable.
    				
    			</para>
    	
	    		<para>
	    			Bean related to above @Qualifier can be defined as the following.
	    			
	                <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
                http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/context 
                http://www.springframework.org/schema/context/spring-context-3.1.xsd">
        				
    <context:annotation-config/>

    <bean class="org.anyframe.sample.di.qualifier.moviefinder.domain.Movie">]]>
        <emphasis role="bold"><![CDATA[<qualifier value="sportsMovie"/>]]></emphasis>
        <![CDATA[<!-- inject any dependencies required by this bean -->
    </bean>
    <bean class="org.anyframe.sample.di.qualifier.moviefinder.domain.Movie">]]>
         <emphasis role="bold"><![CDATA[<qualifier value="livingMovie"/>]]></emphasis>
         <![CDATA[<!-- inject any dependencies required by this bean -->
    </bean>

    <bean id="movieServiceImpl" 
        class="org.anyframe.sample.di.qualifier.moviefinder.service.MovieServiceImpl"/>
</beans>]]></programlisting>
	    		</para>
			</section>
			<section id="core_spring_annotation_di_qualifier_jsr330">
				<title>JSR-330 @Qualifier</title>
	    		<para>
	    			JSR-330 @Qualifier can be used for detailed control when performing Spring @Qualifier or type driven injection.
	    			Unlike Spring @Qualifier, however, it can be used to define Qualifier Annotation only.
	    			The following is an example of @Qualifier, defined using javax.inject.Qualifier, and has 'type' property.
	    			
	    		</para>
	    		<programlisting language="java">//...
<emphasis role="bold">import javax.inject.Qualifier;</emphasis>

@Target( { ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE })
@Retention(RetentionPolicy.RUNTIME)
<emphasis role="bold">@Qualifier</emphasis>
public @interface DaoQualifier {
    public abstract String type() default "query";
}</programlisting>
				<para>
					Let's assume that MovieDao interface has two implementation (MovieDaoQueryImpl, MovieDaoHibernateImpl).
					For type injection of MovieDao implement from other bean, you can use @DaoQualifier as well as  @Named when defining
					the relevant bean.
				
				</para>
				<programlisting language="java">@Named
<emphasis role="bold">@DaoQualifier(type = "hibernate")</emphasis>
public class MovieDaoHibernateImpl implements MovieDao {
    // ...
}

@Named
<emphasis role="bold">@DaoQualifier</emphasis>
public class MovieDaoQueryImpl implements MovieDao {
    // ...
}</programlisting>
				<para>
					To inject the above-defined bean, you can use @DaoQualifier along with @Inject as the following.
					
				</para>
				<programlisting language="java">@Named
public class MovieServiceImpl implements MovieService {

    @Inject
    <emphasis role="bold">@DaoQualifier(type = "hibernate")</emphasis>
    private MovieDao hibernateMovieDao;

    @Inject
    <emphasis role="bold">@DaoQualifier</emphasis>
    private MovieDao queryMovieDao;
	
    // ...	
}</programlisting>	
				<para>
					The JSR-330 qualifier sample code mentioned above can be downloaded through 
					<link linkend="core_spring_annotation_resources">download - anyframe-sample-di-qualifier</link>.
					
				</para> 	    				
			</section>
    	</section>
    	
    	<section id="core_spring_annotation_di_provider">
    		<title>Provider</title>
    		<para>
    			As interface provided in JSR-303, container does not inject the target bean directly but inject the target class type T
    			in <![CDATA[Provider<T>]]> type. 
    			When performing injection through javax.inject.Provider, Spring uses get() method of 'DependencyProvider' implementation in DefaultListableBeanFactory
    			to transfer new T-type instance which was provided in generic type.
    			Therefore, this can be applied when referring to prototype bean in singleton bean.
    		
    		</para>
    		<para>
    			The following is an example of referring to specific bean in  <![CDATA[Provider<T>]]> type.
    			
    		</para>
    		<programlisting language="java">@Named
public class MovieServiceImpl implements MovieService {
    @Inject
    <emphasis role="bold">private <![CDATA[Provider<MovieDao>]]> movieDaoFactory;</emphasis>

    public Movie get(String movieId) throws Exception {
        // get movieDao instance calling get()
        return <emphasis role="bold">movieDaoFactory.get()</emphasis>.get(movieId);
    }
}</programlisting>
			<para>
				The code above will get new MovieDao instance whenever calling get() method through Provider-type movieDaoFactory object.
				
			</para>
			<para>
				In referring to specific bean, injection in <![CDATA[Provider<T>]]> type instead of direct injection can provide
				the following merits.
				
				(Source: JSR-330 Dependency Injection for Java 1.0 Final Release for Documentation)
			</para>
			<itemizedlist>
     			<listitem>
     				<para>retrieving multiple instances</para>
     			</listitem>
     			<listitem>
     				<para>lazy or optional retrieval of an instance</para>
     			</listitem>
     			<listitem>
     				<para>breaking circular dependencies</para>
     			</listitem>
     			<listitem>
     				<para>abstracting scope so you can look up an instance in a smaller scope from an instance in a containing scope</para>
     			</listitem>
     		</itemizedlist>
     		<para>
				You can download the above-mentioned JSR-330 provider sample code through  <link linkend="core_spring_annotation_resources">Download - anyframe-sample-di-provider</link> in this section.
				
			</para> 
    	</section>    	
    	<section id="core_spring_annotation_di_comp">
			<title>@Inject / @Autowired / @Resource comparison</title>
      			<para>@Inject / @Autowired / @Resource comparison is as the following.</para>
      			<informaltable>
        			<tgroup cols="4">
        				<colspec colnum="1" colname="col1" colwidth="2*"/>
						<colspec colnum="2" colname="col2" colwidth="4*"/>
						<colspec colnum="3" colname="col1" colwidth="4*"/>
						<colspec colnum="3" colname="col1" colwidth="4*"/>
          			<thead>
            			<row>
              				<entry align="center">Annotation</entry>
              				<entry align="center">@Inject</entry>
              				<entry align="center">@Autowired</entry>
              				<entry align="center">@Resource</entry>              				
            			</row>
          			</thead>

          			<tbody>
            			<row>
							<entry align="center">Injection type</entry>
							<entry>type-driven injection</entry>
							<entry>type-driven injection</entry>
              				<entry>name-matching injection</entry>
            			</row>

            			<row>
              				<entry align="center">Usable location</entry>
							<entry>member variable, setter method, constructor, generic method</entry>
              				<entry>member variable, setter method, constructor, generic method</entry>
              				<entry>member variable, setter method</entry>
            			</row>
          			</tbody>
        		</tgroup>
      		</informaltable> 
		</section>
	</section>

	<section id="core_spring_annotation_lc">
		<title>LifeCycle Annotation</title>

		<mediaobject>
			<imageobject>
				<imagedata align="center" fileref="../image/core/spring/ioc-lifecycle.jpg" />
      		</imageobject>
    	</mediaobject>

    	<para>
    		As explained in <link linkend="core_spring_ioc_extensions_lifecycle">Life Cycle of IoC</link>,
    		lifecycle of bean is composed of Initializaion ->Activation -> Destruction,
    		and when defining lifecycle method, the necessary logic is performed at initialization or destruction stage.
    		In the past, if separate task was needed at bean initialization or destruction stage, it was needed to inherit 
    		 InitializingBean and DesposableBean interface or design initialization method or destruction method explicitly when defining bean.
    		 However, if you use the following annotation, you can manage bean lifecyle even without xml definition or interface inheritance.
    		
    		</para>
    
    	<section id="core_spring_annotation_lc_postconstruct">
			<title>@PostConstruct</title>

      		<para>
      			As a JSR-250 standard annotation, this defines the method containing necessary task when initializing bean.
      			To use @PostConstruct, jsr250-api.jar needs to be added in classpath.
      			
      			<programlisting language="java"><emphasis role="bold">@PostConstruct</emphasis> 
//can be defined freely.
public void initialize() {
    // ...
}</programlisting>

 

</para>
		</section>

    	<section id="core_spring_annotation_lc_predestroy">
			<title>@PreDestroy</title>

			<para>
				As a JSR-250 standard annotation, this defines the method containing necessary task when destroying bean.
				To use @PreDestroy,  jsr250-api.jar file needs to be added in classpath.
			
                <programlisting language="java"><emphasis role="bold">@PreDestroy</emphasis>
// method name can be defined freely.
public void dispose() {
    // ...
}</programlisting></para>
		</section>

		<section id="core_spring_annotation_lc_combine">
			<title>Combining lifecycle mechanisms</title>

			<para>
				As explained above, there are three ways to manage bean lifecycle in Spring 2.5.
				
		
      		</para>

			<itemizedlist>
				<listitem>
          			<para>Using InitializingBean and DisposableBean callback interface</para>
        		</listitem>

        		<listitem>
          			<para>Define initialization/destruction which user developed by using init-method/destroy-method property in xml
          			</para>
        		</listitem>

        		<listitem>
          			<para>Using @PostConstruct and @PreDestroy annotation</para>
        		</listitem>
      		</itemizedlist>

      		<para>
      			If the above-mentioned three ways exist simultaneously (for example, class defined with each way has a parent-child relationship),
      			the execution order is as the following.
      			
      		</para>

      		<para><emphasis role="bold">Initialization method</emphasis></para>

      		<orderedlist>
        		<listitem>
          			<para>Method defined using @PostConstruct</para>
        		</listitem>

        		<listitem>
          			<para>afterPropertiesSet() method of InitializingBean interface </para>
        		</listitem>

        		<listitem>
          			<para>Initialization method defined with  init-method property in xml </para>
        		</listitem>
      		</orderedlist>

      		<para><emphasis role="bold">Destroy method</emphasis></para>

      		<orderedlist>
        		<listitem>
          			<para>Method defined using @PreDestroy</para>
        		</listitem>

        		<listitem>
 					<para>destroy() method of DisposableBean interface</para>
        		</listitem>

        		<listitem>
          			<para>Destruction method defined with destroy-method property in xml</para>
        		</listitem>
      		</orderedlist>
    	</section>
  	</section>
 	<section id="core_spring_annotation_resources">
		<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>Download</para>
					<para>
						Download and extract hsqldb.zip which contains test BD and anyframe-sample-annotation.zip which contains sample code.
						Execute start.cmd (or start.sh)  file in hsqldb folder and start test DB.
					
						<itemizedlist>
							<listitem>
								<para>Maven-based run</para>
								<para>
									After moving to extracted folder in command window, execute 'mvn clean jetty:run' command.
									If Jetty Server is properly started, open a browser and enter http://localhost:8080/anyframe-sample-annotation in the address box, and check the execution result.
																	
								</para>
							</listitem>
							<listitem>
								<para>Eclipse-based run - utilizing m2eclipse, WTP</para>
								<para>
									After importing extracted project at Eclipse,click mouse right button for the relevant project
									and select Maven > Enable Dependency Management at context menu to solve compile error.
									After clicking mouse right button for the relevant project, click Run 
									As > Run on Server (Tomcat based) at context menu. If Tomcat Server is properly started,
									open a browser and enter http://localhost:8080/anyframe-sample-annotation in the address box
									and check the execution result.
									
								
								</para>
							</listitem>										
							<listitem>
								<para>Eclipse-based run - utilizing WTP</para>
								<para>
									After importing extracted project at Eclipse, create build.xml file and copy reference library to 
									WEB-INF/lib in src/main/webapp folder.
									Selected the relevant project and click mouse right button and click  Run As > Run on Server at context menu.
									If Tomcat Server is properly started, open a browser and enter  http://localhost:8080/anyframe-sample-annotation 
									in the addresss box and check the execution result.
									(* To execute build.xml, maven-ant-tasks-2.0.10.jar file is needed in ${ANT_HOME}/lib.
									)
									
								
								</para>
							</listitem>									
						</itemizedlist>
					</para>
					<table>
						<title>Download List</title>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="6*"/>
							<colspec colnum="2" colname="col2" colwidth="4*"/>
							<thead>
								<row>
									<entry>Name</entry>
									<entry>Download</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="center">maven-ant-tasks-2.0.10.jar</entry>
									<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.0.1/reference/sample/maven-ant-tasks-2.0.10.jar">Download</ulink></entry>
								</row>
								<row>
									<entry align="center">anyframe-sample-di-qualifier.zip</entry>
									<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.0.1/reference/sample/anyframe-sample-di-qualifier.zip">Download</ulink>
									</entry>
								</row>	
								<row>
									<entry align="center">anyframe-sample-di-provider.zip</entry>
									<entry align="center"><ulink url="http://dev.anyframejava.org/docs.en/anyframe/plugin/essential/core/1.0.1/reference/sample/anyframe-sample-di-provider.zip">Download</ulink>
									</entry>
								</row>																											
							</tbody>						
						</tgroup>
					</table> 
				</listitem>
			</itemizedlist>
		</para>
	</section>  	
</chapter>