<chapter id="core_logging_sqllogging">
	<title>SQL Logging</title>
    <para>
    	For SQL logging through query service,     
			open source of log4jdbc can be used.
			log4jdbc provides JDBC Driver which can record a log on JDBC calling or SQL statement.
			For more details on log4jdbc,
			 refer to <ulink url="http://code.google.com/p/log4jdbc/">http://code.google.com/p/log4jdbc/</ulink>.
		
    </para>

	<para>
		This page will describe five-steps of SQL Logging using log4jdbc.
	
    </para>

    <itemizedlist>
      	<listitem>
        	<para>
        		Step 1. Log4jdbc Library download
        	</para>
      	</listitem>

      	<listitem>
        	<para>
        		Step 2. Simple Logging Facade for Java Library download </para>
      	</listitem>

      	<listitem>
        	<para>
        		Step 3. DataSource property definition
        	</para>
      	</listitem>

      	<listitem>
       		<para>
        		Step 4. Query service property definition
        	</para>
      	</listitem>

      	<listitem>
        	<para>
        		Step 5. Logger definition
        	</para>
      	</listitem>
    </itemizedlist>

	<section id="core_logging_sqllogging_log4jdbc">
		<title>Step 1. Log4jdbc Library download</title>

		<para>
      		Referring to the following, download log4jdbcX-*.jar file and <emphasis role="bold">
					copy it to [Anyframe installation folder] or [Web Root/WEB-INF/lib folder]</emphasis>.					
				When using WebLogic JNDIDataSource, <emphasis role="bold">copy it to the relevant WAS classpath
				so that it can be loaded when WAS starts.</emphasis>
      		
    	</para>

      	<informaltable>
        	<tgroup cols="3">
        		<colspec colnum="1" colname="col1" colwidth="2*"/>
        		<colspec colnum="2" colname="col2" colwidth="6*"/>
        		<colspec colnum="3" colname="col3" colwidth="2*"/>      
          			<thead>
            			<row>
              				<entry align="center">File name</entry>

              				<entry align="center">Description</entry>

              				<entry align="center">Download</entry>
            			</row>
          			</thead>

          			<tbody>
            			<row>
              				<entry>log4jdbc3-1.2alpha2.jar</entry>

              				<entry>If you are using JDK 1.4 or 1.5, you should use the JDBC
              				3 version of log4jdbc.</entry>

              				<entry align="center">
                			<ulink url="http://log4jdbc.googlecode.com/files/log4jdbc3-1.2alpha2.jar">Download</ulink>
              				</entry>
            			</row>
          			</tbody>
        	</tgroup>
      	</informaltable>
 	</section>

	<section id="core_logging_sqllogging_simplelogging">
		<title>Step 2. Simple Logging Facade for Java library download</title>

      	<para>
      		log4jdbc uses
				<ulink url="http://slf4j.org/">Simple Logging Facade for
					Java (SLF4J)</ulink> to flexibly integrate with logging service used in application.
				Therefore, download the following files and <emphasis role="bold">copy them to [Anyframe installation folder] or
					[Web Root/WEB-INF/lib folder].</emphasis>
				When using Weblogic JNDIDataSource, <emphasis role="bold">copy it to the relevant WAS classpath 
				so that it can be loaded at WAS beginning.</emphasis>      		
      	</para>

      	<informaltable>
        	<tgroup cols="3">
        		<colspec colnum="1" colname="col1" colwidth="2*"/>
        		<colspec colnum="2" colname="col2" colwidth="6*"/>
        		<colspec colnum="3" colname="col3" colwidth="2*"/>  
          			<thead>
            			<row>
              				<entry align="center">File name</entry>

              				<entry align="center">Description</entry>

              				<entry align="center">Download</entry>
            			</row>
          			</thead>

          			<tbody>
            			<row>
              				<entry>slf4j-api-1.5.3.jar</entry>

              				<entry>Provides API for integration of log4jdbc with logging service</entry>

              				<entry align="center">
                				<ulink url="http://www.slf4j.org/dist/slf4j-1.5.3.zip">Download</ulink>
              				</entry>
            			</row>

            			<row>
              				<entry>slf4j-log4j12-1.5.3.jar</entry>

              				<entry>Provides implementation library for integration of log4jdbc and Log4j-based logging service            				
             				</entry>

              				<entry align="center">
                				<ulink url="http://www.slf4j.org/dist/slf4j-1.5.3.zip">Download</ulink>
              				</entry>
            			</row>
          			</tbody>
        	</tgroup>
		</informaltable>
	</section>

	<section id="core_logging_sqllogging_datasource">
		<title>Step 3. DataSource property definition</title>


		<section id="core_logging_sqllogging_datasource_jdbc">
        	<title>When using JDBCDataSource</title>

        	<itemizedlist>
          		<listitem>
            		<para>
            			In the case of JDBC Driver which is basically supported,
							when defining DataSource properties, driverClassName is defined as net.sf.log4jdbc.DriverSpy
							and url is added with 'jdbc:log4' to the existing url.
							The following is context-datasource.xml, a configuration file of general type datasource.						
						<programlisting language="xml"><![CDATA[<bean id="]]><emphasis role="bold">commonDataSource</emphasis><![CDATA[" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="net.sf.log4jdbc.DriverSpy"/>
    <property name="url" value="jdbc:log4jdbc:hsqldb:file:/./DATABASE/db/sampledb"/>
    <property name="username" value="sa"/>
</bean>]]></programlisting>
					</para>

            		<para>
            			[References] Basic JDBC Driver list provided in DriverSpy is as the following.            		
            			<programlisting>. oracle.jdbc.driver.OracleDriver 
. com.sybase.jdbc2.jdbc.SybDriver
. net.sourceforge.jtds.jdbc.Driver
. com.microsoft.jdbc.sqlserver.SQLServerDriver
. weblogic.jdbc.sqlserver.SQLServerDriver
. com.informix.jdbc.IfxDriver
. org.apache.derby.jdbc.ClientDriver
. org.apache.derby.jdbc.EmbeddedDriver
. com.mysql.jdbc.Driver
. org.postgresql.Driver
. org.hsqldb.jdbcDriver
. org.h2.Driver</programlisting>
					</para>
          		</listitem>

				<listitem>
            		<para>
            			<emphasis role="bold">When using JDBC Driver that is not basically supported.
            			</emphasis>
            		</para>

            		<para>
            			If not JDBC Driver basically supported in net.sf.log4jdbc.DriverSpy,
						define the same basic definition way as mentioned before,
						but additional setting is required for system setting.
						When working on Eclipse, define <emphasis role="bold">log4jdbc.drivers</emphasis>
							as a property key at Open Run Diaglog &gt; Arguments tab &gt; VM
							arguments and actual DB driver class name as a property value.					
            			<programlisting><emphasis role="bold">-Dlog4jdbc.drivers=com.ibm.db2.jcc.DB2Driver </emphasis></programlisting>
                  	</para>
          		</listitem>
        	</itemizedlist>
		</section>



		<section id="core_logging_sqllogging_datasource_jndi">
        	<title>When using JNDIDataSource</title>

        	<para>
        		When using JNDIDataSource,
				datasource to use in the relevant WAS must be defined .			
        	</para>

       		<itemizedlist>
          		<listitem>
            		<para>
            			<emphasis role="bold">In the case of WebLogic</emphasis>
            		</para>

            		<orderedlist>
              			<listitem>
                			<para>
                				<emphasis role="bold">Adding DataSource</emphasis>
                			</para>

                			<para>
                				Define datasource to use in WebLogic.
								in this case, as in defining JDBCDataSource,
									<emphasis role="bold">define driverClassName as
										net.sf.log4jdbc.DriverSpy and add 'jdbc:log4'
										to the existing url.</emphasis>When defining url, refer to 
										<emphasis role="bold">When using JDBCDataSource</emphasis>
										in step 3.								
                			</para>
                
                			<note>
                				<title>References</title>
                				<para>
                						To add datasource using net.sf.log4jdbc.DriverSpy to WebLogic Server,
									proper call must occur between WebLogic and log4jdbc.
									Therefore, remember to copy log4jdbcX-*.jar, slf4j-api-1.5.3.jar, slf4j-log4j12-1.5.3.jar
									to [Domain Server Home/lib] before executing WebLogic server.								
								</para>				        
							</note>

                			<para>
                						The following is the TestDataSource setting added to WebLogic 9.2 Server.                				
                			</para>

                			<mediaobject>
                  				<imageobject>
                    				<imagedata align="center"
                               			fileref="../image/core/logging/weblogic-datasource-jdbc3.jpg" />
                  				</imageobject>
                			</mediaobject>
              			</listitem>

              			<listitem>
                			<para>
                				<emphasis role="bold">DataSource property definition</emphasis>
                			</para>

                			<para>
                				To use JNDIDataSource after defining JNDIDataSource,
									refer to the following and define context-datasource-jndi.xml file.							
                				<programlisting language="xml"><![CDATA[<bean id="commonDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="TestDataSource" />
    <property name="jndiTemplate" ref="jnditemplate" />
</bean>
<bean id="jnditemplate"
        class="org.springframework.jndi.JndiTemplate">
    <property name="environment">
        <props>
            <prop key="java.naming.factory.initial">
                weblogic.jndi.WLInitialContextFactory
            </prop>
            <prop key="java.naming.provider.url">
                t3://localhost:7001
            </prop>
        </props>
    </property>
</bean>]]></programlisting>
                			</para>
              			</listitem>
            		</orderedlist>
          		</listitem>

          		<listitem>
            		<para>
            			<emphasis role="bold">In the case of JEUS</emphasis>
            		</para>

            		<orderedlist>
              			<listitem>
                			<para>
                				<emphasis role="bold">Adding DataSource</emphasis>
                			</para>

                			<para>
                				Add JNDIDataSource to use in JEUS.
									The following is a part of JEUSMain.xml file of JEUS server
									where JNDIDataSource is added.							
                				<programlisting language="xml"><![CDATA[1. In the case of XA mode
<resource>
    <data-source>
        <database>
            <vendor>oracle</vendor>
            <export-name>OracleDS</export-name>
            <data-source-class-name>
                 oracle.jdbc.xa.client.OracleXADataSource
            </data-source-class-name>
            <data-source-type>XADataSource</data-source-type>
            <database-name>test2</database-name>
            <data-source-name>
                 oracle.jdbc.xa.client.OracleXADataSource
            </data-source-name>
            <port-number>1521</port-number>
            <server-name>server.ip</server-name>
            <user>anyframe</user>
            <password>anyframe</password>
            <driver-type>thin</driver-type>
            <connection-pool>
                <pooling>
                    <min>2</min>
                    <max>30</max>
                    <step>4</step>
                    <period>3600000</period>
                </pooling>
            </connection-pool>
        </database>
    </data-source>
</resource>
2. In the case of ConnectionPool mode
<resource>
    <data-source>
        <database>
            <vendor>oracle</vendor>
            <export-name>OraclePoolDS</export-name>
            <data-source-class-name>
                 oracle.jdbc.pool.OracleConnectionPoolDataSource
            </data-source-class-name>
            <data-source-type>ConnectionPoolDataSource</data-source-type>
            <database-name>test2</database-name>
            <data-source-name>
                 oracle.jdbc.pool.OracleConnectionPoolDataSource
            </data-source-name>
            <port-number>1521</port-number>
            <server-name>server.ip</server-name>
            <user>anyframe</user>
            <password>anyframe</password>
            <driver-type>thin</driver-type>
            <connection-pool>
                <pooling>
                    <min>2</min>
                    <max>30</max>
                    <step>4</step>
                    <period>3600000</period>
                </pooling>
                <check-query>select sysdate from dual</check-query>
                <check-query-period>10000</check-query-period>
            </connection-pool>
        </database>
    </data-source>
</resource>]]></programlisting>
                			</para>
              			</listitem>

              			<listitem>
                			<para>
                				<emphasis role="bold">DataSource Wrapper definition and compile
                				</emphasis>
                			</para>

                			<para>
                				If WAS is JEUS, as DB url cannot be defined when adding JNDIDataSource,
									SQL logging through DriverSpy cannot be executed.
									In this case, like the following AnyframeDataSourceSpy,
									you can define and use specific DataSource Wrapper class.							
                				<programlisting language="java">package net.sf.log4jdbc;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import net.sf.log4jdbc.ConnectionSpy;
import net.sf.log4jdbc.SpyLogDelegator;
import net.sf.log4jdbc.SpyLogFactory;
import net.sf.log4jdbc.RdbmsSpecifics;

public class AnyframeDataSourceSpy implements DataSource {

    private DataSource dataSource = null;

    static final SpyLogDelegator log = SpyLogFactory.getSpyLogDelegator();

    static RdbmsSpecifics defaultRdbmsSpecifics = new RdbmsSpecifics();

    public AnyframeDataSourceSpy() {
    }
    public Connection getConnection() throws SQLException {
        return getWrappedConnection(dataSource.getConnection());
    }
    public Connection getConnection(String username, String password)
            throws SQLException {
        return getWrappedConnection(dataSource
                .getConnection(username, password));
    }
    public PrintWriter getLogWriter() throws SQLException {
        return dataSource.getLogWriter();
    }
    public int getLoginTimeout() throws SQLException {
        return dataSource.getLoginTimeout();
    }
    public void setLogWriter(PrintWriter out) throws SQLException {
        dataSource.setLogWriter(out);
    }
    public void setLoginTimeout(int seconds) throws SQLException {
        dataSource.setLoginTimeout(seconds);
    }
    private Connection getWrappedConnection(Connection con) {
        if (log.isJdbcLoggingEnabled())
        {
            ConnectionSpy cspy = new ConnectionSpy(con);
            cspy.setRdbmsSpecifics(defaultRdbmsSpecifics);
            return cspy;
        }
        else
        {
            return con;
        }
    }
    public void setDataSource(DataSource dataSource) {

        this.dataSource = dataSource;
    }
}</programlisting>
                			</para>
						</listitem>

              			<listitem>
                			<para>
                				<emphasis role="bold">DataSource property definition</emphasis>
                			</para>

                			<para>
								To execute the application datasource through above-mentioned datasource wrapper,
									refer to the following and define context-datasource-wrapper.xml file.								
               					<programlisting language="xml"><![CDATA[<bean id="realDataSource"
        class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="OraclePoolDS" />
    <property name="jndiTemplate" ref="jnditemplate" />
</bean>
<bean id="jnditemplate"
        class="org.springframework.jndi.JndiTemplate">
    <property name="environment">
        <props>
            <prop key="java.naming.factory.initial">
                jeus.jndi.JNSContextFactory
            </prop>
            <prop key="java.naming.provider.url">server.ip:9736</prop>
        </props>
    </property>
</bean> 

<bean id="commonDataSource" class="]]><emphasis role="bold">net.sf.log4jdbc.AnyframeDataSourceSpy</emphasis><![CDATA[">
    <property name="dataSource" ref="realDataSource"/>
</bean>]]></programlisting>
                			</para>
              			</listitem>
            		</orderedlist>
          		</listitem>
       	</itemizedlist>
      	</section>
	</section>

	<section id="core_logging_sqllogging_queryservice">
		<title>Step 4. Query service definition</title>

		<para>
			<emphasis role="bold">Define bean id of dataSource which query service is referring to as 'commonDataSource', a bean id of above-defined dataSource.</emphasis>
			The following is a part of sample context-query.xml file which defines
				the properties of query service.			
      		<programlisting language="xml"><![CDATA[<bean name="queryService" class="anyframe.core.query.impl.QueryServiceImpl">
    <property name="jdbcTemplate">
        <ref]]> <emphasis role="bold"><![CDATA[bean="jdbcTemplate"]]></emphasis><![CDATA[/>
    </property>
    <config:configuration>
        <filename>classpath:mappings/emp-user-userservice-mapping.xml</filename>
        <nullcheck type="VARCHAR" default-value=""/>
        <sqlload dynamic="false" frequency="5"/>
        <skiperror>true</skiperror>
    </config:configuration>
</bean>

<bean]]> <emphasis role="bold">id="jdbcTemplate"</emphasis> <![CDATA[class="anyframe.core.query.impl.util.PagingJdbcTemplate">
    <property name="dataSource"]]> <emphasis role="bold">ref="commonDataSource"</emphasis> <![CDATA[/>
</bean>]]></programlisting>
		</para>
	</section>

	<section id="core_logging_sqllogging_logger">
		<title>Step 5. Logger definition</title>

		<para>
			To record a log using lo4jdbc, refer to the following log4j.xml file
			and define the necessary logger.			
      	</para>

		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">jdbc.sqlonly</emphasis> : Logs SQL statement only, and in the case of prepared statement,
						SQL replaced with the relevant argument value is shown.			
          		</para>
        	</listitem>

        	<listitem>
          		<para>
          			<emphasis role="bold">jdbc.sqltiming</emphasis> : Contains SQL statement and time information (milliseconds) used for executing the SQL.          		
          		</para>
        	</listitem>

        	<listitem>
				<para>
					<emphasis role="bold">jdbc.audit</emphasis> : Logs JDBC call information.
						As large amount of logs are created,
						unless special JDBC tracing is necessary, this usage is not recommended.					
          		</para>
        	</listitem>

        	<listitem>
          		<para>
          			<emphasis role="bold">jdbc.resultset</emphasis> : As all JDBC call information will be logged including result set, 
						vast amount of log is created.					
          		</para>
        	</listitem>
      	</itemizedlist>

      	<para>
      		In addition, you can select log level for each logger among DEBUG, INFO, ERROR.      
      	</para>

		<itemizedlist>
        	<listitem>
         	 	<para>
         	 		DEBUG - Logs the class name where SQL was executed and line number.         	 
         	 	</para>
        	</listitem>

        	<listitem>
          		<para>
          			INFO - Logs SQL statement          		
          		</para>
        	</listitem>

        	<listitem>
          		<para>
          			ERROR - In the case of SQL execution error, logs stack trace information.          		
          		</para>
        	</listitem>
      	</itemizedlist>

      	<para>
      		However, when using JNDIDataSource defined in WebLogic Server,
					As log4j.xml file must be loaded in JNDIDataSource which was added to WAS,
					note that log4j-1.2.15.jar and log4j.xml must be set on classpath of the relevant WAS.
					On WebLogic 9.2, in the case of log4j.xml, you can compress the file in jar file type and
					locate it in [Domain Server Home/lib] or add the following to the JAVA option to 
					execute WebLogic
				Server.
			 <programlisting>-Dlog4j.configuration=file:///path../log4j.xml</programlisting>
		</para>
      	<warning>
      		<title>When monitoring through Anyframe Monitoring Tool</title>
      		 <para>
      	 		When monitoring through Anyframe Monitoring Tool on the relevant web application,
				ClassCastException occurs when loading WAS due to logging handling logic.
				Therefore, -Dlog4j.defaultInitOverride=true option must be added.
				In this case, log on Monitoring Agent cannot be checked.			
			</para>      
      	</warning>          
	</section>
</chapter>
