<chapter id="core_logging_logging">
	<title>Logging</title>
    <para>
    	Various levels (DEBUG, INFO, WARN, ERROR, FATAL) can be selected
			according to the contents of log.
			Each can record a log using five methods of debug(), info(), warn(),
			error(), fatal().
			But, if any specific log level was already set in logger, logging event
			other than the preset log level is ignored.
			Hence, no log left. In addition, If log message is recorded using message key
			defined in another resource file,
			message modification or internationalization becomes easier.
			The following is <link linkend="core_logging_logging_basic">basic method</link> 
			to record a log message and how to use
			<link
    linkend="core_logging_logging_resourcebundle">ResourceBundle</link>.
        </para>

	<section id="core_logging_logging_basic">
      	<title>Basic how-to-use</title>

      	<para>
      		The following is a part of MovieServiceImpl.java code to record a log message using basic how-to-use.				
      					<programlisting language="java"><![CDATA[/**
 * According to the file definition of src/main/resources/log4j.xml,
 logger name searches for logger relevant to anyframe.sample.logging package
 and records a log message through the logger in this test.
 */
@Service("movieService")
public class MovieServiceImpl implements MovieService {

    public void create(Movie movie) throws Exception {
        MovieService.LOGGER.debug("DEBUG - call create");
        MovieService.LOGGER.warn("WARNING - call create");
        MovieService.LOGGER.error("ERROR - call create");
        movieDao.create(movie);
    }

    public Movie get() throws Exception {
        MovieService.LOGGER.debug("DEBUG - call get");
        MovieService.LOGGER.warn("WARNING - call get");
        MovieService.LOGGER.error("ERROR - call get");
        return movieDao.get();
    }
}]]></programlisting>
      	</para>
	</section>

	<section id="core_logging_logging_resourcebundle">
      	<title>How to use ResourceBundle</title>

      	<para>
      		To record a log message using ResourceBundle in implementation
				class of a specific service, follow the following process.			
      	</para>

      	<para>
      		<emphasis role="bold">
      		1. Define MessageSource providing ResourceBundle-managing function.  </emphasis>
      	</para>

      	<para>
      		The following is a part of context-common.xml file defining MessageSource
				bean.
      		<programlisting language="xml"><![CDATA[<bean name="messageSource" 
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    <property name="basenames">
        <list>
            <!-- ... -->
            <value>
               classpath:/message/message-sample
            </value>
        </list>
        <!-- ... -->
    </property>
</bean>]]></programlisting>
      	</para>

		<para>
      		<emphasis role="bold">2. To recognize MessageSource bean, implementation class of a specific service must execute implements
					ApplicationContextAware.</emphasis>
      	</para>

      	<para>
			The following is a part of MovieServiceImpl.java recording a log
				message using messageSource bean.			
      		<programlisting language="java">public class MovieServiceImpl implements MovieService{
    @Inject
    private MessageSource messageSource;
    // ...
}        </programlisting>
      	</para>

		<para>
      		<emphasis role="bold">3. When logging using logging service, use messageSource bean.
      	</emphasis>
		</para>

		<para>
      		The following is MovieService.java, an interface class
				which defined logger to use in service implementation class.				
      		<programlisting language="java">public interface MovieService {
    // Define logger to use at MovieServiceImpl.
    <emphasis role="bold">Log LOGGER = LogFactory.getLog(MovieService.class);</emphasis>
    String greet();
}       </programlisting>
		</para>

		<para>
			The following is a part of MovieServiceImpl.java, implementation class
			which records log message by using ResourceBundle.		
      		<programlisting language="java">public String greet() {
    // Records a log message using ResourceBundle. (When there is no argument)
    <emphasis role="bold">MovieService.LOGGER.debug(messageSource.getMessage(</emphasis>
        <emphasis role="bold">"sample.default.msg", new String[] {}, Locale.getDefault()));</emphasis>
    // Records a log message using ResourceBundle. (When there is one argument)
    <emphasis role="bold">MovieService.LOGGER.debug(messageSource.getMessage(</emphasis>
        <emphasis role="bold">"sample.msg", new String[] { "Anyframe" }, Locale.getDefault()));</emphasis>
    return "Hello";
}        </programlisting>
		</para>

		<para>
			* message-sample.properties of resource file in the above reference
				has the following definition of key=value format.				
      		<programlisting><emphasis role="bold">sample.default.msg=Hello Guest</emphasis>
<emphasis role="bold">sample.msg=Hello {0}</emphasis></programlisting>
		</para>
    </section>
</chapter>


