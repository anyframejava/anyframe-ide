<chapter id="core_logging_configuration">
	<title>Configuration</title>
    <para>
    	This chapter covers some tags mainly-used among the tags configuring
			log4j.xml file.
			For more details, refer to
			<ulink url="http://logging.apache.org/log4j/">Log4j </ulink>.
			&lt;log4j:configuration&gt;, a root tag of log4j.xml file can have
			sub tags such as appender, logger, root.    
   	 </para>

  	<informaltable>
		<tgroup cols="3">
       		<colspec colnum="1" colname="col1" colwidth="2*"/>
    		<colspec colnum="2" colname="col2" colwidth="7*"/>
       		<colspec colnum="3" colname="col3" colwidth="1*"/>       
       		<thead>
          		<row>
	           	 	<entry align="center">Tag name</entry>

	            	<entry align="center">Description</entry>
	
    	        	<entry align="center">Whether or not necessary</entry>
      	 	   	</row>
       		 </thead>

        	<tbody>
          		<row>
            		<entry>appender</entry>

           			<entry>Defines the target and way of showing log.
							Can define several appenders.
						</entry>

            		<entry align="center">N</entry>
          		</row>

          		<row>
            		<entry>logger</entry>

            		<entry>Defines loggers to be used in application.
							Can defile several loggers.
						</entry>

            		<entry align="center">N</entry>
          		</row>

          		<row>
            		<entry>root</entry>
	
            		<entry>Defines root logger of all loggers.</entry>

            		<entry align="center">N</entry>
          		</row>
        	</tbody>
      	</tgroup>
    </informaltable>

    <para>
		Let's take a close look at each tag listed in the table above.
	</para>

	<section id="core_logging_configuration_appender">
		<title>appender</title>

     	<para>
			Log4j supports various logging way starting from the
				simplest console to file, DB, SMPT, etc.			
    	</para>

    	<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">org.apache.log4j.ConsoleAppender
   					</emphasis>: ConsoleAppender to show on the console.
						The following is property definition of ConsoleAppender in log4j.xml
						file.					
        			<programlisting language="xml"><![CDATA[<appender name="console" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d %p [%c] - %m%n" />
    </layout>   
</appender>]]></programlisting>
				</para>
        	</listitem>

        	<listitem>
				<para>
					<emphasis role="bold">org.apache.log4j.FileAppender
          			</emphasis>: Appender to show a log in a specific file.
						This can define parameter such as Append, File.
						The following is the property definition of FileAppender in
						log4j.xml file.					
         			<programlisting language="xml"><![CDATA[<appender name="file" class="org.apache.log4j.FileAppender">
    <!-- parameter to define log file name -->
    <param name="File" value="./logs/file/sample.log"/>
    <!-- parameter to define whether or not to add log to the previous log file  -->
    <param name="Append" value="true"/>    	  
    <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d %p [%c] - %m%n" />
    </layout>   
</appender>]]></programlisting>
				</para>
        	</listitem>
						
        	<listitem>
				<para>
					<emphasis role="bold">org.apache.log4j.RollingFileAppender
          			</emphasis>: As FileAppender continuously has log in a designated file, the size
						of one file can be extremely big,
						making planned log management difficult.
						Therefore, by setting the size of file of file backup index,
						if a file becomes bigger than a certain level, change existing file
						to backup file
						and start logging from the beginning.
						This can define parameters such as File, Append,
						MaxFileSize, MaxBackupIndex under it.
						The following is the property definition of RollingFileAppender in
						log4j.xml file.					
          			<programlisting language="xml"><![CDATA[<appender name="rollingFile" class="org.apache.log4j.RollingFileAppender">
    <!-- parameter to define log file name -->
    <param name="File" value="./logs/rolling/sample.log"/>
    <!-- parameter to define whether or not to add log to the previous log file -->
    <param name="Append" value="true"/> 
    <!-- parameter to define the maximum size of log file -->    
    <param name="MaxFileSize" value="1KB"/>    
    <!-- parameter to define log file backup index -->
    <param name="MaxBackupIndex" value="2"/>    
    <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d %p [%c] - %m%n" />
    </layout>   
</appender>]]></programlisting></para>
        </listitem>
                <listitem>
				<para>
					<emphasis role="bold">org.apache.log4j.DailyRollingFileAppender
   					</emphasis>: Appender to generate the log file according to the schedule. 
   					It can be set as the first day of every month, the first day of every week, midnight and noon every day, every hour, etc.
   					A few date formats for DailyRollingFileAppender file are as below. 
   					<itemizedlist>
	   					<listitem><para>'.'yyyy-MM : Log file changes in every month  </para></listitem>
	   					<listitem><para>'.'yyyy-ww : Log file changes in every Monday </para></listitem>
	   					<listitem><para>'.'yyyy-MM-dd : Log file changes every midnight </para></listitem>
	   					<listitem><para>'.'yyyy-MM-dd-a : Log file changes at noon and midnight  </para></listitem>
	   					<listitem><para>'.'yyyy-MM-dd-HH : Log file changes at every hour </para></listitem>
	   					<listitem><para>'.'yyyy-MM-dd-HH-mm : Log file changes at every minute </para></listitem>
   					</itemizedlist>
   					For more details, please refer to url="http://logging.apache.org/log4j/1.2/apidocs/index.html">Log4j API  		 
   					The following is the property definition of ConsoleAppender in log4j.xml file. 
        			<programlisting language="xml"><![CDATA[<appender name="dailyRollingFile" class="org.apache.log4j.DailyRollingFileAppender">
    <!-- parameter to define the log file name -->
    <param name="File" value="./logs/daily/sample"/>
    <!-- parameter for the schedule to generate the log file -->
    <param name="DatePattern" value="'.'yyyy-MM-dd"/>
    <!-- parameter to define whether to add log to the previous log file -->
    <param name="Append" value="true"/>
    <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d %p [%c] - %m%n"/>
    </layout>
</appender>]]></programlisting>
				</para>
        	</listitem>
        <listitem>
			<para>
          		<emphasis role="bold">org.apache.log4j.jdbc.JDBCAppender
          		</emphasis> : Appender to show a log in DB.
						It can define parameters such as Driver, URL, User, Password, Sql.
						The following is the property definition of JDBCAppender in log4j.xml
						file. 				
				<programlisting language="xml"><![CDATA[<appender name="db" class="org.apache.log4j.jdbc.JDBCAppender">
    <!-- Parameter to define JDBC Driver -->
    <param name="Driver" value="org.hsqldb.jdbcDriver"/>
    <!-- parameter to define DB URL -->
    <param name="URL" value="jdbc:hsqldb:hsql://localhost/sampledb"/>
    <!-- parameter to define DB user -->
    <param name="User" value="sa"/>
    <!-- parameter to define DB password -->
    <param name="Password" value=""/>
    <!-- parameter to define executing query when leaving a log -->
    <param name="Sql" value="insert into STMR_LOG (msg)
            values('%d %p [%c] - %m%n')"/>
</appender>]]></programlisting>
				</para>
        	</listitem>
      	</itemizedlist>

      	<para>
      		<emphasis role="bold">Appender Layout</emphasis>
      	</para>

      	<para>
      		When leaving a log, in addition to simple message, various information
				such as thread name, logging time, etc. of logging target can be combined. Layout contains
				org.apache.log4j.HTMLLayout, org.apache.log4j.PatternLayout,
				org.apache.log4j.SimpleLayout, org.apache.log4j.xml.XMLLayout, etc.
				Among these, the most common layout is PatternLayout,
				which can combine various log messages like printf of C function.		
      	</para>
      			
      	<itemizedlist>
			<listitem>
          		<para>
          			%p : Shows priorities such as debug, info, warn, error,
						fatal, etc.						
         		</para>
        	</listitem>

        	<listitem>
          		<para>
          			%m : Shows log defined as functions such as
						debug(), info(), warn(), error(), fatal(), etc.						
         		</para>
        	</listitem>

        	<listitem>
          		<para>
          			%d : Logging time when logging event occurred.
						Shows format follows the format defined in {} after %d.
						It can be used in formats such as %d{HH:mm:ss, SSS} or %d{yyyy MMM dd
						HH:mm:ss, SSS}.
						Definition can be made according to SimpleDateFormat type of Java.					
          		</para>
        	</listitem>

        	<listitem>
          		<para>
          			%t : Shows the name of thread where logging event
						occurred.						
          		</para>
        	</listitem>

        	<listitem>
          		<para>
          			%% : Used to show % /%
          		</para>
        	</listitem>

        	<listitem>
          		<para>
          			%n : Shows Newline subject to platform. It will be \r\n or \n.          			
          		</para>
        	</listitem>
      	</itemizedlist>
	    <warning>
	    	<title>Notes for when using log4j-1.2.x version /log4j-1.2.x </title>
	    	<para>
	    		When using JDBCAppender, log4j-1.3.x version gets connection from connection pool,	    	
			but as connection object is created every time in log4j-1.2.x version,
			so note that there may be some resource issue.
			    	</para>
	    </warning>      	
    </section>

	<section id="core_logging_configuration_logger">
      	<title>logger</title>
		<para>
      		When logging event occurs, log message is sent to the relevant
				logger searching for declared logger.
				When additivity is true, log message is sent to the root logger as well.
				The following is the property definition of logger in log4j.xml
				file.
				
      		<programlisting language="xml"><![CDATA[<!-- When the logger name begins with anyframe.services, 
      		log is left with DEBUG level in console. -->
<logger name="anyframe.services">
    <!-- Select among DEBUG, INFO, WARN, ERROR, FATAL, OFF -->
    <level value="DEBUG"/>
    <!-- Can define various appender-ref -->
    <appender-ref ref="console"/>
</logger>]]></programlisting>
		</para>
    </section>
    
 	<section id="core_logging_configuration_root">
		<title>root</title>

		<para>
      		When the relevant logger or root logger does not exist,
				all logs are shown according to the root logger policy.
				The following is the property definition of root in log4j.xml file.
				
      		<programlisting language="xml"><![CDATA[<root>
    <level value="INFO"/>
    <appender-ref ref="console"/>
</root>]]></programlisting>
		</para>
 	</section>
 	
</chapter>
