<chapter id="core_springmvc_architecture">
	<title>Architecture</title>
	<para>
		Spring MVC uses Model2 architecture based on MVC pattern, and consists of Model, View, Controller components.
	</para>
	<itemizedlist>
		<listitem>
			<para>
				<emphasis role="bold">Model</emphasis>
				: Spring MVC does not directly provide information on how to make model components. 
				Instead, any model component that is implemented using technology such as EJB (Enterprise
				Java Beans), JDO (Java Data Objects), JavaBeans, and ORM (Object to Relational Mapping framework ), can be accessed. 
				Also, form input field can be binded into model object without developing a special form object. 
				In this case, type is converted to fit the defined type through automatic mapping as model object attribute. 
				However, attribute name and input field name should match. 
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis role="bold">View</emphasis>
				: Produces view component using tag library provided by standard JSP or Spring MVC. 
				In Spring MVC, special bean, html, logic tag is not provided, 
				and using JSTL which is a standard JSP tag is recommended. 
				You can consider selecting other technologies such as Application-Specific
				Custom tag, and Image Rendering Component to reuse component, reduce management errors, and minimize the number of errors. 
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis role="bold">Controller </emphasis>
				: Spring MVC provides various Annotations so that the controller (Spring MVC refers to is as Handler) that handles request entered in server can be easily developed. 
			    Spring MVC DispatcherServlet receives all requests, 
			    and works as a "Front Controller" that sends requests to Controller that handles the requests.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The request processing workflow of DispatcherServlet which plays FrontController role is shown in the below figure. 
	</para>
	<mediaobject>
		<imageobject>
			<imagedata align="center" fileref="../image/core/springmvc/dispatcher.jpg" />
		</imageobject>
	</mediaobject>
	<para>
		As seen in the above figure, all requests go through Front Controller, 
		and DispatcherServlet plays the Front Controller role in Spring MVC. 
		DispatcherServlet receives all requests, handles tasks related to Locale, Theme, Multipart, etc., 
		finds handler to handle each request, and returns request. 
		After handler handles request, 
		if ModelAndView object that includes view information and return information are returned to DispatcherServlet, 
		DispatcherServlet will find view through ModelAndView object and ViewResolver, 
		and return reply through related view. 
	</para>
</chapter>