<?xml version="1.0" encoding="UTF-8"?>

	<!-- 3.2.4 -->
	<section id="core_spring_beandefinitionprofiles_activation_profiles_annotation">
		<title>@ActiveProfiles</title>
		<para>
			Annotation을 활용하여 profile을 활성화시킬 수 있다.
			다음코드는 "Prod" profile을 활성시키는 예제이다.
		</para>
		<programlisting language="java">
		<emphasis role="bold">@ActiveProfiles("Prod")</emphasis>
public class ProdProfileTestWithAnnotation extends
		DefaultProfileTestWithAnnotation {

	@Autowired
	private Movie movie;
	
	@Test
	@Override
	public void getMovie() {
		assertNotNull(movie);
		assertEquals("Prod", movie.getTitle());
	}

}
		</programlisting>
	</section>
	
	<!-- 3.2.5 -->
	<section id="core_spring_beandefinitionprofiles_activation_profiles_activeprofilesresolver">
		<title>ActiveProfilesResolver</title>
		<para>
			@ActiveProfile의 속성으로 resolver를 등록하여 사용자가 직접 programmatic한 방식으로 활성화시킬 수 있다.
			다음코드는 MovieActiveProfileResolver를 resolver로 지정한 예제이다.
		</para>
		<programlisting language="java">
		<emphasis role="bold">@ActiveProfiles(resolver = MovieActiveProfileResolver.class)</emphasis>
public class DevProfileTestWithAnnotation extends
		DefaultProfileTestWithAnnotation {

	@Autowired
	private Movie movie;
	
	@Test
	@Override
	public void getMovie() {
		assertNotNull(movie);
		assertEquals("Dev", movie.getTitle());
	}

}
		</programlisting>
		<para>
			org.springframework.test.context.ActiveProfilesResolver Interface의 resolve 메소드를 구현한다
			다음 코드는 @ActiveProfile과 유사하게 동작하는 예제이다.
		</para>
		<programlisting language="java">
		<![CDATA[
		public class MovieActiveProfileResolver implements ActiveProfilesResolver{

	@Override
	public String[] resolve(Class<?> testClass) {
		String profile = null;
		
		if(testClass.getName().contains("Dev")){
			profile = "Dev";
		}else if (testClass.getName().contains("Prod")){
			profile = "Prod";
		}
		
        return new String[] {profile};
	}

}]]></programlisting>
	</section>

<!-- 3.4 -->
<section id="core_spring_beandefinitionprofiles_conditional">
	<title>@Conditional</title>
	
	<para>
		@Profile와 비슷한 기능으로 사용자가 직접 programmatic한 방식으로  서로 다른 bean 설정을 등록할 수도 있는데, 이때 사용되는 것이 @Conditional 이다.
	</para>
	<!-- 3.4.1 -->
	<section id="core_spring_beandefinitionprofiles_conditional_example">
		<title>Annotation 기반의 Conditional 적용</title>
		<para>
			사용법은 기존 @Profile과 동일하며 Conditional.class를 속성으로 사용한다.
			이해를 위하여 다음에 나오는 Java Based Configuration 의 내용을 참고하는 것이 좋다.
		</para>
		
		<programlisting language="java">@Configuration
		public class ConditionalConfig {
	<emphasis role="bold">
	@Conditional(DevCondition.class)</emphasis>
	@Bean(name="movie")
	public Movie getDevMovie(){
		Movie movie = new Movie();
		movie.setTitle("Dev");
		return movie;
	}
	<emphasis role="bold">
	@Conditional(ProdCondition.class)</emphasis>
	@Bean(name="movie")
	public Movie getProdMovie(){
		Movie movie = new Movie();
		movie.setTitle("Prod");
		return movie;
	}
	<emphasis role="bold">
	@Conditional(DefaultCondition.class)</emphasis>
	@Bean(name="movie")
	public Movie getDefaultMovie(){
		Movie movie = new Movie();
		movie.setTitle("Default");
		return movie;
	}
}</programlisting>
		<para>
			org.springframework.context.annotation.Condition Interface의 matchs 메소드를 구현한다.
			다음 코드는 "os.name" 환경변수에 따라 동작하는 Condition 예제이다.
		</para>
		<programlisting language="java">
		public class DevCondition implements Condition {
	
	@Override
	public boolean matches(ConditionContext context, AnnotatedTypeMetadata arg1) {
		return context.getEnvironment().getProperty("os.name").contains("Linux");
	}

}</programlisting>
		<programlisting language="java">
		public class ProdCondition implements Condition {
	
	@Override
	public boolean matches(ConditionContext context, AnnotatedTypeMetadata arg1) {
		return context.getEnvironment().getProperty("os.name").contains("Windows");
	}

}</programlisting>
		<programlisting language="java">
		public class DefaultCondition implements Condition {
	
	@Override
	public boolean matches(ConditionContext context, AnnotatedTypeMetadata arg1) {
		return !context.getEnvironment().getProperty("os.name").contains("Linux") &&
				!context.getEnvironment().getProperty("os.name").contains("Windows");
	}

}</programlisting>
	</section>
</section>

