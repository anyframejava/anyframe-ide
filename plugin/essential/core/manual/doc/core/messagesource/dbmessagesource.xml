<chapter id="core_db_messagesource">
	<title>DatabaseMessageSource</title>
	<para>
		Spring에서 제공하는 ResourceBundleMessageSource나 이를 확장하여 개발된 Anyframe의 EncodingResourceBundleMessageSource는 모두 파일 기반으로 Message들을 
		지원한다. Anyframe에서는 대용량의 Message들에 대한 처리 및 보다 안전한 관리가 필요한 경우를 위해 DB 기반의 MessageSource 기능을 제공하고 있다. 
	</para>
	<para>
		이 기능을 제공하는 구현체는 org.anyframe.spring.message.DatabaseMessageSource이다. DatabaseMessageSource는 모든 Locale별 Message들이 1 개의
		테이블 내에 정의되어 있음을 전제하고 있으므로 Message 관리 테이블은 다음에 해당하는 칼럼들을 포함하도록 구성하고, Locale별 Message를 추가해야 한다.
		(테이블명 및 칼럼명은 변경 가능하다.)	
		<itemizedlist>
	    	<listitem>
	      		<para>KEY 칼럼 : Message Resource 식별을 위한 KEY 정보 보관 (VARCHAR 타입, PRIMARY KEY)</para>
	      	</listitem>
	      	<listitem>
	      		<para>LANGUAGE 칼럼 : 지정된 Locale에 맞는 Message 추출을 위한 <ulink url="http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt">ISO Language Code</ulink> 정보 보관 (VARCHAR 타입, PRIMARY KEY)</para>
	      	</listitem>
	      	<listitem>	      		
	      		<para>COUNTRY 칼럼 : 지정된 Locale에 맞는 Message 추출을 위한 <ulink url="http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html">ISO Country Code</ulink> 정보 보관 (VARCHAR 타입, PRIMARY KEY)</para>
	      	</listitem>
	      	<listitem>
	      		<para>TEXT 칼럼 : 추출될 Message 내용 보관 (VARCHAR 타입)</para>
	      	</listitem>
	    </itemizedlist>
		위와 같이 구성된 테이블을 이용하여 DatabaseMessageSource는 입력된 Locale 정보(Language 정보, Country 정보)와 Message Key를 기반으로 적절한 Message를 전달하여 
		어플리케이션의 국제화를 지원하게 되는 것이다.
	</para>
	<section id="core_db_messagesource_configuration">
		<title>Configuration</title>
		<para>
			DatabaseMessageSource를 활용하기 위해서는 다음과 같은 속성들이 정의되어 있어야 한다. 다음에서 각 속성이 가지는 의미에 대해 알아보기로 하자.
		</para>
	    <informaltable>
	    	<caption>DatabaseMessageSource 속성 목록</caption>
			<tgroup cols="4">
				<colspec colname="col1" colnum="1" colwidth="2.5*" />
				<colspec colname="col2" colnum="2" colwidth="6*" />
				<colspec colname="col3" colnum="3" colwidth="1*" />
				<colspec colname="col4" colnum="4" colwidth="1*" />
		
				<thead>
					<row>
						<entry align="center">Property</entry>
						<entry align="center">Description</entry>
						<entry align="center">Required</entry>
						<entry align="center">Default Value</entry>
					</row>
				</thead>
		
				<tbody>
					<row>
						<entry>dataSource</entry>
						<entry>참조할 dataSource Bean의 id를 정의한다. Message들을 보관하고 있는 DB에 접근하기 위해 필요한 속성이다.</entry>
						<entry>Y</entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>messageTable</entry>
						<entry>
							Message들을 관리하는 테이블에 대한 정보를 Properties 형태로 정의한다.
							Properties 내에는 다음과 같은 Property를 정의할 수 있다.
							<itemizedlist>
								<listitem>
									<para>table : Message 관리 테이블명 (Default = MESSAGE_SOURCE)</para>
								</listitem>
								<listitem>
									<para>key.column : Message KEY를 저장하기 위한 칼럼명 (Default = KEY)</para>
								</listitem>
								<listitem>
									<para>language.column : 해당 Message가 속한 ISO language code를 저장하기 위한 칼럼명 (Default = LANGUAGE)</para>
								</listitem>
								<listitem>
									<para>country.column : 해당 Message가 속한 ISO country code를 저장하기 위한 칼럼명 (Default = COUNTRY)</para>
								</listitem>	
								<listitem>
									<para>text.column : Message 내용을 저장하기 위한 칼럼명 (Default = TEXT)</para>
								</listitem>																							
							</itemizedlist>
						</entry>
						<entry>N</entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>defaultLanguage</entry>
						<entry>
							DatabaseMessageSource는 defaultLanguage, defaultCountry 속성 정보를 기반으로 기본 locale 정보를 셋팅한다.
							그리고 입력된 Locale에 맞는 적절한 Message를 찾지 못할 경우 기본 locale에 맞는 Message를 찾아 전달한다.
							만약 기본 locale에 맞는 Message도 존재하지 않을 경우 NoSuchMessageException이 발생한다.
							따라서, 기본 적용될 <ulink url="http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt">ISO language code</ulink>를
							정의한다.
						</entry>
						<entry>N</entry>
						<entry>en</entry>
					</row>	
					<row>
						<entry>defaultCountry</entry>
						<entry>
							DatabaseMessageSource는 defaultLanguage, defaultCountry 속성 정보를 기반으로 기본 locale 정보를 셋팅한다.
							그리고 입력된 Locale에 맞는 적절한 Message를 찾지 못할 경우 기본 locale에 맞는 Message를 찾아 전달한다.
							만약 기본 locale에 맞는 Message도 존재하지 않을 경우 NoSuchMessageException이 발생한다.
							따라서, 기본 적용될 <ulink url="http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html">ISO country code</ulink>를
							정의한다.						
						</entry>
						<entry>N</entry>
						<entry>US</entry>
					</row>
					<row>
						<entry>cacheManager</entry>
						<entry>
							DatabaseMessageSource는 효율적인 Message 조회를 위해 내부적으로 Ehcache를 사용하고 있다. 한 번 조회된 Message는 
							Cache에 저장되므로, 다음번 조회시 DB에 다시 접근할 필요가 없게 된다. (단, Cache 속성 정의에 따라 달라질 수 있음.)
							Cache 기능을 연동하려면 Spring에서 제공되는 org.springframework.cache.ehcache.EhCacheCacheManager를 통해 별도 Spring Bean으로 등록된 cacheManager의 id를  정의하여 준다. 
							기본적으로 Ehcache는  별도 속성 파일을 정의하여 캐싱된 객체를 관리하는데 databaseMessageSourceCache 이름으로 캐시를 추가하여야 한다.
						</entry>
						<entry>N</entry>
						<entry>N/A</entry>
					</row>					
					<row>
						<entry>lazyLoad</entry>
						<entry>
							특정 테이블을 통해 관리되는 모든 Message들을 미리 로드할 것인지 여부를 정의한다.
							lazyLoad가 true인 경우 getMessage() 메소드 호출을 통해 개별 Message를 찾을 때에 DB에 접근하여 해당 Message를 찾고 내부 Cache에 저장한다.
							lazyLoad가 false인 경우 DatabaseMessageSource bean이 인스턴스화된 이후, 대상 테이블로부터 모든 Message를 찾아 Cache에 저장한다.
							이 경우 cacheConfiguration에 정의된 timeToLive, timeToIdle 속성과 최대 캐싱 데이터 수는 무시된다. 
						</entry>
						<entry>N</entry>
						<entry>true</entry>
					</row>																		
				</tbody>
		</tgroup>
		</informaltable>
		<para>
			다음은 위에서 언급한 DatabaseMessageSource의 속성 정의를 포함하고 있는 context-message.xml의 일부이다. 		
		</para>
		<programlisting language="xml"><![CDATA[<bean id="messageSource" 
    class="]]><emphasis role="bold"><![CDATA[org.anyframe.spring.message.DatabaseMessageSource]]></emphasis><![CDATA[">
    <property name="dataSource" ref="dataSource"/>
    <property name="messageTable">
        <props>
            <prop key="table">TEST_MESSAGE_SOURCE</prop>
            <prop key="text.column">MESSAGE</prop>
        </props>
    </property>
    <property name="cacheManager" ref="cacheManager" />    
    <property name="cacheConfiguration" value="classpath:/spring/message/ehcache.xml"/>
</bean>

<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
    p:cache-manager-ref="ehcache" />

<bean id="ehcache"
    class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
    p:config-location="classpath:spring/message/ehcache.xml" />]]></programlisting>	
		<para>
			별도로 정의된 ehcache.xml 파일에는 다음과 같이 databaseMessageSourceCache 이름으로 지정된 캐시를 정의하여 준다.
			Ehcache 설정을 위한 보다 자세한 내용은 <ulink url="http://ehcache.org/documentation/configuration.html">Ehcache 매뉴얼</ulink>을 참고하도록 한다.
		</para>
		<programlisting language="xml"><![CDATA[<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../config/ehcache.xsd" name="cacheManager">

    <diskStore path="java.io.tmpdir"/>

    <defaultCache
            maxElementsInMemory="3"
            eternal="false"
            timeToIdleSeconds="1"
            timeToLiveSeconds="1"
            overflowToDisk="true"
            maxElementsOnDisk="10000000"
            diskPersistent="false"
            diskExpiryThreadIntervalSeconds="120"
            memoryStoreEvictionPolicy="LRU"
            />

    <cache name="]]><emphasis role="bold">databaseMessageSourceCache</emphasis><![CDATA[" 
            maxElementsInMemory="3"
            eternal="false"
            timeToIdleSeconds="1"
            timeToLiveSeconds="1"
            overflowToDisk="true"
            maxElementsOnDisk="10000000"
            diskPersistent="false"
            diskExpiryThreadIntervalSeconds="120"
            memoryStoreEvictionPolicy="LRU"
            />
</ehcache>]]></programlisting>               
	</section>
	<section id="core_db_messagesource_import_export">
		<title>Import/Export/Refresh Messages</title>
		<para>
			DatabaseMessageSource는 대량의 Message들을 한번에 Message 관리 테이블에 반영할 수 있도록 하기 위해 Import 기능을 제공한다.
			이를 위해서는 DatabaseMessageSource의 importMessages(final List<![CDATA[<Message>]]> messages) 메소드를 호출하면 된다. 이 때, 각 Message들은  
			org.anyframe.spring.message.Message 객체에 담겨져 있어야 함에 유의하도록 한다.
		</para>
		<para>
			또한 Message 관리 테이블에 보관된 모든 Message들을 추출해낼 수 있도록 하기 위해 Export 기능을 제공한다.
			이를 위해서는 DatabaseMessageSource의 List<![CDATA[<Message>]]> exportMessages() 메소드를 호출하면 된다. exportMessages() 메소드 호출 결과는  
			org.anyframe.spring.message.Message 객체의 List 형태로 전달된다. 각 Message 정보는 org.anyframe.spring.message.Message 객체에 담겨진다.		
		</para>
		<para>
			다음은 DatabaseMessageSource를 이용한 Message Import/Export를 수행하는 MessageMgmtServiceImpl의 일부이다.
		</para>
		<programlisting language="java"><![CDATA[public class MessageMgmtServiceImpl implements MessageMgmtService {
    @Inject
    MessageSource messageSource;
    
    public void importMessages() throws Exception {
        List<Message> messages = new ArrayList<Message>();
        Message message = new Message("error.moviefinderimpl.getpaginglist", "en",
            "US", "Movie List not displayed.");
        messages.add(message);  
        
        // ...
        // add messages to ArrayList
        
        ((DatabaseMessageSource) messageSource).importMessages(messages);  
    }	
    
    public 	List]]><![CDATA[<Message>]]><![CDATA[ exportMessages() throws Exception {
        return ((DatabaseMessageSource) messageSource).exportMessages();  
    }
}]]></programlisting>	
	 	<para>
	 		이 외에 Message 관리 테이블에 변경이 발생하였을 경우 변경 사항을 DatabaseMessageSource 내부의 Cache에 반영하는 작업이 필요할 것이다. 이를 위해서
	 		DatabaseMessageSource는 refresh() 메소드를 제공하고 있으며 호출시 다음과 같이 동작한다. 
	 		lazyLoad가 true인 경우 DatabaseMessageSource 내부의 캐싱된 데이터가 모두 삭제된다.
	 		lazyLoad가 false인 경우 DatabaseMessageSource 내부의 캐싱된 데이터가 모두 삭제되며, Message 관리 테이블로부터 모든 Message 정보를 읽어들여 Cache에 다시 저장한다.
	 	</para>
	</section>	
</chapter>