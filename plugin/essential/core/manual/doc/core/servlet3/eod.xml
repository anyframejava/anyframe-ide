<chapter id="core_servlet3_eod">
	<title>Ease of Development</title>
	<para>
		서블릿 3.0 에 새롭게 추가된 어노테이션과 자바 기반의 설정으로 손쉬운 개발을 할 수 있다.
	</para>
	<section id="core_servlet3_eod_easyconfigurationthroughannotations">
		<title>Easy configuration through annotations</title>
		<para>
			서블릿 3.0에는 개발자의 편의를 위하여 몇 가지 유용한 어노테이션들이 추가되었다. 개발자는 web.xml 파일에
			설정을 추가하는 대신 어노테이션을 이용하여 서블릿, 필터, 리스너 등을 정의할 수 있다.
			웹 어플리케이션의 배포서술자는
			‘metadata-complete’ 라는 새로운 속성을 가지는 데 이 속성은 배포시점에 web.xml 파일만으로 배포서술자가
			구성되는지 결정하거나 혹은 해당 jar파일의 클래스 파일들이 어노테이션이나 나 web-fragment 파일들을 위해
			처리되어야 하는지를 결정한다.
			‘metadata-complete’ 가 ‘true’ 로 정의 된다면 배포시점에서 클래스 파일이나
			web-fragment 파일에 선언된 서블릿 어노테이션들은 무시된다.
			‘metadata-complete’ 속성이 정의 되어있지
			않거나 ‘false’로 정의 되어 있다면 배포가 될 때 클래스 파일들과 web-fragment에 에
			선언된 어노테이션들이
			처리된다. 
		</para>
		<para>
			Servlet 3.0에는 다음과 같은 어노테이션들이 추가되었다.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">Annotations</emphasis>
				</para>
				<informaltable>
					<caption>Servlet 3.0에 새롭게 추가된 어노테이션 </caption>
					<tgroup cols="1">
						<thead>
							<row>
								<entry align="center">설 명</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>@WebServlet </entry>
							</row>
							<row>
								<entry>@WebInitParam</entry>
							</row>
							<row>
								<entry>@WebListener</entry>
							</row>
							
							<row>
								<entry>@WebFilter</entry>
							</row>
							<row>
								<entry>@MultipartConfig</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
			</listitem>
		</itemizedlist>
		<section id="core_servlet3_eod_@WebServlet">
			<title>@WebServlet</title>
			<para>
				@WebServlet어노테이션은 웹 어플리케이션 안의 서블릿을 정의할 때 사용 된다. 이 어노테이션은 어떤
				클래스에 대하여
				정의되며 어노테이션으로 선언되는 서블릿에 대한 메타 데이터를 포함한다. 어노테이션으로 서블릿을 선언할 때는
				‘urlPatterns’ 혹은 ‘value’속성이 이 반드시 정의되어야 하는데 그 외의 다른 모든 속성들은 선택적으로
				사용할 수 있다. 어노테이션을 통해서url 만 표기를 할 때에는 value 속성을 사용하는 건을 권장한다. value
				속성과 urlPatterns를 동시에 사용할 수 없다. 또한 해당 서블릿이 서블릿 컨테이너에 배포가 되려면 어노테이션을
				사용한 서블릿은 적어도 하나의 url 패턴을 정의해야 한다. 서블릿의 이름을 따로 정의를 하지 않는다면 패키지 경로를
				포함한 클래스 명이 서블릿의 이름이 된다. @WebServlet 어노테이션을 사용하는 클래스는 반드시
				javax.servlet.http.HttpServlet 클래스를 상속해야 한다.
				<emphasis role="bold">@WebServlet으로 어떤 서블릿을
					선언하였을 때 배포서술자web.xml에
					같은 name 속성으로 선언된 동일한 서블릿이 있다면 배포서술자에 선언된 서블릿이
					어노테이션으로 선언한 서블릿을 오버라이드
					한다는 점에 주의해야 한다.</emphasis>
				(어노테이션으로 선언된 서블릿의 인스턴스는
				초기화된다) 배포서술자에 선언된 서블릿과 어노테이션 서블릿의 이름이 일치하지
				않는다면 각각 다른 서블릿이 생성된다.
			</para>
			<para>
				다음은 @WebServlet을 사용한 예제이다.
			</para>
			<programlisting language="java"><![CDATA[package org.anyframe.sample.servletannotation.web.servlet;
…(생략)…
@WebServlet("/movieFinder.do")
public class MovieFinderSerlvet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	static Logger logger = Logger.getLogger(MovieFinderSerlvet.class);
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		logger.info("[ " + getServletName() + " ]" + " Servlet works.");
..생략…
		RequestDispatcher rd = request
				.getRequestDispatcher("/WEB-INF/jsp/moviefinder/movie/list.jsp");
		rd.forward(request, response);

}]]></programlisting>
			<para>
				위의 코드를 보면 @WebServlet 어노테이션을 통해 간단히 서블릿을 선언하고 있는 것을 알 수 있다. 위와
				같이 아무 속성을 정의하지 않고 문자열만 입력하면 입력된 값이 url로 간주되며 서블릿 명은 팩키지 경로를 포함한
				‘org.anyframe.sample.servletannotation.web.servlet.MovieFinderSerlvet’이
				된다. 서블릿 명을 임의로 지정을 하고 싶다면 ‘name’ 속성을 정의하고 서블릿을 호출할 url을
				‘urlPatterns’로 입력 받으면 된다. 위의 서블릿을 서블릿 2.5에서 web.xml을 이용하여 설정을 하면 다음과
				같을 것이다.
			</para>
			<para>
			위에서 언급한 payload 샘플 코드는 본 섹션 내의
			<link linkend="core_servlet3_eod_resources">다운로드 - anyframe-sample-servlet-annotation</link>
			를 통해 다운로드받을 수 있다.</para>
			 
			<programlisting language="xml"><![CDATA[<servlet>
	<servlet-name> 
	org.anyframe.sample.servletannotation.web.servlet.MovieFinderSerlvet
	</servlet-name>    
	<servlet-class>
	org.anyframe.sample.servletannotation.web.servlet.MovieFinderSerlvet
	</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name> 
	org.anyframe.sample.servletannotation.web.servlet.MovieFinderSerlvet
 	</servlet-name>
	<url-pattern>/movieFinder.do</url-pattern>
</servlet-mapping>]]>
			</programlisting>
			<para>위의 xml 예제를 보면 어노테이션으로 선언한 서블릿과 동일한 url을 사용하고 있다. 만약 서블릿 3.0
				API를 통해서 개발자가 어노테이션으로 서블릿을 선언한 상태에서 위와 같은 설정을 xml에 추가한다면
				'java.util.concurrent.ExecutionException:
				org.apache.catalina.LifecycleException' 같은 오류가
				발생할 것이다. 테스트를 한 환경은
				Tomcat 7.0버전이다. 개발자는 어노테이션과 xml을 동시에 사용할 경우에 주의를
				해서 사용할 필요가 있다.
			</para>
		</section>
		<section id="core_servlet3_eod_@WebInitParam">
			<title>@WebInitParam</title>
			<para> @WebInitParam 어노테이션은 단독으로는 사용할 수 없고 어노테이션을 통해서 서블릿이나 필터를 등록할 때
				속성을 정의하는데 사용되는 어노테이션이다. 예제는 @WebServlet 어노테이션과 함께
				@WebInitParam어노테이션을 사용한 예제이다. 매우 간단한 방법으로 사용이 가능함을 알 수 있다.
			</para>
			<programlisting language="java"><![CDATA[@WebServlet(name = " FileUploadForwadServlet ", urlPatterns = "/fileUpload.do", initParams = {
		@WebInitParam(name = "encoding", value = "utf-8"),
		@WebInitParam(name = "method", value = "list") })
public class FileUploadForwardServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	static Log log = LogFactory.getLog(FileUploadForwardServlet.class);

	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		log.info("[ " + getServletName() + " ]" + " Servlet works.");
		log.info("Encoding type : [ " + getInitParameter("encoding") + " ]");
…(생략)…
		response.sendRedirect("http://localhost:8080/anyframe-sample-eod/anyframe.jsp");
	}
}]]>
			</programlisting>
		<para>
			위에서 언급한 payload 샘플 코드는 본 섹션 내의
			<link linkend="core_servlet3_eod_resources">다운로드 - anyframe-sample-servlet-annotation</link>
			를 통해 다운로드받을 수 있다.</para>	
		</section>
		<section id="core_servlet3_eod_@WebFilter">
			<title>@WebFilter</title>
			<para>
				@WebFilter 어노테이션은 웹 어플리케이션을 위한 서블릿 필터를 정의한다. 필터의 이름을 정의하지 않는다면
				팩키지를
				포함한 클래스 명이 필터의 이름으로 사용된다. urlPatterns 속성, servletNames 속성 혹은
				value속성이 반드시 정의 되어야 하며 나머지 속성들은 선택적으로 사용할 수 있다. @WebServlet 어노테이션과
				마찬가지로 web.xml파일에 선언된 filter와 이름이 같다면 배포서술자는 web.xml파일에 선언된 filter에
				의해서 정의된다. 필터의 이름이 같지 않다면 각각 다른 필터가 생성될 것이다. ’asyncSupported’ 속성을
				true로 설정하여 비 동기 서블릿을 위한 비 동기 필터로 선언할 수 있다. @WebFilter어노테이션을 사용하는
				클래스들은 반드시 javax.servlet.Filter 인터페이스를 구현해야 한다.
				<note>비 동기 서블릿에 사용하는 필터를 동기로
					선언하면 실행 시에 ‘illegalStateException’이 발생하니
					사용에 주의해야 한다. 또한 @WebSerlvet
					어노테이션과 마찬가지로 urlPatterns만 사용한다면 value
					속성만 정의하는 것을
					권장하고 다른 속성들을 사용한다면 urtPatterns 속성을 사용하는 것이 좋다.</note>
			</para>
			<para>다음은 @WebListener를 통해서 필터를 선언한 예제 코드이다.
			</para>
			<programlisting language="java"><![CDATA[@WebFilter("/movie.do")
public class EncodingFilter implements Filter {

	public void destroy() {
	}

	public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {
		request.setAttribute("encoding", "utf-8");
		chain.doFilter(request, response);
	}
	public void init(FilterConfig fConfig) throws ServletException {
	}
}]]>
			</programlisting>
			<para>
			위에서 언급한 payload 샘플 코드는 본 섹션 내의
			<link linkend="core_servlet3_eod_resources">다운로드 - anyframe-sample-servlet-annotation</link>
			를 통해 다운로드받을 수 있다.</para>	
		</section>
		<section id="core_servlet3_eod_@WebListener">
			<title>@WebListener</title>
			<para>서블릿 컨테이너 리스너는 언제라도 서블릿 컨텍스트가 생성되는 이벤트를 받기 위하여 사용되고 웹 컨테이너에 의해서
				종료된다. @WebListener 어노테이션을 사용하기 위해서는 다음의 클래스들 중에 하나를 구현해야 한다.
			</para>
			<informaltable>
				<caption>Resource 구현체 목록</caption>
				<tgroup cols="2">
					<thead>
						<row>
							<entry align="center">Resource Implementation</entry>
							<entry align="center">Purpose</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left">javax.servlet.ServletContextListener</entry>
							<entry align="left">서블릿 컨텍스트의 라이프 사이클의 상태 변화에 관련된 이벤트 알림을 받는 인터페이스
							</entry>
						</row>
						<row>
							<entry align="left">javax.servlet.ServletContextAttributeListener
							</entry>
							<entry align="left">서블릿 컨텍스트 속성의 변화에 관련된 이벤트 알림을 받는 인터페이스</entry>
						</row>
						<row>
							<entry align="left">javax.servlet.ServletRequestListener</entry>
							<entry align="left">웹 어플리케이션 스코프로 요청이 입출력되는 이벤트 알림을 받는 인터페이스
							</entry>
						</row>
						<row>
							<entry align="left">javax.servlet.ServletRequestAttributeListener
							</entry>
							<entry align="left">서블릿 요청 속성 변화에 대한 이벤트 알림을 받는 인터페이스</entry>
						</row>
						<row>
							<entry align="left">javax.servlet.http.HttpSessionListener</entry>
							<entry align="left">HTTP 세션 라이프 사이클의 상태변화에 관련된 이벤트를 받는 인터페이스
							</entry>
						</row>
						<row>
							<entry align="left">javax.servlet.http.HttpSessionAttributeListener
							</entry>
							<entry align="left">HTTP 세션 속성의 변화에 관련된 이벤트 알림을 받는 인터페이스</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
			<para>다음은 @WebListener 어노테이션을 통해서 리스너를 구현한 예제이다</para>
			<programlisting language="java"><![CDATA[@WebListener
public class AnyframeSerlvetContextListener implements ServletContextListener {

	static Logger logger = Logger.getLogger(AnyframeSerlvetContextListener.class);

	public void contextInitialized(ServletContextEvent sce) {
		logger.info("[AnyframeSerlvetContextListener] Servlet Context has been initialized");
	}
	public void contextDestroyed(ServletContextEvent sce) {
		// TODO Auto-generated method stub
	}
}]]>
			</programlisting>
			<para>위의 예제코드에서는 @WebListerner annotation을 통해서 Servlet Context의 생성과
				소멸과 관련된 알림을 받을 수 있는 리스너를 구현하고 있다. ServletContextListener 클래스에서 제공하는
				contextInitialized 클래스를 구현함으로써 Servlet Context가 초기화 되는 시점에 프로그래밍적인
				방법으로 서블릿, 필터, 리스너 등을 추가할 수 있다. 어노테이션을 통해서 선언할 수 있는 다른 클래스의 사용법은 클래스의
				이름으로 쉽게 유추할 수 있다.
			</para>
			<para>
			위에서 언급한 payload 샘플 코드는 본 섹션 내의
			<link linkend="core_servlet3_eod_resources">다운로드 - anyframe-sample-servlet-annotation</link>
			를 통해 다운로드받을 수 있다.</para>
		</section>
		<section id="core_servlet3_eod_@MultipartConfig">
			<title>@MultipartConfig</title>
			<para>서블릿 3.0에서는 @MultipartConfig 어노테이션을 통해서 파일 업로드 기능을 제공한다. 이
				어노테이션을 서블릿에 사용하면 해당 서블릿이 기대하는 요청이 mime/multipart 임을 가르킨다. 서블릿의
				HttpServlet 객체는 반드시 다양한 mime 첨부 파일들을 반복하여 처리할 수 있는 getParts와 getPart
				메소드를 통하여 mime첨부 파일을 사용할 수 있도록 해야 한다. getPart를 통해서 얻는 객체는 Spring 에서
				제공하는 MultiPartFile과 그 용도가 비슷한 Wrapper Object이다. 아래에서 제공하는 html 예제는
				파일 업로드를 위하여 서블릿을 만든 폼 이다. 해당하는 파일을 이용하여 파일업로드를 사용하기 위하여는 다음과 같은 조건을
				만족해야한다
				<para><emphasis role="bold">enctype 속성은 반드시 multipart/form-data. 값으로 설정되어야 한다.</emphasis></para>
				<para><emphasis role="bold">해당 폼 파일을 사용하기 위한 서블리의 메소드는 반드시 post 방식이어야한다.</emphasis></para>
			</para>
			
			<para>해당 form이 이렇게 정의가 되면 요청 전체가 multipart/form-data 타입으로 서버로 넘겨진다.
				그러면 서블릿이 해당 입력 스트림으로부터 파일 데이터를 처리하여 파일을 추출하기 위하여 요청을 처리한다.
				destination은 컴퓨터에 파일이 저장될 위치를 지정하는 경로이다. form 하단의 Upload 버튼을 누르면 지정한
				경로에 파일을 저장하는 서블릿으로 데이터를 보낸다. HTML form 파일은 다음과 같다.</para>
			<programlisting language="html"><![CDATA[<form method="POST" action="upload" enctype="multipart/form-data" >
            File:
            <input type="file" name="file" id="file" /> <br/>
            Destination:
            <input type="text" value="c:/tmp" name="destination"/>
            </br>
            <input type="submit" value="Upload" name="upload" id="upload" />
</form>]]>
			</programlisting>
			<para>POST 방식의 요청 메소드는 어떤 파일을 업로드 할 때나 온전한 form 을 제출하는 것처럼 클라이언트가
				데이터를 요청을 일부분으로 서버로 보낼 때 사용된다. GET 방식의 요청 메소드는 URL과 헤더정보만 서버로 보내는 반면에
				POST 방식의 요청들은 메시지 바디 자체를 포함한다. 이로 인해 길이를 일정하지 않거나 매우 긴 어떤 타입의 데이터도
				서버로 보낼 수 있다. POST 요청 메소드의 헤더 필드는 보통 메시지 바디의 미디어 타입을 나타낸다. 다음은 파일
				업로드를 위한 POST 메소드를 구현한 예제코드이다.</para>
			<programlisting language="java"><![CDATA[public class FileUploadServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	static Logger logger = LoggerFactory.getLogger(FileUploadServlet.class);

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

		response.setContentType("text/html;charset=UTF-8");

		// Create path components to save the file
		final String path = request.getParameter("destination");
		final Part filePart = request.getPart("file");
		final String fileName = getFileName(filePart);

		OutputStream outputStream = null;
		InputStream inputStream = null;
		final PrintWriter printWriter = response.getWriter();

		try {
			outputStream = new FileOutputStream(new File(path + File.separator
					+ fileName));
			inputStream = filePart.getInputStream();

			int read = 0;
			final byte[] bytes = new byte[1024];

			while ((read = inputStream.read(bytes)) != -1) {
				outputStream.write(bytes, 0, read);
			}
			printWriter.println("New file " + fileName + " created at " + path);
			logger.info("File" + fileName + "being uploaded to " + path);
		} catch (FileNotFoundException fne) {
			printWriter.println("You either did not specify a file to upload or are "
					+ "trying to upload a file to a protected or nonexistent "
					+ "location.");
			printWriter.println("<br/> ERROR: " + fne.getMessage());

			logger.info("Problems during file upload. Error : "
					+ fne.getMessage());
		} finally {
			if (outputStream != null) {
				outputStream.close();
			}
			if (inputStream != null) {
				inputStream.close();
			}
			if (printWriter != null) {
				printWriter.close();
			}
		}
	}

	private String getFileName(final Part part) {
		final String partHeader = part.getHeader("content-disposition");
		logger.info("Part Header = " + partHeader);
		for (String content : part.getHeader("content-disposition").split(";")) {
			if (content.trim().startsWith("filename")) {
				return content.substring(content.indexOf('=') + 1).trim()
						.replace("\"", "");
			}
		}
		return null;
	}
}
			]]>
			</programlisting>
			<para>doPost 메소드는 요청으로부터 destination 속성과 file part 객체를 가지고 온 다음file
				part 객체로부터 파일명을 가지고 오기 위하여 getFileName() 메소드를 호출한다. getFileName()가
				호출되면 FileOutputStream 객체를 생성하고 지정한 위치에 해당 파일을 복사한다.</para>
			<para>
			위에서 언급한 payload 샘플 코드는 본 섹션 내의
			<link linkend="core_servlet3_eod_resources">다운로드 - anyframe-sample-servlet-annotation</link>
			를 통해 다운로드받을 수 있다.</para>
		</section>
	</section>
	<section id="core_servlet3_eod_programmaticconfiguration">
		<title>Programmatic Configuration</title>
		<para>서블릿 3.0에서는 서블릿, 리스너, 필터 등을 등록하기 위하여 어노테이션과 web.xml을 제공하는 것 외에
			프로그래밍 적인 방법을 제공한다. 각각의 서블릿, 리스너, 필터를 등록하기 위하여 다양한 설정 메소드 들을 추가하였다.
			아래의 예제에서는 어노테이션으로 선언한 리스너에 프로그래밍적인 방법으로 필터와 서블릿을 등록하는 법을 보여주고 있다.
			ServletContext 클래스에 추가된 addFIlter 메소드는 인자로 전달받은 필터의 인스턴스를 함께 전달받은
			필터명으로 서블릿 컨텍스트에 등록한다. 해당 메소드는 javax.servlet.Registration 을 상속받은
			FilterResistration.Dynamic 인터페이스의 객체를 리턴한다. 마찬가지로 addServlet 메소드는
			전달받은 서블릿의 인스턴스를 함께 전달받은 서블릿 명으로 서블릿 컨텍스트에 등록하다. 해당 메소드는
			javax.servlet.Registration을 상속받은 ServletResistration.Dynamic 인터페이스의
			객체를 리턴한다. </para>
		<programlisting language="java"><![CDATA[@WebListener
public class AnyframeSerlvetContextListener implements ServletContextListener {

	static Logger logger = LoggerFactory
			.getLogger(AnyframeSerlvetContextListener.class);

	public void contextInitialized(ServletContextEvent sce) {
		logger.info("[AnyframeSerlvetContextListener] Servlet Context has been initialized");

		ServletContext sc = (ServletContext) sce.getServletContext();

		// 1. add a filter which filters request with URL '/movie.do'.
		// ServletContext#addFilter method returns FilterRegistration.Dynamic
		// object. Users can configurate filter by method which implements
		// FilterRegistration.Dynamic interface
		FilterRegistration.Dynamic dynamicFilter = sc
				.addFilter(
						"EncodingFilter",
						org.anyframe.sample.servletjavaconfig.web.filter.EncodingFilter.class);
		dynamicFilter.addMappingForUrlPatterns(
				EnumSet.allOf(DispatcherType.class), true, "/movie.do");
		logger.info("Encoding Filter has been Added");

		// 2. add 'MovieFinderServlet' servlet. It is similar to adding a filter
		// that ServletContext#addServlet method
		// returns ServletRegistration.Dynamic obect
		ServletRegistration.Dynamic dynamicServlet = sc
				.addServlet(
						"MovieFinderServlet",
						(org.anyframe.sample.servletjavaconfig.web.servlet.MovieFinderSerlvet.class));
		dynamicServlet.addMapping("/movieFinder.do");
		logger.info("MovieFinder Servlet has been Added");

		// 3. add 'MovieServlet' servlet.
		dynamicServlet = sc
				.addServlet(
						"MovieServlet",
						(org.anyframe.sample.servletjavaconfig.web.servlet.MovieServlet.class));
		dynamicServlet.addMapping("/movie.do");
		logger.info("Movie Servlet has been Added");

		// 4. add 'FileUploadForwardServlet' servlet.
		dynamicServlet = sc
				.addServlet(
						"FileUploadForwardServlet",
						(org.anyframe.sample.servletjavaconfig.web.servlet.FileUploadPageServlet.class));
		dynamicServlet.addMapping("/fileUpload.do");
		dynamicServlet.setInitParameter("encoding", "utf-8");
		logger.info("FileUploadForward Servlet has been Added");

		// 5. add 'FileUploadForwardServlet' servlet.
		dynamicServlet = sc
				.addServlet(
						"FileUploadServlet",
						(org.anyframe.sample.servletjavaconfig.web.servlet.FileUploadServlet.class));
		dynamicServlet.addMapping("/upload");
		dynamicServlet.setMultipartConfig(new MultipartConfigElement(null,
				50000000, 50000000, 0));

		logger.info("FileUpload Servlet has been Added");

		// 6. get FileUploadServlet servlet from Servlet Context through
		// ServletContext#getServletRegistration. It returns
		// ServletRegistration.Dynamic object so that users can set
		// configuration
		dynamicServlet = (Dynamic) sc
				.getServletRegistration("FileUploadServlet");
		dynamicServlet.setInitParameter("encoding", "utf-8");
		logger.info("Add an init parameter on FileUploadServlet Servlet");
	}

	public void contextDestroyed(ServletContextEvent sce) {
		// TODO Auto-generated method stub
	}
}]]>
		</programlisting>
		<para>
			위에서 언급한 payload 샘플 코드는 본 섹션 내의
			<link linkend="core_servlet3_eod_resources">다운로드 - anyframe-sample-servlet-annotation</link>
			를 통해 다운로드받을 수 있다.</para>
		<para>이미 어노테이션을 통해서 해당 필터와 서블릿을 등록하였다면 프로그래밍적인 방법으로 필터와 서블릿을 추가적으로 등록할
			필요는 없다. 만약 web.xml 이나 어노테이션을 통해서 등록한 서블릿과 동일한 이름의 서블릿을 (클래스이름이 아닌 서블릿
			명) 서블릿 컨텍스트에서는 web.xml > 어노테이션 > 프로그래밍적인 방법의 순으로 서블릿을 생성한다. 아래의 에러코드는
			어노테이션으로 “MovieServlet”을 등록하고 프로그래밍 적인 방법으로 동일한 이름의 서블릿을 등록할 때 나는 에러다.
		</para>
		<para>
			<note>심각: Exception sending context initialized event to listener
				instance of class
				org.anyframe.sample.servletjavaconfig.web.listener.AnyframeSerlvetContextListener
				java.lang.NullPointerException</note>
		</para>
		<para>Serlvet Context가 초기화 될 때 아래와 같은 예제코드와 같은 형태로 서블릿을 등록하였는데 이미
			어노테이션으로 ‘MovieServlet’ 이란 서블릿이 등록이 되었기 때문에 Serlvet Context의
			addServlet은 null값을 리턴한다. 그리하여 addMapping 메소드를 통하여 url패턴을 추가하려고 하면 에러가
			발생하게 된다.</para>
		<programlisting language="java"><![CDATA[…
dynamicServlet = sc.addServlet("MovieServlet",(org.anyframe.sample.servletjavaconfig.web.servlet.MovieServlet.class));
dynamicServlet.addMapping("/movie.do");
…]]>
		</programlisting>
		<para>필터와 리스너의 경우에도 서블릿의 경우와 같다. 특히 어노테이션을 통해서 서블릿, 필터, 리스너를 등록할 때에
			name 속성을 정의하지 않으면 팩키지 경로를 포함한 클래스 명이 서블릿 명이 되기 때문에 해당하는 방법으로 설정을 할
			때에는 각 요소의 이름을 지정하는데 유의해야 한다. 이런 혼란을 피하기 위하여 개발자는 어노테이션이나 web.xml
			배포서술자를 통하여 서블릿을 선언하는 경우와 프로그래밍적인 방법으로 서블릿을 동적으로 추가하는 경우의 사용을 구분하여
			사용할 필요가 있다.	</para>
	</section>
	<section id="core_servlet3_eod_resources">
	<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>다운로드</para>
					<para>
						다음에서 sample 코드를 포함하고 있는 Eclipse 프로젝트 파일을 다운받은 후, 압축을 해제한다. 그리고 hsqldb 폴더 내의 start.cmd (or start.sh) 파일을 실행시켜 테스트 DB를 시작시켜 놓는다
					</para>
					<itemizedlist>
						<listitem>
							<para>Eclipse 기반 실행</para>
							<para>
							Eclipse에서 압축 해제 프로젝트를 import한 후, 해당 프로젝트에 대해 마우스 오른쪽 버튼을 클릭 하고 컨텍스트 메뉴에서 Maven > Enable Dependency Management를
							선택하여 컴파일 에러를 해결한다. 그리고 해당	프로젝트에 대해 마우스 오른쪽 버튼을 클릭한 후, 컨텍스트 메뉴에서 Run As > Run on Server (Tomcat 기반)를 클릭한다. 
							Tomcat Server가 정상적으로 시작되었으면 브라우저를 열고 주소창에  http://localhost:8080/anyframe-sample-servlet-annotation ( 혹은 http://localhost:8080/anyframe-sample-servlet-javaconfig) 를 입력하여 실행 결과를 확인한다.
							</para>
						</listitem>									
					</itemizedlist>						
					<informaltable>
						<caption>Download List</caption>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="4*"/>
							<colspec colnum="2" colname="col2" colwidth="6*"/>
							<thead>
								<row>
									<entry align="center">Name</entry>
									<entry align="center">Download</entry>
								</row>
							</thead>
							<tbody>										
								<row>
									<entry align="center">anyframe-sample-servlet-annotation.zip</entry>
									<entry align="center"><ulink url="http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.6.1-SNAPSHOT/reference/sample/anyframe-sample-servlet-annotation.zip">Download</ulink>
									</entry>
								</row>
								<row>
									<entry align="center">anyframe-sample-servlet-javaconfig.zip</entry>
									<entry align="center"><ulink url="http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.6.1-SNAPSHOT/reference/sample/anyframe-sample-servlet-javaconfig.zip">Download</ulink>
									</entry>
								</row>	
							</tbody>
						</tgroup>
					</informaltable> 
				</listitem>
			</itemizedlist>
		</para>
	</section>
</chapter>