<chapter id="core_test_testservice">
	<title>Service Code Test</title>
    <para>
    	이번 절에서는 Business logic 검증을 위한 Testcase 개발 방법에 대해 설명 하고자 한다.  
   	 </para>

	<section id="core_test_testservice_junit">
		<title>JUnit</title>
     	<para>
			JUnit은 테스트 코드를 쉽게 작성하고, 실행할 수 있도록 제공되는 open source framework이다.
    	</para>
    	
    	<para>
    		JUnit에서 제공하는 Annotation은 다음과 같다.
    	</para>
		
		<para>
		<informaltable>
			<caption>JUnit Annotation</caption>
			<tgroup cols="2">
				<colspec colnum="1" colname="col1" colwidth="2*"/>
				<colspec colnum="2" colname="col2" colwidth="8*"/>
				<thead>
					<row>
						<entry align="center">Name</entry>
						<entry align="center">Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry align="center">@Test</entry>
						<entry align="left">@Test annotation이 설정된 메소드를 JUnit이 자동으로 테스트 코드로 인식해서 실행 시켜준다.</entry>
					</row>
					<row>
						<entry align="center">@Before</entry>
						<entry align="left">모든 테스트 메소드를 실행 시키기 전에 실행 할 초기화 로직을 지정한다.</entry>
					</row>
					<row>
						<entry align="center">@After</entry>
						<entry align="left">모든 테스트 메소드를 실행 완료한 후에 실행할 소멸화 로직을 지정한다.</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
		</para>
		<para>
			테스트 코드 내에서 bean injection 등 Spring 연계를 위해 필요한 설정은 다음과 같다.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					@RunWith(SpringJUnit4ClassRunner.class) : @RunWith가 설정된 경우, 
					JUnit이 테스트 코드를 실행 할 때 Runner class를 직접 명시 할 수 있다.
					Spring에서 JUnit 4.5+와의 연계를 위해 제공하는 SpringJUnit4ClassRunner로 설정 하여
					bean injection등과 같은 Spring이 제공하는 기능을 테스트 코드에서 사용할 수 있게 된다.
				</para>
			</listitem>
			<listitem>
				<para>
					@ContextConfiguration : ApplicationContext 생성 시 필요한 Spring의 bean 속성 정의 파일 위치를 명시 하기 위한 Annotation이다.
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
			JUnit 기반의 테스트 코드 작성 시, 아래의 구문을 이용하여 결과값을 검증할 수 있다.
		</para>
		<para>
		<informaltable>
			<caption>Assert</caption>
			<tgroup cols="2">
				<colspec colnum="1" colname="col1" colwidth="2*"/>
				<colspec colnum="2" colname="col2" colwidth="8*"/>
				<thead>
					<row>
						<entry align="center">Name</entry>
						<entry align="left">Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry align="left">assertEquals(Object expected, Object actual)</entry>
						<entry align="left">예상되는 결과(expected)와 실제(actual)을 같은지 비교한다.</entry>
					</row>
					<row>
						<entry align="left">assertNull(Object obj)</entry>
						<entry align="left">값이 null인 경우 테스트를 통과한다.</entry>
					</row>
					<row>
						<entry align="left">assertNotNull(Object obj)</entry>
						<entry align="left"> 값이 null이 아닌 경우 테스트를 통과한다.</entry>
					</row>
					<row>
						<entry align="left">assertSame(Object expected, Object actual)</entry>
						<entry align="left">expected와 actual이 같은 객체를 참조 하는지 확인 하고, 그렇지 않은 경우 실패로 처리한다.</entry>
					</row>
					<row>
						<entry align="left">assertNotSame(Object expected, Object actual)</entry>
						<entry align="left">expected와 actual이 다른 객체를 참조 하는지 확인하고, 같은 객체를 참조 하는 경우 실패 처리한다. </entry>
					</row>
					<row>
						<entry align="left">assertTrue(boolean condition)</entry>
						<entry align="left">condition이 참(true)인지 확인하고, 그렇지 않은 경우 실패 처리한다.</entry>
					</row>
					<row>
						<entry align="left">fail()</entry>
						<entry align="left">이 구문을 만난 경우, 그 즉시 해당 테스트 코드를 실패 처리 한다.</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
		</para>
    </section>
    
    <section id="core_test_testservice_implementtestcode">
    	<title>Test Code 구현</title>
    	<para>
    		아래의 코드는 JUnit Annotation과 assert 구문을 이용하여 작성한 MovieServiceTest class중 일부이다.  
    	</para>
    	
    	<programlisting language="java"><emphasis role="bold">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration( locations = { "file:./src/main/resources/spring/context-*.xml" })</emphasis>
public class MovieServiceTest {

	@Inject
	@Named("movieService")
	private MovieService movieService;

	<emphasis role="bold">@Test</emphasis>
	@Rollback(value = true)
	public void manageMovie() throws Exception {
		// 1. create a new movie
		Movie movie = getMovie();
		movieService.create(movie);

		// 2. assert - create
		movie = movieService.get(movie.getMovieId());
		<emphasis role="bold">assertNotNull("fail to fetch a movie", movie);</emphasis>
		<emphasis role="bold">assertEquals("fail to compare a movie title", "Shrek (2001)",
				movie.getTitle());</emphasis>

		// 3. update a title of movie
		String title = "Shrek 2 " + System.currentTimeMillis();
		movie.setTitle(title);
		movieService.update(movie);

		// 4. assert - update
		movie = movieService.get(movie.getMovieId());
		<emphasis role="bold">assertNotNull("fail to fetch a movie", movie);</emphasis>
		<emphasis role="bold">assertEquals("fail to compare a updated title", title, movie.getTitle());</emphasis>

		// 5. remove a movie
		movieService.remove(movie.getMovieId());
	}

// ...중략
}</programlisting>

	<para>
		위 예제 코드에서 @ContextConfiguration annotation을 이용하여 ApplicationContext를 생성한 후,
		movieService bean을 inject해서 로직을 검증 하는 과정을 확인할 수 있다.
	</para>
    </section>
    
    <section id="core_test_testservice_implement_metaannotation">
		<title>Test Code 에서의 Meta Annotation 사용</title>
    	<para>
    		Spring 4.0 에서 추가된 기능으로, 위 Test Code의 @ContextConfiguration 등과 같이 반복되는 Annotation을 Meta Annotation 으로 등록하여 조금더 간편하게 Test Code에 사용할 수 있다.
    	</para>
    	
    	<programlisting language="java">
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
<emphasis role="bold">@ContextConfiguration(locations = { "file:./src/main/resources/spring/context-*.xml" })</emphasis>
<emphasis role="bold">public @interface AnyframeTest {}</emphasis>
    	</programlisting>
    	
    	<para>
    		위와 같이 Meta Annotation 을 등록할 수 있으며, 
    	</para>
    	
    	<programlisting language="java">
@RunWith(SpringJUnit4ClassRunner.class)
<emphasis role="bold">@AnyframeTest</emphasis>
public class MovieServiceMetaAnnotationTest {
	@Inject
	@Named("movieService")
	private MovieService movieService;

	@Inject
	@Named("movieFinder")
	private MovieFinder movieFinder;

	@Test
	@Rollback(value = true)
	public void manageMovie() throws Exception {
		// 1. create a new movie
		Movie movie = getMovie();
		movieService.create(movie);
//... 중략
    	</programlisting>
    	
    	<para>
    		위와 같이 Testcode에 직접 사용할 수 있다. 
    	</para>
    </section>

</chapter>
