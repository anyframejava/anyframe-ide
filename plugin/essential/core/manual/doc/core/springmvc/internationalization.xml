<chapter id="core_springmvc_internationalization">
	<title>Internationalization</title>

		<para>
			Spring MVC에서는 Presentation Layer에서 사용자의 Local에 따른 국제화를 위해
   			여러가지 LocaleResolver를 제공한다. Request가 들어오면 DispatcherServlet은
   			LocaleResolver를 통해 사용자의 Locale을 알아내게 되며 RequestContext.getLocale()
   			메소드를 사용해서 Locale을 확인할 수 있다.
  		</para>

	<section id="core_springmvc_internationalization_multilanguage">
    	<title>다국어 지원 기능</title>

    	<para>
    		Spring MVC는 다국어를 지원하기 위하여 LocaleResolver를 제공하고 있으며 특정 LocaleResolver를
    		정의하지 않을 경우 디폴트로 AcceptHeaderLocaleResolver를 이용한다. 사용자들이 원하는 언어를 직접
    		선택할 수 있도록 구현해야 한다면 CookieLocaleResolver 또는 SessionLocaleResolver를 이용할 수 있다. 
    		웹 어플리케이션의 화면에 출력해줄 메세지 리소스를 추출하기 위해 Spring MVC에서는
    		MessageSource를 제공하며 이러한 MessageSource에서 추출한 메시지를 화면에
    		출력해 줄 수있는 tag 라이브러리를 제공한다. 사용 방법은 아래와 같다.
    	</para>
    	<itemizedlist>
      		<listitem>
	        	<para>Step 1 : properties 파일 작성</para>
		        <para>
		        	각각 언어에 따른 properties파일을 생성하고 출력할 메시지를 작성한다. PropertiesEditor
	        		이클립스 플러그인을 사용하면 쉽게 작성할 수 있다. 다음은 message-user_ko.properties ,
	        		message-user_en.properties 파일의 일부이다.
	        	</para>
	
				<itemizedlist>
					<listitem>
		            <para>
		            	한글용 (message-user_ko.properties)
		            	<programlisting language="java">title.user.form = 당신의 정보를 입력하세요.</programlisting>
		            </para>
		          	</listitem>
		
		          	<listitem>
		            <para>
		            	영어용, default용 (message-user.properties, message-user_en.properties)
		            	<programlisting language="java">title.user.form = Input your information</programlisting>
		            </para>
		          	</listitem>
				</itemizedlist>
			</listitem>

      		<listitem>
        		<para>Step 2 : MessageSource 정의</para>

        		<para>
        			다음은 messageSource가 정의되어 있는 context-user.xml 파일의 일부이다.
        			<programlisting language="xml"><![CDATA[<bean id="messageSource"
   class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:message/message-generation</value>
				<value>classpath:message/message-moviefinder</value>
				<value>classpath:message/message-converter</value>
			</list>
		</property>
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
</bean>]]></programlisting>
				</para>
			</listitem>

			<listitem>
				<para>Step 3: JSP에서 message 사용하기</para>

				<para>
					등록한 message를 JSP에서 사용하기 위해 Spring에서 제공하는 태그라이브러리를 선언한 userForm.jsp 파일의 일부이다.
					<programlisting
					language="xml"><![CDATA[<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>]]></programlisting>
				</para>

	        	<para>
		        	<![CDATA[다음과 같이 <spring:message> 태그를 사용하여 메시지를 출력할 수 있다.]]>
					<programlisting
					language="xml"><![CDATA[<spring:message code="title.user.form"></spring:message>]]></programlisting>
				</para>

       	 		<para>이러한 spring:message 태그의 속성은 다음과 같다.</para>

		        <informaltable>
		        	<caption><![CDATA[<spring:message]]> 속성 목록</caption>
		          <tgroup cols="2">
		                <colspec colnum="1" colname="col1" colwidth="2*"/>
		                <colspec colnum="2" colname="col2" colwidth="8*"/>
		            <thead>
		              <row>
		                <entry align="center">속성</entry>
		                <entry align="center">설명</entry>
		              </row>
		            </thead>
		            <tbody>
		              <row>
		                <entry>arguments</entry>
		                <entry>부가적인 인자를 넘겨줌. 콤마로 구분된 문자열, 객체 배열, 객체 하나를 넘김.</entry>
		              </row>
		              <row>
		                <entry>argumentSeparator</entry>
		                <entry>넘겨줄 인자들의 구분자 설정. 기본값은 콤마.</entry>
		              </row>
		              <row>
		                <entry>code</entry>
		                <entry>룩업할 메시지의 키 지정. 지정하지 않으면 text에 입력한 값 출력.</entry>
		              </row>
		              <row>
		                <entry>htmlEscape</entry>
		                <entry>html 기본 escapse 속성 오버라이딩. 기본값 false.</entry>
		              </row>
		              <row>
		                <entry>javaScriptEscape</entry>
		                <entry>기본값 false</entry>
		              </row>
		              <row>
		                <entry>message</entry>
		                <entry>
		                	MessageSourceResolvable 인자로 Spring MVC validation을 거친  errors의 메시지를 쉽게 보여줄 때 사용
		                </entry>
		              </row>
		              <row>
		                <entry>scope</entry>
		                <entry>결과 값을 변수에 지정할 때 변수의 scope 지정 (page, request, session, application)</entry>
		              </row>
		              <row>
		                <entry>text</entry>
		                <entry>해당 code로 가져온 값이 없을 때 기본으로 보여줄 문자열. 빈 값이면 null 출력.</entry>
		              </row>
		
		              <row>
		                <entry>var</entry>		
		                <entry>결과 값을 이 속성에 해당한 문자열에 바인딩 할 때 사용. 빈 값이면 그냥 JSP에 뿌려줌.</entry>
		              </row>
		            </tbody>
		          </tgroup>
		        </informaltable>
			</listitem>
		</itemizedlist>

		<section id="core_springmvc_internationalization_multilanguage_localeresolver">
			<title>LocaleResolver를 이용한 Locale 변경</title>

			<para>
				LocaleResolver를 사용하여 locale을 바꾸고 싶을 때는 정의한 LocaleResolver를
				injection 한 후 setLocale()메소드를 통해 locale을 변경해 줄 수 있다. 또한 resolveLocale(request)메소드를
				사용하여 현재 request에 셋팅되어 있는 Locale을 알아낼 수 있다.
				<programlisting language="java">@Controller
public class UserController {
	@Inject
    LocaleResolver localeResolver;

    protected ModelAndView changeLocale(HttpServletRequest request
                            , HttpServletResponse response) throws Exception {
        //request parameter "locale"에 사용자가 설정한 locale을 가지고 온다.<![CDATA[(ex> en, ko)]]>
        Locale locale = new Locale(request.getParameter("locale"));
        //localeResolver에 locale 셋팅
       <emphasis role="bold"> localeResolver.setLocale(request, response, locale);</emphasis>
        //셋팅된 locale 확인
        System.out.println("current locale from locale resolver ====== " + 
            <emphasis role="bold">localeResolver.resolveLocale(request)</emphasis>);
        return new ModelAndView("/jsp/result.jsp");
    }

...생략...</programlisting>
			</para>
		</section>

		<section id="core_springmvc_internationalization_multilanguage_localechangeinterceptor">
			<title>LocaleChangeInterceptor를 이용한 Locale 변경</title>

			<para>
				HandlerMapping에 interceptor를 등록하여 특정 locale의 요청을 가로채서 특정 파라미터에 넘어 온 값으로
	      			locale을 지정할 수 있다. 속성 정의 파일 내의 LocaleChaneInterceptor 정의 예는 다음과 같다.
	      			<programlisting language="xml"><![CDATA[<bean id="]]><emphasis role="bold">localeResolver</emphasis>"
      class="org.springframework.web.servlet.i18n.<emphasis role="bold">CookieLocaleResolver</emphasis><![CDATA["/>
      
<bean id="]]><emphasis role="bold">localeChangeInterceptor</emphasis>"
      class="org.springframework.web.servlet.i18n.<emphasis role="bold">LocaleChangeInterceptor</emphasis><![CDATA[">
    <property name="paramName" value="locale"/>
</bean>

<bean id="urlMapping"
      class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="interceptors">
        <list>
            <ref bean="]]><emphasis role="bold">localeChangeInterceptor</emphasis><![CDATA["/>
        </list>
    </property>
    <property name="mappings">
        <value>/list.do=getUserListController</value>
    </property>
</bean>]]></programlisting>
			</para>

      		<para>위와 같이 설정한 경우, /list.do?locale=en 이라는 요청이 들어오면 어플리케이션의 Locale이 'English'로 변경된다.</para>
		</section>
	</section>

	<section id="core_springmvc_internationalization_localeresolver">
    	<title>LocaleResolver</title>
	
		<para>
			위의 다국어 지원 예에서 처럼 Spring MVC에서는 LocaleResolver를 사용하여 Locale을 얻어올 수
	    	있으며 이러한 LocaleResolver 구현체에는 아래와 같은 것들이 있다.
	    </para>
	
		<section id="core_springmvc_internationalization_localeresolver_acceptheader">
		<title>AcceptHeaderLocaleResolver</title>
	
			<para>
				사용자의 브라우저에서 보내진 request의 헤더에 accept-language부분에서 Locale을 읽어들인다.
	      		사용자의 OS locale을 나타낸다.
	      		<programlisting language="xml"><![CDATA[<bean id="localeResolver"
	            class="org.springframework.web.servlet.i18n.]]><emphasis
	        	role="bold">AcceptHeaderLocaleResolver</emphasis><![CDATA[" />]]></programlisting>
	        </para>
	
	      	<para>AcceptHeaderLocaleResolver는 setLocale() method를 이용한 locale 변경이 불가능하다.</para>
	    </section>

    	<section id="core_springmvc_internationalization_localeresolver_cookie">
			<title>CookieLocaleResolver</title>
	
			<para>사용자의 쿠키에 설정된 Locale을 읽어 들인다. 다음과 같은 속성을 설정할 수 있다.</para>

			<informaltable>
				<caption>CookieLocaleResolver 속성 목록</caption>
		        <tgroup cols="3">
		                <colspec colnum="1" colname="col1" colwidth="2*"/>
		                <colspec colnum="2" colname="col2" colwidth="2*"/>
		                <colspec colnum="3" colname="col3" colwidth="6*"/>
		          <thead>
		            <row>
		              <entry align="center">속성</entry>
		              <entry align="center">기본값</entry>
		              <entry align="center">설명</entry>
		            </row>
		          </thead>
		          <tbody>
		            <row>
		              <entry>cookieName</entry>
		              <entry>classname + LOCALE</entry>
		              <entry>쿠키 이름</entry>
		            </row>
		            <row>
		              <entry>cookieMaxAge</entry>
		              <entry>Integer.MAX_INT</entry>
		              <entry>쿠키 살려둘 시간. -1로 해두면 브라우저를 닫을 때 없어짐</entry>
		            </row>
		            <row>
		              <entry>cookiePath</entry>
		              <entry>/</entry>
		              <entry>Path를 지정해 주면 해당 하는 path와 그 하위 path에서만 참조</entry>
		            </row>
		          </tbody>
		        </tgroup>
			</informaltable>

			<programlisting language="xml"><![CDATA[<bean id="localeResolver"
    class="org.springframework.web.servlet.i18n.]]><emphasis role="bold">CookieLocaleResolver</emphasis><![CDATA[" >
    <property name="cookieName" value="clientlanguage"/>    
    <property name="cookieMaxAge" value="100000"/>
    <property name="cookiePath" value="web/cookie"/>
</bean>]]></programlisting>
		</section>

		<section id="core_springmvc_internationalization_localeresolver_session">
		<title>SessionLocaleResolver</title>
	
			<para>
				requst가 가지고 있는 session으로 부터 locale 정보를 가져온다.
				<programlisting language="xml"><![CDATA[<bean id="localeResolver"
    class="org.springframework.web.servlet.i18n.]]><emphasis role="bold">SessionLocaleResolver</emphasis><![CDATA[" />
]]></programlisting>
			</para>
	    </section>    	
	</section>
	
	<note>
		<title>[참고] Encoding 설정</title>
		<para>
			Java 개발 시 영어 이외의 문자를 처리하는 데 있어서 Encoding(인코딩) 설정 문제 때문에 문자가 깨지는 현상을 볼 수 있다.
		    (한글 처리와 관련한 문제로 종종 발생한다.) 컴퓨터에서 영어, 한글 등 문자를 표현하는 다양한 방식이 있는데 
		    이 방식을 처리하는 데 있어서 Encoding/Decoding 설정이 필요하다. 
		</para>   
		<para>	
			이 매뉴얼에서는 ASCII와 호환이 가능하면서 유니코드를 표현할 수 있는 UTF-8 인코딩 설정을 예로 들어서 설명하도록 한다.
		</para>
		<para>	
			<emphasis role="bold">[1] Console 화면에서의 문자 출력를 위한 Encoding 설정</emphasis>  
		</para>		
		<para>	
			Java 소스 코드 내(*.java)에서 System.out.println("한글 메시지")와 같이 한글을 Console 화면에 출력하려고 할 때, 정상적으로 한글이 출력되지 않는 경우가 있다.
			이유는 Java 소스 코드 파일의 인코딩과 컴파일된 파일이 실행되는 실행 환경의 인코딩이 다르기 때문이다. 
			Java 실행 시 디폴트로 OS 환경에 설정되어 있는 인코딩을 기준으로 동작하므로 실행되는 환경의 인코딩 정보를 변경하기 위해서는 -Dfile.encoding="{파일 인코딩 정보}"과 같은 형태의 옵션을 
			이용할 수 있다.   
		</para>
		<para>	
			파일 인코딩을 UTF-8로 설정한 경우, Windows OS 환경에서는 아래와 같이 작성한다. (ex. 웹 어플리케이션을 Tomcat을 이용하여 구동한다면 catalina.bat 파일에 작성한다.) 
			대부분 한글 Windows OS를 로컬 환경에 설치하므로 아래와 같은 추가 작업을 할 필요가 없는 경우가 많다. 
    <programlisting language="java">set JAVA_OPTS=%JAVA_OPTS% -Dfile.encoding=UTF-8</programlisting>
			Unix/Linux/Mac OS 환경에서는 아래와 같이 작성한다. (ex. 웹 어플리케이션을 Tomcat을 이용하여 구동한다면 catalina.sh 파일에 작성한다.)
    <programlisting language="java">JAVA_OPTS="$JAVA_OPTS -Dfile.encoding=UTF-8"</programlisting>	
            Eclipse에서 실행 시에는 아래와 같이 Eclipse Preferences에 설정한 후 실행시키도록 한다.
    <programlisting language="java"><![CDATA[Eclipse Preferences > General > Workspace > Text file encoding 설정을 UTF-8로 설정]]></programlisting>
		</para>		
		<para>	
			<emphasis role="bold">[2] 웹 화면 개발 시 Encoding 설정</emphasis>  
		</para>	
		<para>
		<emphasis role="bold">*웹 어플리케이션 개발 시 영어 이외의 문자 처리를 위한 Encoding/Decoding 설정 방법은 매우 다양하므로 아래에 제시한 방법은 참고용으로만 살펴보도록 한다.*</emphasis>  
		WAS별로 제시되는 Encoding 방식이 다를 수 있고, 실제 코드 개발 시 사용하는 자바 API 혹은 자바스크립트 메소드 또한 다양하므로 해당 프로젝트 요구 사항에 따라 적용하도록 한다.
		</para>		
		<para>	
			[2.1] GET 방식 문자열 처리 시, Servlet Container 설정 혹은 JavaScript 함수 이용   
		</para>
		<para>
		웹 어플리케이션을 Tomcat을 이용하여 구동한다면, 아래와 같이 server.xml 파일 내 Connector 태그에서 URIEncoding 옵션을 UTF-8로 설정해주도록 한다. (URIEncodig 설정 방식은 WAS 별로 다를 수 있으므로 참고하도록 한다.)
    <programlisting language="xml"><![CDATA[<Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443" URIEncoding="UTF-8"/>]]></programlisting>			
		JavaScript에서 인코딩 기능을 제공해주는 함수로 encodeURI()와 encodeURIComponent()를 이용할 수 있다. 
		</para>
		<para>
- encodeURI() 함수의 경우 인터넷 주소(URL) 표시에 사용되는 특수 문자들을 제외한 나머지 주소 내용을 인코딩할 때 사용한다. 즉, 인터넷 주소(URL) 전체를 인코딩할 때 사용한다.
        </para>
        <para>
- encodeURIComponent() 함수의 경우 인터넷 주소(URL) 표시에 사용되는 모든 문자를 인코딩하므로 인터넷 주소(URL) 전체를 인코딩할 때 사용하지 않고, 
요청 파라미터 값 하나하나를 따로 인코딩할 때 사용한다.
        </para>
        <para>
GET 방식으로 한글과 같은 문자열을 넘기게 되는 경우 특히 IE(Internet Explorer) 브라우저를 사용할 때 인코딩 설정으로 인한 문제가 발생하는 경우가 많으므로 
JSP 페이지 개발 시 GET 방식으로 문자열을 넘겨주는 경우 encodeURI() 혹은 encodeURIComponent() 함수를 사용하여 인코딩을 해주도록 한다. 
		</para>		
		<para>	
			[2.2] POST 방식 문자열 처리 시 CharacterEncodingFilter 이용 
		</para>
		<para>
		JSP 페이지에서 form 내에 요청 파라미터 값으로 문자열을 설정하여 값을 보내게 되면 POST 방식으로 전달되고 이는 HTTP Request Body에 포함되어 전송된다. 
		이러한 경우 모든 요청에 대해서 Filter 클래스를 수행하도록 web.xml 파일 내에 설정하면 request.setCharacterEncoding(encoding 정보) 메소드를 실행시키게 된다.
		request.setCharacterEncoding() 메소드의 경우 Request Body에만 적용하게 되어 있기 때문에 POST 방식에만 적용되는 것이다.
		request.setCharacterEncoding() 메소드를 이용하여 지정한 인코딩 방식이 GET 방식의 QueryString에 의한 파라미터에는 적용되지 않으므로 
		GET 방식의 파라미터에 영어 이외의 한글 등의 문자열이 있을경우 위의 [2.1]에서와 같은 별도의 처리가 필요함에 유의하도록 한다. 		
		</para>
		<para>	
		web.xml 파일 내에 encodingFilter를 설정해주도록 한다.
    <programlisting language="xml"><![CDATA[<filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
</filter>
<filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
</filter-mapping>]]></programlisting>						
		</para>							
	</note>		
	
</chapter>
