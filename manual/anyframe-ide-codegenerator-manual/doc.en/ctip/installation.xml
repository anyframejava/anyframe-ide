<chapter id="ctip_installation">
	<title>Installation</title>
	<para>Install Build Server and SCM Server (source code configuration management server) to constitute the CTIP environment. 
	 Currently, Build Server is used to guide the installation of Hudson, 
	 and SCM Server is used to guide <ulink url="http://subversion.tigris.org/">SubVersion</ulink>, and <ulink url="http://www.nongnu.org/cvs/">CVS</ulink>, etc. 
	 As for Hudson, since additional configuration is necessary to connect Anyframe IDE tool, 
	 this manual explains installation of Hudson and connected tasks.  
	 Since SCM Server can be installed without additional changes in the selected software, it is not explained in this manual.  
	</para>
	
	<section id="ctip_installation_download">
		<title>Hudson installation</title>
		<para>
		After downloading Hudson WAR file from <ulink url="http://hudson-ci.org/">Hudson site</ulink>, execute it alone or run it by deploying it Servlet Container. 
		For detailed informatoin on installation of Hudson, refer to <ulink url="http://hudson-ci.org/">Hudson site</ulink>. 
		Currently, Anyframe has been tested for Hudson version 1.358 and constituted by installing Hudson plugins shown in the table below. 
		Since there can be Hudson plugins added to basically installed Hudson Plugins,  
		check the whole list of plugins.  
		Since the plugins cannot run properly in Hudson Server depending on their version, be mindful of their versions. 
		If the newest version of Hudson plugin does not run properly when installed, 
		find the version of the plugin from <ulink url="http://hudson-ci.org/">Hudson Plugin Download Site</ulink> and install it separately. 
		
		</para>		
			<informaltable>
			<tgroup cols="4">
				<colspec colname="col1" colnum="1" colwidth="3*" />
				<colspec colname="col2" colnum="2" colwidth="2*" />
				<colspec colname="col3" colnum="3" colwidth="4*" />
				<colspec colname="col4" colnum="4" colwidth="1*" />
				
          		<thead>
					<row>
						<entry align="center">Plugin Name</entry>
						<entry align="center">Plugin ID</entry>
			            <entry align="center">Description</entry>
			            <entry align="center">Version</entry>
					</row>
				</thead>

          		<tbody>
            		<row>
              			<entry vlign="center">Static Analysis Collector Plug-in</entry>
              			<entry vlign="center">analysis-collector</entry>
              			<entry vlign="center">This plug-in is an add-on for the plug-ins Checkstyle, Dry, FindBugs, PMD, Task Scanner, and Warnings: 
              			the plug-in collects the different analysis results and shows the results in a combined trend graph. Additionally, the plug-in provides health reporting and build stability based on these combined results.</entry>
              			<entry vlign="center" align="center">1.5</entry>
            		</row>	
            		<row>
              			<entry>Static Analysis Utilities</entry>
              			<entry>analysis-core</entry>
              			<entry>This plug-in provides utilities for the static code analysis plug-ins. 
              			Hudson understands the result files of several static code analysis tools. 
              			For each result file a different plug-in is used for configuration and parsing. 
              			Since these results are visualized by the same back-end, the description of this back-end is combined in this section. </entry>
              			<entry align="center">1.8</entry>
            		</row>
            		<row>
              			<entry>Checkstyle Plug-in</entry>
              			<entry>checkstyle</entry>
						<entry>
							This plugin generates the trend report for Checkstyle, an open source static code analysis program. 
						</entry>
              			<entry align="center">3.6</entry>
            		</row>

					<row>
              			<entry>CVS Plugin</entry>
              			<entry>cvs</entry>
						<entry>
							This bundled plugin integrates Hudson with CVS version control system. 
						</entry>
              			<entry align="center">1.1</entry>
					</row>
					
					<row>
              			<entry>Dashboard View</entry>
              			<entry>dashboard-view</entry>
						<entry>
							This plugin contributes a new view implementation that provides a dashboard / portal-like view for your Hudson instance.
						</entry>
              			<entry align="center">1.5</entry>
					</row>
					
					<row>
              			<entry>Duplicate Code Scanner Plug-in</entry>
              			<entry>dry</entry>
						<entry>
							This plugin generates the trend report for duplicate code checkers like CPD.
						</entry>
              			<entry align="center">2.6</entry>
					</row>
					
					<row>
              			<entry>Emma Plugin</entry>
              			<entry>emma</entry>
						<entry>
							This plugin allows you to capture code coverage report from Emma. Hudson will generate the trend report of coverage.
						</entry>
              			<entry align="center">1.20</entry>
					</row>
					
					<row>
              			<entry>FindBugs Plug-in</entry>
              			<entry>findbugs</entry>
						<entry>
							This plugin generates the trend report for FindBugs, an open source program which uses static analysis to look for bugs in Java code. 
						</entry>
              			<entry align="center">4.8</entry>
					</row>
					
					<row>
              			<entry>JDepend Plugin</entry>
              			<entry>jdepend</entry>
						<entry>
							The JDepend Plugin is a plugin to generate JDepend reports for builds.
						</entry>
              			<entry align="center">1.2.2</entry>
					</row>
					
					<row>
              			<entry>Maven 2 Project Plugin</entry>
              			<entry>maven-plugin</entry>
						<entry>
							Hudson's Maven 2 project type support. This plugin is part of the core Hudson distribution.
						</entry>
              			<entry align="center">1.358</entry>
					</row>
					
					<row>
              			<entry>PMD Plug-in</entry>
              			<entry>pmd</entry>
						<entry>
							This plugin generates the trend report for PMD, an open source static code analysis program. 
						</entry>
              			<entry align="center">3.6</entry>
					</row>
					
					<row>
              			<entry>Hudson Support Subscription Notification Plugin</entry>
              			<entry>scis-ad</entry>
						<entry>
							This plugin notifies the support subscription offering.
						</entry>
              			<entry align="center">1.2</entry>
					</row>
					
					<row>
              			<entry>SSH Slaves plugin</entry>
              			<entry>ssh-slaves</entry>
						<entry>
							This plugin allows you to manage slaves running on *nix machines over SSH. It adds a new type of slave launch method. 
						</entry>
              			<entry align="center">0.10</entry>
					</row>
					<row>
              			<entry>Subversion Plugin</entry>
              			<entry>subversion</entry>
						<entry>
							This plugin adds the Subversion support (via SVNKit) to Hudson.This plugin is bundled inside hudson.war.
						</entry>
              			<entry align="center">1.17</entry>
					</row>
					<row>
              			<entry>Visual SourceSafe Plugin</entry>
              			<entry>vss</entry>
						<entry>
							This plugin integrates Hudson with Microsoft Visual SourceSafe . 
						</entry>
              			<entry align="center">1.7</entry>
					</row>
          		</tbody>
        	</tgroup>
      		</informaltable>		
	</section>
	
	<section id="ctip_installation_anyframe">
		<title>Anyframe IDE file installation</title>
		<para>
		The following configuration task is needed for add, edit, remove and run of Hudson Job connected to Hudson in the Anyframe IDE Editor. 
		</para>
			<orderedlist>
				<listitem>
					<para>We download the anyframe-X.X.X.zip from the Anyframe portal site.</para>
				</listitem>
				<listitem>
					<para>
						We extract and copy to 
						<emphasis role="bold"> [Hudson installation folder]/hudson/war/WEB-INF/lib </emphasis>
						the plugin package file 
						<emphasis role="bold"> (anyframe-ide-eclipse-hudson-X.X.X.jar) </emphasis>.
					</para>
					<para>anyframe-ide-eclipse-hudson-X.X.X.jar carries out the role for reflecting to the Hudson the configured info in the IDE.</para>
				</listitem>

				<listitem>
					<para>We open the 
						<emphasis role="bold">[Hudson installation folder]/hudson/war/WEB-INF/web.xml </emphasis>
						file and add the content as below or add the web.xml in anyframe-X.X.X/ide/eclipse-plugins/hudson 
						to the [Hudson installation folder]/hudson/war/WEB-INF folder.
					</para>
					<para>hudsonHome, hudsonJobDir are expressed based on the [Hudson installation folder]/bin basis. 
					If the path is different, than a change is needed. If in the case of hudsonHome, 
					we define to the paths where the three files, hudson.tasks.Ant.xml, hudson.tasks.Mailer.xml, 
					hudson.tasks.Maven.xml , are located. In the case of hudsonJobDir, we define to the folder path 
					where the Judson job exists.        
	        </para>
					<programlisting><![CDATA[<servlet>
    <servlet-name>Hudson Gen Servlet</servlet-name>
    <servlet-class>org.anyframe.ide.eclipse.hudson.HudsonGenServlet</servlet-class>
    <init-param>
        <param-name>hudsonHome</param-name>
        <!-- The relative path is expressed based on the [Hudson installation folder]/bin   -->
        <!-- If the path to start the Hudson is not the above path, we need to adjust the param-value  -->
        <param-value>../hudson</param-value>
    </init-param>
    <init-param>
        <!-- The relative path is expressed based on the [Hudson installation folder]/bin  -->
        <!-- If the path to start the Hudson is not the above path, we need to adjust the param-value  -->
        <param-name>hudsonJobDir</param-name>
        <param-value>../hudson/jobs</param-value>
    </init-param>
</servlet>
<servlet-mapping>
    <servlet-name>Hudson Gen Servlet</servlet-name>
    <url-pattern>/anyframe/api/*</url-pattern>
</servlet-mapping>]]></programlisting>
				</listitem>
			</orderedlist>		
	</section>	
</chapter>