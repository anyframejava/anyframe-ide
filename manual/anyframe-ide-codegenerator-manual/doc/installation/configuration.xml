<chapter id="installation_configuration">
	<title>Configuration</title>

	<para>Code Generator 을 이용하여 생성한 프로젝트 실행을 위해 필요한 환경설정을 한다.</para>

	<itemizedlist numeration="arabic" inheritnum="inherit">
		<listitem>
			<para>
				<link linkend="installation_configuration_preferences">Preferences 설정</link>
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<link linkend="installation_configuration_preferences_maven">Maven 기반 개발 환경의 설정</link>
					</para>
				</listitem>
				<listitem>
					<para>
						<link linkend="installation_configuration_preferences_ant">Ant 기반 개발 환경의 설정</link>
					</para>
				</listitem>
			</itemizedlist>
		</listitem>
		<listitem>
			<para>
				<link linkend="installation_configuration_property">Property 설정</link>
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<link linkend="installation_configuration_property_anyfrmae">Anyframe</link>
					</para>
				</listitem>
				<listitem>
					<para>
						<link linkend="installation_configuration_property_config">Configuration</link>
					</para>
				</listitem>
				<listitem>
					<para>
						<link linkend="installation_configuration_property_codegenerator">Code Generator</link>
					</para>
				</listitem>
				<listitem>
					<para>
						<link linkend="installation_configuration_property_databases">Databases</link>
					</para>
				</listitem>
			</itemizedlist>
		</listitem>
		<listitem>
			<para>
				<link linkend="installation_configuration_ctipserver">[참고]CTIP 서버 연계 설정</link>
			</para>
		</listitem>
	</itemizedlist>

	<section id="installation_configuration_preferences">
		<title>Preferences 설정</title>
		<section id="installation_configuration_preferences_maven">
			<title>Maven 기반 개발 환경의 설정</title>
			<para>
				Maven 기반 개발 환경에서는 다음과 같이 Preferneces 정보를 설정하도록 한다.
			</para>
			<itemizedlist>
				<listitem>
					<para>프로젝트 빌드 타입 설정 : 생성할 프로젝트의 빌드 타입을 지정하고, 빌드방식에 따른 Home 정보를
						세팅한다.
						지정한 프로젝트 빌드 타입에 따라 Code Generator 플러그인에서 제공하는 프로젝트 생성화면이 다르게
						제공된다. </para>
					<para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Anyframe &gt;&gt; Build</emphasis>
									에서 MAVEN 선택
								</para>
								<para>Maven Home setting : Maven이 설치된 경로 지정</para>
								<informaltable>
									<caption>MAVEN_HOME 및 Settings.xml 설정</caption>
									<tgroup cols="1">
										<colspec colnum="1" colname="col1" colwidth="*" />

										<thead>
											<row>
												<entry align="center">MAVEN_HOME 및 Settings.xml 설정</entry>
											</row>
										</thead>

										<tbody>
											<row>
												<entry>
													Maven 빌드 방식을 채택하여 프로젝트를 생성하고자 하는 경우, 로컬에 Maven이 설치되어 있어야 하며
													설치된 Maven에 대한 시스템 변수 MAVEN_HOME이 설정되어야 한다.
													또한, Maven 프로젝트가
													바라봐야 할 Remote Repository 정보에 대해 settings.xml 에
													정의가 필요하다.
													이에
													대한
													자세한 가이드는 Anyframe 포탈의
													Quick Start의 [
													<ulink
														url="http://www.anyframejava.org/project/anyframe/quickstart">Maven 설치 및 환경설정 부분</ulink>
													]을 참조한다.
												</entry>
											</row>
										</tbody>
									</tgroup>
								</informaltable>
							</listitem>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Maven &gt;&gt; User Settings</emphasis>
									에서 User Settings 경로 확인
								</para>
								<para>User Settings : Anyframe
									Repository(http://dev.anyframejava.org/maven/repo) 속성이 추가된
									settings.xml 파일 경로 설정</para>
								<para>Maven 빌드 방식을 채택하여 프로젝트를 생성하는 경우 이클립스에 m2e가 설치되어 있어야
									한다.
									이는
									생성된 프로젝트가 Maven 프로젝트 형태로 전환되기 때문인데, 이 때 m2e가 바라보는
									settings.xml 은
									Window &gt;&gt; Preferences &gt;&gt;Maven &gt;&gt; User
									Settings 에
									정의되어 있는 경로의 파일이다.
									Anyframe
									Repository(http://dev.anyframejava.org/maven/repo) 속성이 추가되어 있는
									settings.xml 파일 경로가
									Preferences에 설정되어 있는지 확인하고, 경로가 맞지 않다면 수정하도록
									한다.
								</para>
							</listitem>
						</itemizedlist>

					</para>
				</listitem>
				<listitem>
					<para>[선택] Archetype 버전 설정 : Basic Archetype 버전을 설정하여 프로젝트 생성 시 사용할
						Archetype을 선택할 수 있게 한다.
						설정하지 않은 경우, 최신 버전의 Archetype을 이용하여 프로젝트가
						생성된다. 
					</para>
					<para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Anyframe &gt;&gt; Build</emphasis>
									에서 MAVEN 선택
								</para>
								<para>[Optional] Archetype Version setting : Archetype 버전 설정
								</para>
								<para>
									Basic Archetype Version을 설정할 수
									있다. 우측의 콤보 박스를 선택하여 버전 목록을
									확인해볼 수 있는데
									로컬 환경에 archetype-catalog.xml 파일이 존재하면 이 파일로부터 버전 목록을
									얻고,
									로컬 환경에 파일이 존재하지 않으면 원격 Repository로부터 archetype-catalog.xml
									파일을
									다운로드 받아서 버전 목록을 얻어온다.  
								</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>Log Level 설정 : Maven 명령어 수행 시 나오는 로그 정보들을 레벨(ERROR, INFO,
						DEBUG) 별로 구분하여 확인해볼 수 있도록 설정한다.
						디폴트로 INFO 레벨이 설정되어 있다. 
					</para>
					<para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Anyframe &gt;&gt; Build</emphasis>
									에서 MAVEN 선택
								</para>
								<para>Log Level setting : 로그 레벨 설정</para>
								<para>
									ERROR, INFO, DEBUG 중 하나의 로그 레벨을 선택하도록 한다. ERROR를 선택하면 실제
									Maven 명령어 실행 시 명령어 파라미터로 "-q"를 입력한 것과 동일한
									기능으로 에러 로그로 제공되는 로그
									메시지들만 보여지게 된다.
									INFO를 선택하면 실제 Maven 명령어 실행 시
									기본적으로 보여지는 로그 메시지들이
									보인다.
									DEBUG를 선택하면 실제 Maven 명령어 실행 시 명령어 파라미터로 "--debug"를 입력한 것과
									동일한 기능으로
									디버그성 로그 메시지들이 모두 함께 보여지게 된다.
								</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>Server 설정 : 어플리케이션이 구동될 WAS로 Tomcat v6.0을 사용한다.</para>

					<para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Server
										&gt;&gt; Runtime Environments</emphasis>
									에서 Add..클릭
								</para>
							</listitem>
							<listitem>
								<para>Name : Apache Tomcat v6.0</para>
							</listitem>
							<listitem>
								<para>Tomcat Installation directory : [Tomcat 이 설치된 root 경로]
								</para>
							</listitem>
							<listitem>
								<para>JRE : Workbench default JRE</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="installation_configuration_preferences_ant">
			<title>Ant 기반 개발 환경의 설정</title>
			<para>
				Ant 기반 개발 환경에서는 다음과 같이 Preferneces 정보를 설정하도록 한다.
			</para>

			<itemizedlist>
				<listitem>
					<para>프로젝트 빌드 타입 설정 : 생성할 프로젝트의 빌드 타입을 지정하고, 빌드방식에 따른 Home 정보를
						세팅한다.
						지정한 프로젝트 빌드 타입에 따라 Code Generator 플러그인에서 제공하는 프로젝트 생성화면이 다르게
						제공된다.
					</para>

					<para>

						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Anyframe &gt;&gt; Build</emphasis>
									에서
									ANT 선택
								</para>
								<para>Anyframe Home : Anyframe이 설치된 root 경로 지정.</para>
								<para>Offline : Anyframe과 연관된 라이브러리를 online으로 연결해서 지원받을지 여부 결정.
									체크를 하는 경우 [Anyframe 을 설치한 root 폴더 경로]/repo 에 있는 라이브러리만 사용,
									체크하지
									않는 경우는 필요한 라이브러리가 로컬에 없는 경우 remote로 부터 다운받는다.
					</para>
								<informaltable>
									<caption>ANT HOME 설정</caption>
									<para>Anyframe 설치 시 제공된 Ant를 인식하도록 Eclipse의 디폴트 Ant Home 정보를
										변경한다.
						
						</para>
									<tgroup cols="1">
										<colspec colnum="1" colname="col1" colwidth="*" />

										<thead>
											<row>
												<entry align="center">ANT HOME 설정</entry>
											</row>
										</thead>

										<tbody>
											<row>
												<entry>
													<itemizedlist>
														<listitem>
															<para>
																Ant Home 변경 :
																<emphasis role="bold">Window &gt;&gt; Preferences
																	&gt;&gt; Ant &gt;&gt; Runtime &gt;&gt; Classpath Tab
																	&gt;&gt; 우측 하단의 Ant Home..</emphasis>
																버튼 클릭
															</para>
															<para>path : [Anyframe 이 설치된 root 경로]/ide/ant</para>
														</listitem>
													</itemizedlist>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</informaltable>
							</listitem>
						</itemizedlist>

					</para>
				</listitem>
				<listitem>
					<para>[선택] Archetype 버전 설정 : Basic Archetype 버전을 설정하여 프로젝트 생성 시 사용할
						Archetype을 선택할 수 있게 한다.
						설정하지 않은 경우, 최신 버전의 Archetype을 이용하여 프로젝트가
						생성된다. 
			</para>
					<para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Anyframe &gt;&gt; Build</emphasis>
									에서 ANT 선택
								</para>
								<para>[Optional] Archetype Version setting : Archetype 버전 설정
								</para>
								<para>
									Basic Archetype Version을 설정할 수 있다. 우측의 콤보
									박스를 선택하여 버전 목록을
									확인해볼 수 있는데
									로컬 환경에 archetype-catalog.xml 파일이 존재하면 이 파일로부터 버전 목록을
									얻고,
									로컬 환경에 파일이 존재하지 않으면 원격 Repository로부터 archetype-catalog.xml
									파일을
									다운로드 받아서 버전 목록을 얻어온다.  
						</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>Log Level 설정 : Ant 명령어 수행 시 나오는 로그 정보들을 레벨(ERROR, INFO,
						DEBUG) 별로 구분하여 확인해볼 수 있도록 설정한다.
						디폴트로 INFO 레벨이 설정되어 있다. 
			</para>
					<para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Anyframe &gt;&gt; Build</emphasis>
									에서 ANT 선택
								</para>
								<para>Log Level setting : 로그 레벨 설정</para>
								<para>
									ERROR, INFO, DEBUG 중 하나의 로그 레벨을 선택하도록 한다. ERROR를 선택하면 빌드
									스크립트 파일을
									기준으로 실제 Ant 명령어 실행 시
									ERROR 로그 레벨을 설정한 것과 동일하게 에러 로그로
									제공되는 로그 메시지들만 보여지게 된다.
									INFO를 선택하면 실제 Ant 명령어 실행 시 기본적으로 보여지는 로그
									메시지들이 보인다.
									DEBUG를 선택하면 실제 Ant 명령어 실행 시 DEBUG 로그 레벨을 설정한 것과 동일하게
									디버그성 로그 메시지들이 모두
									함께 보여지게 된다.
						</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>Server 설정 : 어플리케이션이 구동될 WAS로 Tomcat v6.0을 사용한다.</para>

					<para>
						<itemizedlist>
							<listitem>
								<para>
									<emphasis role="bold">Window &gt;&gt; Preferences &gt;&gt;
										Server &gt;&gt; Runtime Environments</emphasis>
									에서 Add..클릭
								</para>
							</listitem>
							<listitem>
								<para>Name : Apache Tomcat v6.0</para>
							</listitem>
							<listitem>
								<para>Tomcat Installation directory : [Tomcat 이 설치된 root 경로]
								</para>
							</listitem>
							<listitem>
								<para>JRE : Workbench default JRE</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section id="installation_configuration_property">
		<title>Property 설정</title>
		<para>
			Code Generator를 사용하기 위한 기본 속성들을 정의하며 공통 설정 파일, Template 파일 위치,
			기타 설정파일, 사용할 Template 타입 선택,
			Database 정보에 관해 정의한다.
		</para>
		<section id="installation_configuration_property_anyframe">
			<title>Anyframe</title>
			<para>
				[Project Properties] &gt;&gt; Anyframe 에서 속성 정의를 하며, 프로젝트에서 공통적으로
				사용할 설정 XML 파일의 위치를 선택한다. 기본값은
				<emphasis role="bold">
					[Project 파일 경로]/.settings/anyframe
				</emphasis>
				이며 변경을 하고자 할때는 "Browse..." 를 통해 변경을 수행한다.
			</para>
		</section>

		<section id="installation_configuration_property_config">
			<title>Configuration</title>
			<itemizedlist>
				<listitem>
					<para>Template Home</para>
					<para>
						[Project Properties] &gt;&gt; Anyframe &gt;&gt; Configuration 에서
						속성 정의를 하며, Template Home
						위치를 선택한다. 기본값은
						<emphasis role="bold">
							[Project 파일
							경로]/.settings/anyframe/templates
						</emphasis>
						이며 변경을 하고자 할때는 "Browse..." 를 통해 변경을 수행한다.
					</para>
				</listitem>
				<listitem>
					<para>Jdbc Drivers</para>
					<para>
						[Project Properties] &gt;&gt; Anyframe &gt;&gt; Configuration 에서
						속성 정의를 하며, Jdbc Drivers
						속성 정의 파일의 위치를 선택한다. 기본값은
						<emphasis role="bold">
							[Project 파일 경로]/.settings/anyframe
						</emphasis>
						이며 변경을 하고자 할때는 "Browse..." 를 통해 변경을 수행한다.
					</para>
				</listitem>
				<listitem>
					<para>Databases</para>
					<para>
						[Project Properties] &gt;&gt; Anyframe &gt;&gt; Configuration 에서
						속성 정의를 하며, Databases에 입력한
						정보를 저장할 파일의 위치를 선택한다.. 기본값은
						<emphasis role="bold">
							[Project 파일 경로]/.settings/anyframe
						</emphasis>
						이며 변경을 하고자 할때는 "Browse..." 를 통해 변경을 수행한다.
					</para>
				</listitem>
			</itemizedlist>

		</section>

		<section id="installation_configuration_property_codegenerator">
			<title>Code Generator</title>
			<para>
				[Project Properties] &gt;&gt; Anyframe &gt;&gt; Code
				Generator에서 속성 정의를 하며,
				Template Type 과 DAO Framework을 선택한다. 이 설정들은
				설치된 Anyframe Plugin에 따라
				선택이 가능하다.
			</para>
		</section>

		<section id="installation_configuration_property_databases">
			<title>Databases</title>
			<para>
				[Project Properties] &gt;&gt; Anyframe &gt;&gt; Databases에서 속성
				정의를 하며,
				Code Generator의 기능을 사용하기 위한 Database 정보들을 정의한다.Code
				Generator를 통해 프로젝트를
				생성한 경우는 기본값으로 신규 생성 시 입력된 값이 설정된다.
			</para>
		</section>
	</section>
	<section id="installation_configuration_ctipserver">
		<title>[참고]CTIP 서버 연계 설정</title>
	</section>
	<para>
		Anyframe Java IDE에서 CTIP 서버와 연계하여 CTIP 프로젝트에 대해 추가,수정,삭제,실행 등의
		작업을 하기 위해서는 다음과 같은 추가 작업이 필요하다.
		</para>
	<orderedlist>
		<listitem>
			<para>Anyframe 포탈 사이트에서 anyframe-ide-x.x.x.zip 을 다운받는다.</para>
		</listitem>
		<listitem>
			<para>
				압축을 풀고 anyframe-ide-x.x.x/ctip 폴더에 있는 플러그인 패키지
				파일(
				<emphasis role="bold">anyframe-ide-ctip-integration-x.x.x.jar
				</emphasis>
				)를 "
				<emphasis role="bold">[CTIP 서버 설치 폴더]/jenkins/war/WEB-INF/lib
				</emphasis>
				" 로 복사한다.
			</para>
			<para>anyframe-ide-ctip-integration-x.x.x.jar 은 IDE에서 설정한 정보를 CTIP
				서버에
				반영하는 역할을 수행한다.</para>
		</listitem>

		<listitem>
			<para>
				<emphasis role="bold">[CTIP 서버 설치 폴더]/jenkins/war/WEB-INF/web.xml
				</emphasis>
				파일을 열어서 아래와 같은 내용을 추가하거나,
				anyframe-ide-x.x.x/ctip 폴더 내에 있는 web.xml 을
				[CTIP 서버 설치 폴더]/jenkins/war/WEB-INF 폴더에 붙여넣는다.
			</para>
			<para>hudsonHome, hudsonJobDir 는 [CTIP 서버 설치 폴더]/bin 기준으로 표현된 것으로,
				경로가 다를 경우 수정이 필요하다.
				hudsonHome의 경우
				hudson.tasks.Ant.xml,hudson.tasks.Mailer.xml,
				hudson.tasks.Maven.xml
				세개 파일에서 현재 개발 환경에 맞도록 폴더 경로를 지정한다.
				hudsonJobDir의 경우 hudson job 이 있는
				폴더경로를 지정한다.        
	        </para>
			<programlisting><![CDATA[<servlet>
    <servlet-name>Hudson Gen Servlet</servlet-name>
    <servlet-class>org.anyframe.ide.ctip.integration.CtipGenServlet</servlet-class>
    <init-param>
        <param-name>hudsonHome</param-name>
        <!-- 상대경로는 [Jenkins 설치 폴더]/bin 기준으로 표현된 것  -->
        <!-- Jenkins을 start 하는 경로가 위의 경로가 아닌경우 param-value 조정해야 함  -->
        <param-value>../jenkins</param-value>
    </init-param>
    <init-param>
        <!-- 상대경로는 [Jenkins 설치 폴더]/bin 기준으로 표현된 것  -->
        <!-- Jenkins을 start 하는 경로가 위의 경로가 아닌경우 param-value 조정해야 함  -->
        <param-name>hudsonJobDir</param-name>
        <param-value>../jenkins/jobs</param-value>
    </init-param>
</servlet>
<servlet-mapping>
    <servlet-name>Hudson Gen Servlet</servlet-name>
    <url-pattern>/anyframe/api/*</url-pattern>
</servlet-mapping>]]></programlisting>
		</listitem>
	</orderedlist>
</chapter>