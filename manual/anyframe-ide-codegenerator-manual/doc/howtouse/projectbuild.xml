<chapter id="howtouse_projectbuild">
  <title>Building a Project</title>

  <para>Anyframe Java IDE 을 이용해 프로젝트 빌드를 수행할 수 있다. </para>

  <para>프로젝트 생성 시에 빌드 스크립트 파일이 함께 생성되어, 빌드를 수행할 수 있다. 빌드 도구로 Ant를 사용할 경우
  default target 빌드 수행 시 컴파일, 테스트, 패키징, 배포 등의 공통적인 빌드 프로세스 단계를 수행해주고 있다. 
  Maven 프로젝트의 경우 pom.xml 파일을 이용하여 빌드 및 패키징, 리포팅을 수행할 수 있다.</para>

  <para>아래의 두 가지 경우로 나누어서 살펴보자. </para>

	<itemizedlist>
    <listitem>
      <para>[<link linkend="howtouse_projectbuild_maven">Maven 프로젝트 빌드</link>]</para>
    </listitem>
    
    <listitem>
      <para>[<link linkend="howtouse_projectbuild_ant">Ant 프로젝트 빌드</link>]</para>
    </listitem>
  </itemizedlist>

	<section id="howtouse_projectbuild_maven">
    <title>Maven 프로젝트 빌드</title>

    <para>프로젝트 내 pom.xml 확인</para>

    <para>Maven은 pom.xml 파일을 기반으로 빌드되기 때문에 파일에 정의되어 있는 내용 확인한다.
    Reporting을 위해서는 <![CDATA[<reporting>]]>에 report를 남기고 싶은 Plugin들이 정의되어 있어야 하며, 
    Anyframe Java IDE을 통해서 생성된 Maven 프로젝트에는 Junit Test, Emma, Jdepend, PMD 등의 reporting Plugin이 추가되어 있다. </para>
    
    <para>다음은 프로젝트에 생성된 pom.xml 의 일부분이다.</para>
    <programlisting language="xml"><![CDATA[<reporting>
    <excludeDefaults>true</excludeDefaults>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.5</version>
            <configuration>
                <forkMode>always</forkMode>
            </configuration>
        </plugin>
        중략...
</reporting>]]></programlisting>

    <para>프로젝트 내 pom.xml 선택 후 &gt;&gt; Run As &gt;&gt; Maven Build...을 선택</para>
    
    <para>Goals 에 <emphasis role="bold">clean package</emphasis> 를 수행하게 되면 빌드 수행결과 파일 및 프로젝트일 경우 war 파일이 생성되고, 
    <emphasis role="bold">clean site package</emphasis> 를 수행하게 되면 리포트 결과물도 함께 생성되게 된다.
빌드 결과물은 [프로젝트 Home]/target에 존재하며, 리포트 결과물은 [프로젝트 Home]/target/site/내에 존재한다.
    </para>
    
    <para>만약 M2Eclipse 를 이용하여 이를 수행하였을 때 "site" goal이 정상적으로 수행이 안 된다면, pom.xml 파일이 있는 경로에서 위와 같은 goal을 cmd창을 통해 수행한다.</para>

  </section>
  
  <section id="howtouse_projectbuild_ant">
    <title>Ant 프로젝트 빌드</title>

    <orderedlist>
      <listitem>
        <para>프로젝트 내 build.xml 확인 </para>

        <para>프로젝트 내부로 자동 생성되어진 build.xml 파일이 존재한다. 빌드 스크립트 내에는 빌드 수행을 위한
        compile, test, package등 공통적으로 사용되는 빌드 target들이 존재한다. 실제 구동 내역을
        가지고 있는 공통 스크립트는  [Anyframe 을 설치한 root 폴더 경로]/ide/cli/scripts/project-build.xml 파일 내에
        작성되어 있다. 프로젝트 별로 변경해야 하는 일이 생기면 공통 스크립트를 수정하면 된다. 또한 각 프로젝트 단위 별로 공통
        빌드 내역 외에 특화된 빌드 내용을 추가해야 하는 경우에는 해당 빌드 target을 확장하여 추가해 넣을 수 있다. </para>
        
        <para>[프로젝트가 생성된 위치]src/main/webapp/WEB-INF/lib 폴더를 클래스패스로 설정하여 빌드한다.</para>
        
        <para>다음은 생성된 build.xml 의 일부분이다. </para>
		<programlisting language="xml"><![CDATA[<project name="Build module" default="default" basedir=".">		
    <property file = "./META-INF/project.mf"/>
    <import file = "${anyframe.home}/ide/cli/scripts/project-build.xml"/>
	
    <target name="clean" depends = "shared:clean" />
    <target name="init" depends = "shared:init" />
    <target name="resources" depends = "shared:resources" />
    <target name="compile" depends = "shared:compile" />
    <target name="test-resources" depends = "shared:test-resources" />
    <target name="test-compile" depends = "shared:test-compile" />
    <target name="package" depends = "shared:package" />
    <target name="extract" depends = "shared:extract" />
    <target name="emma-jars" depends = "shared:emma-jars" />
    <target name="test" depends = "shared:test" />
    <target name="report" depends = "shared:report" />

    <target name = "default" depends = "init, resources, compile, package"/>
    <target name = "deploy" depends = "default, extract"/>
    <target name = "all" depends = "clean, init, resources, compile, 
               test-resources, test-compile, package, emma-jars, test, report"/>
</project>]]></programlisting>
      </listitem>

      <listitem>
        <para>프로젝트 내 <emphasis role="bold">build.xml</emphasis> 선택 후 &gt;&gt;
        <emphasis role="bold">Run As &gt;&gt; Ant Build</emphasis> 을 선택</para>
        
        <para> default target이 수행되어 다음과 같은 빌드 프로세스를 거치게 된다. 최종 결과물인 프로젝트 바이너리 파일은  [프로젝트 Home]/dist 폴더 내에
        존재하게 된다. </para>

        <para><emphasis role="bold">init -&gt; resources -&gt; compile -&gt;
        package</emphasis></para>
      </listitem>

      <listitem>
        <para>프로젝트 내 <emphasis role="bold">build.xml</emphasis> 선택 후 &gt;&gt;
        <emphasis role="bold">Run As &gt;&gt; Ant Build...</emphasis> 을 선택하여 뜬 팝업에서 all target만 지정. </para> 
        
        <para> default target이 아닌 리포팅 결과물을 생성해내는 target을 실행시켜 본다. 빌드 시 코드 분석 리포트, 테스트 수행 결과 리포트, 코드
        커버리지 리포트 등을 생성시킨다. 리포트 결과물은  [프로젝트 Home]/target/output 폴더에 생성되므로 빌드가 모두 완료된 뒤
        확인해보도록 한다. </para>

        <para><emphasis role="bold">clean -&gt; init -&gt; resources -&gt; compile -&gt;
        test-resources -&gt; test-compile -&gt; package -&gt; emma-jars -&gt;
        test -&gt; report </emphasis></para>
      </listitem>
    </orderedlist>
  </section>
	
</chapter>