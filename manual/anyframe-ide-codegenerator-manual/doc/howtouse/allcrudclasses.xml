<chapter id="howtouse_domain">
  <title>Creating All CRUD Classes</title>

  <para>Code Generator를 이용해 Anyframe Java Core 기반의 클래스를 생성해본다.</para>

  <para>DB 테이블 기반으로 Domain 클래스를 생성시키기 때문에 JDBC 설정이 제대로 되었는지 [<link
  linkend="installation_configuration_property_databases">Databases</link>]을 참조하여 확인 한 후, Anyframe Java Core 기반의 클래스를
  생성하도록 한다.</para>
	
	<itemizedlist numeration="arabic" inheritnum="inherit">
		<listitem>
			<para><link linkend="installation_installation_domain">Domain 생성</link></para>
		</listitem>
		<listitem>
			<para><link linkend="installation_installation_crud">CRUD 생성</link></para>
		</listitem>
	</itemizedlist>

<section id="installation_installation_domain">
<title>Domain 생성</title>
  <orderedlist numeration="arabic" inheritnum="inherit"> 
	<listitem>
     <para>Project 선택 후 File &gt;&gt; New &gt;&gt; Other.. &gt;&gt; Anyframe &gt;&gt;
        Domain/VO Classes from DB Tables 를 선택
     </para>
  </listitem>
   <listitem>
   <para>
   		Base Package 에서 Domain 클래스를 어느 소스 코드 패키지 하위로 생성시킬 것인지를 선택한다.
   		Refresh 버튼을 수행하면 현재 선택 가능한 DB Table이 트리 형태로 조회되며 Domain 클래스로 생성하고자하는 Table을 선택한다. 
   		선택한 Table로 Domain 클래스를 생성 할 경우 Finish 버튼을 클릭한다.</para>

      <para>참조관계에 있는 테이블의 경우 해당 테이블을 동시에 선택하여 Domain 클래스를 생성 해야 하며, 이를 통해
      참조관계에 관한 정보가 제공된다.</para>

      <itemizedlist>
        <listitem>
          <para>Base Package: Edit 버튼으로 해당 프로젝트에 있는 소스 코드 패키지 경로가 조회되고 수정이 가능하다.(src/main/java 소스 폴더에 한함)</para>
        </listitem>
        <listitem>
          <para>Select Tables: JDBC 구성에 따라 연결된 DB의 테이블 목록이 조회된다.</para>
        </listitem>
      </itemizedlist>
<warning>
  <title>DB 타입이 MySQL 경우 테이블 선택 시 주의사항</title>
    <para>Anyframe Java IDE에서는 Hibernate Tools의 API를 이용하여 Domain 자동 생성기능을 지원하고 있다.
    DB가 mysql일 경우는 Hibernate Tools의 API에서 소문자로된 테이블명만 인식하므로,
    대문자로 된 테이블명을 선택하여 Domain 클래스 자동 생성 기능을 수행하는 경우 Domain 클래스가 생성되지 않을 수 있다.(빌드 도구로 Ant를 사용하는 경우)
    </para>
</warning>
  </listitem>
  <listitem>
   <para>Domain 클래스 생성 작업이 완료되면, Console 창을 통해
   Build Successful 이라는 메세지가 출력된다.
   Domain 클래스가 제대로 생성되었는지 확인하기 위해 
   Domain 클래스 생성시 지정한 패키지 하위로 Domain 클래스들이 위치하고 있는지 확인한다.
   생성된 Domain 클래스는 JPA Annotation 설정을 통해 DB Table, Column 정보들을 가지고 있다.
   참고로, Build Successful 메세지가 출력되어도 해당 패키지에 Domain 클래스가 생성되지 않은 경우는 Domain 클래스가 정상적으로 생성되지 않은것이다.
   예를 들어, DB 타입이 MySQL인 경우처럼 Hibernate Tools의 API가 인식하지 못하는 테이블명이 입력되었을 경우,
   Build Successful 메세지는 출력되지만 실제로 Domain 클래스는 생성되지 않는다. 
      </para>
		<programlisting language="java">@Entity
@Table(name = "BOARD")
<emphasis role="bold">//@Table의 schema 속성은 default 템플릿을 활용하여 
//sybase DB와 hibernate dao framework을 사용할때 정의됨
//@Table의 catalog 속성은 catalog 정보가 존재할 경우 정의됨</emphasis>
public class Board implements Serializable {
    private BoardId id;
    private BoardMaster boardMaster;
    private String boardName;
    중략...
    @EmbeddedId
    @AttributeOverrides({@AttributeOverride(name = "boardId",column = 
           @Column(name = "BOARD_ID",nullable = false)
        )
        , @AttributeOverride(name = "boardMasterId",column = 
           @Column(name = "BOARD_MASTER_ID",nullable = false)
        )
    })
    public BoardId getId() {
        return this.id;
    }
    public void setId(BoardId id) {
        this.id = id;
    }
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BOARD_MASTER_ID", nullable = false, 
                insertable = false, updatable = false)
    public BoardMaster getBoardMaster() {
        return this.boardMaster;
    }
    public void setBoardMaster(BoardMaster boardMaster) {
        this.boardMaster = boardMaster;
    }
    @Column(name = "BOARD_NAME", nullable = false, length = 150)
    public String getBoardName() {
        return this.boardName;
    }
    public void setBoardName(String boardName) {
        this.boardName = boardName;
    }
}</programlisting>
      </listitem>
  </orderedlist>
  
<note>
<title>참고</title>
<para>위에서 설명한 기능 수행 도중에는 프로젝트 생성, 코드 생성 및 DB 변경 등과 같은 
  Anyframe Java IDE의 기능을 동시에 수행시킬 수 없으므로 유의하도록 한다. 
(Background 실행을 통한 기능 수행 시) </para>
</note>
</section>

<section id="installation_installation_crud">
	<title>CRUD 생성</title>
	
	<para>Code Generator를 이용해 CRUD를 생성해본다.</para>

	<para>Domain 클래스를 중심으로 CRUD에 대한 기본 코드 및 Sample UI를 생성하고 자동으로 테스트 코드와 테스트 데이터를
		생성해줌으로써
		생성된 코드의 기능 확인까지 손쉽게 할 수 있다. 따라서, CRUD 생성 기능을 사용하기 전에
		Domain 생성 기능을 이용하여, 연결된 DB 테이블 기반의 Domain 클래스를 먼저 생성하도록 한다.
		Domain Generation 기능을 수행 할 때, 참조관계에 있는 테이블의 경우 
		해당 테이블을 동시에 선택하여 Domain 클래스를 생성하지 않으면,
		CRUD Generation 기능을 수행 할 때 에러가 발생하므로 주의한다.
	</para>

	<orderedlist numeration="arabic" inheritnum="inherit">
		<listitem>
			<para>Project 선택 후 File &gt;&gt; New &gt;&gt; Other.. &gt;&gt; Anyframe &gt;&gt; All CRUD Classes 를 선택
			</para>
		</listitem>
		<listitem>
			<para>생성된 Wizard 에서 현재 선택 가능한 Domain Model 클래스 목록이 조회된다.</para>
		</listitem>
		<listitem>
			<para>CRUD 기능을 구현하고 싶은 Domain Model 클래스를 선택하고, CRUD Project Configuration
				내용을 입력한다.</para>

			<itemizedlist>
				<listitem>
					<para>Base Package: CRUD가 생성될 패키지 이름이며, 특정 서브 시스템 하위로 코드를 생성하고 싶다면 중간
						패키지
						정보를 함께 입력하면 된다. (ex. sub.categories)</para>
				</listitem>
				<listitem>
					<para>Web source code generation: 비즈니스 레이어에 해당하는 소스 뿐 아니라 프리젠테이션
						레이어 소스 코드들도 함께 생성하고자 한다면 체크 박스에 체크하도록 한다. </para>
				</listitem>
				<listitem>
					<para>Insert sample data into a database: 샘플 데이터를 생성하고자 한다면 체크 박스에 체크하도록 한다.</para>
				</listitem>
			</itemizedlist>
		</listitem>
		<listitem>
			<para>
				Finish 버튼을 클릭한 후, CRUD 소스코드 생성 작업이 완료되면, Console 창을 통해
   				Build Successful 이라는 메세지가 출력된다.
				CRUD 소스코드가 제대로 생성되었는지 확인하기 위해 
				Domain 클래스에 대한 비즈니스 서비스 인터페이스,구현 클래스, DAO 클래스,
				Spring 설정 파일들, 테스트
				코드, 테스트 데이터 등을 확인해본다. 또한 Spring MVC
				Controller 클래스, Spring
				MVC 설정 파일, 테스트 코드, JSP 페이지 등이 생성된다.
				또한, Build Successful 이라는 메세지가 출력되었음에도, CRUD 소스 코드가 정상적으로 생성되지 않았다면,
				[프로젝트 Home]/target/classes 에 CRUD 소스코드 대상인 Domain 클래스에 대한 컴파일이 정상적이지 않거나,
				CRUD 소스코드 수행 시 필수적으로 필요한 폴더나 파일이 존재하지 않을 수도 있기 때문에
				프로젝트에 대한 빌드를 수행하거나, Console 창의 로그를 확인하여 필수적으로 필요한 폴더나 파일들을 확인하도록 한다.
				</para>
				<note>
					<title>CRUD 생성 후 src/test/java에 오류가 발생할 경우</title>
					<para>
						CRUD 생성 후 소스파일에
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="../image/eclipseplugin/createapp-error.jpg" />
							</imageobject>
							<textobject>
								<phrase>eclipse project 오류 표시</phrase>
							</textobject>
						</inlinemediaobject>
						표시가 뜨는 경우는, Anyframe Test Plugin이 없기 때문이다. Plugin Installation View 에서
						Anyframe Test Plugin을 설치하면 에러가 해결된다.
					</para>
				</note>				
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">서비스인터페이스</emphasis>
						(src/main/java/[대표패키지]/[-package 값]/service/[Entity
						클래스명]Service.java)
					</para>
					<programlisting language="java"><![CDATA[public interface BoardService{
    void create(Board board) throws Exception;
    void remove(BoardId id) throws Exception; 
    중략...           
}]]></programlisting>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">서비스구현클래스</emphasis>
						(src/main/java/[대표패키지]/[-package 값]/service/impl/[Entity
						클래스명]ServiceImpl.java)
					</para>
					<programlisting language="java"><![CDATA[@Service("boardService")
@Transactional(rollbackFor = {Exception.class}, propagation = Propagation.REQUIRED)
public class BoardServiceImpl implements BoardService {
	    
    @Inject
    @Named("boardDao")
    private BoardDao boardDao;
	
    public void create(Board board) throws Exception{
        this.boardDao.create(board);
    }
    
    public void remove(BoardId id) throws Exception {
        this.boardDao.remove(id);
    }
    중략...    
}]]></programlisting>
				</listitem>

				<listitem>
					<para>
						<emphasis role="bold">DAO클래스</emphasis>
						(src/main/java/[대표패키지]/[-package 값]/service/impl/[Entity
						클래스명]Dao.java)
					</para>
					<programlisting language="java"><![CDATA[@Repository("boardDao")
public class BoardDaoQueryImpl extends QueryServiceDaoSupport {

    @Value("#{contextProperties['pageSize'] ?: 10}")
    int pageSize;
    
    @Value("#{contextProperties['pageUnit'] ?: 10}")
    int pageUnit;
    
    @Inject
    public void setQueryService(IQueryService queryService) {
        super.setQueryService(queryService);
    }
	
    /** {@inheritDoc} */
    public void create(Board board) throws Exception {
        super.create("createBoard", board);
    }
    /** {@inheritDoc} */
    public void remove(BoardId id) throws Exception {
        Board board = new Board();        
        board.setId(id);    
        super.remove("removeBoard", board);
    }
    중략...
}]]></programlisting>
				</listitem>

				<listitem>
					<para>
						<emphasis role="bold">매핑쿼리문</emphasis>
						(src/main/resources/sql/query/mapping-query-[Entity 클래스명].xml)
					</para>
					<programlisting language="xml"><![CDATA[<queryservice>
  <queries>
    <query id="createBoard">
      <statement>
        INSERT INTO BOARD (BOARD_ID, BOARD_DESC, BOARD_MASTER_ID, BOARD_NAME, 
               BOARD_ORDER, BOARD_TOPICS, REG_DATE) 
        VALUES (:vo.id.boardId, :vo.boardDesc, :vo.id.boardMasterId, :vo.boardName, 
               :vo.boardOrder, :vo.boardTopics, :vo.regDate)
      </statement>
    </query>
    중략...
  </queries>
</queryservice>]]></programlisting>
				</listitem>

				<listitem>
					<para>
						<emphasis role="bold">MessageSoruce</emphasis>
						(src/main/resources/message/message-generation.properties)
					</para>
					<programlisting><![CDATA[# -- Board-START
board.id.boardId=Board Id		
board.id.boardMasterId=Board Master Id		
board.boardDesc=Board Desc
board.boardName=Board Name
board.boardOrder=Board Order
board.boardTopics=Board Topics
board.regDate=Reg Date

# -- success messages -- 
success.board.create=Board has been added successfully.
success.board.update=Board has been updated successfully.
success.board.delete=Board has been deleted successfully.

# -- error messages --
error.boardserviceimpl.create=Board data not created
error.boardserviceimpl.create.solution=Enter correct data for mandatory field 
or enter data according to formats means date format as yyyy-mm-dd
error.boardserviceimpl.create.reason=Entered incorrect data for Board
중략...]]></programlisting>
				</listitem>

				<listitem>
					<para>
						<emphasis role="bold">통합 test case</emphasis>
						(src/test/java/[대표패키지]/[-package 값]/service/[Entity
						클래스명]ServiceTest.java)
					</para>
					<programlisting language="java"><![CDATA[@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "file:./src/main/resources/spring/context-*.xml" })
public class BoardServiceTest{

    @Inject
    @Named("boardDao")
    private BoardDao boardDao;

    @Test
    @Rollback(value=true)	    
    public void manageBoard() throws Exception {
        // 1. create a new board
        Board board = getBoard();
            
        if(boardService.get(board.getId()) != null)
                boardService.remove(board.getId());

        boardService.create(board);
         중략...
    }
    중략...
}]]></programlisting>
				</listitem>

				<listitem>
					<para>
						<emphasis role="bold">컨트롤러</emphasis>
						(src/main/java/[대표패키지]/[-package 값]/web/[Entity
						클래스명]Controller.java)
					</para>
					<programlisting language="java"><![CDATA[@Controller
@RequestMapping("/board.do")
public class BoardController {

    /**
     * Resource Injection on BoardService
     */
    @Inject
    @Named("boardService")
    private BoardService boardService;

    중략...    

    /**
     * Display form for adding Board.
     * @param model model containing control data
     * @return the prepared form view
     * @throws Exception in case of an invalid new form object
     */ 
    @RequestMapping(params = "method=createView")  
    public String createView(Model model) throws Exception 
    {        
        model.addAttribute(new Board());
		        
        return "genViewBoard";        
    }
}]]></programlisting>
				</listitem>


				<listitem>
					<para>
						<emphasis role="bold">UI JSP 파일</emphasis>
						(src/main/webapp/WEB-INF/jsp/[Entity 클래스 명]/*.jsp)
					</para>
					<programlisting><![CDATA[<%@ page language="java" errorPage="/sample/common/error.jsp" pageEncoding="UTF-8" contentType="text/html;charset=utf-8" %>
<%@ include file="/sample/common/top.jsp"%>
		<div class="location"><a href="<c:url value='/anyframe.jsp'/>">Home</a> &gt; <a href="<c:url value='/boardF.do?method=list'/>">Board</a></div>
    </div>
    <hr />
<script type="text/javascript" src="<c:url value='/sample/javascript/CommonScript.js'/>"></script>    
<script type="text/javascript">
	function fncCreateBoardView() {
		document.location.href="<c:url value='/board.do?method=createView'/>";
	}		
중략...]]></programlisting>
				</listitem>

				<listitem>
					<para>
						<emphasis role="bold">단위 test case</emphasis>
						(src/test/java/[대표패키지]/[-package 값]/web/[Entity
						클래스명]ControllerTest.java)
					</para>
					<programlisting language="java"><![CDATA[@RunWith(JMock.class)
public class BoardControllerTest {

    private BoardController controller;
    private String SUCCESS_CREATEVIEW = "genViewBoard";
    private String SUCCESS_CREATE = "redirect:/board.do?method=list";
    private String SUCCESS_GET = "genViewBoard";
    private String SUCCESS_UPDATE = "redirect:/board.do?method=list";
    private String SUCCESS_LIST = "genListBoard";
    private String SUCCESS_REMOVE = "redirect:/board.do?method=list";
    private Mockery context = new JUnit4Mockery();
    private BoardService mockService = null;
	
    @Before   
    public void setUp() throws Exception {
        System.setProperty("log4j.configuration", "log4j-test.xml");

        this.mockService = context.mock(BoardService.class);                
        this.controller = new BoardController();
        this.controller.setBoardService(this.mockService);       
    }
    
    public void setBoardController(BoardController controller) {
        this.controller = controller;
    }
        
    @Test
    public void testCreateView() throws Exception{
        String viewName = this.controller.createView(new ExtendedModelMap());
        
        assertEquals("returned correct view name", SUCCESS_CREATEVIEW, viewName);
   }
        중략...]]></programlisting>
				</listitem>
			</itemizedlist>
		</listitem>
	</orderedlist>
	<note>
		<title>참고 1</title>
		<para>위에서 설명한 기능 수행 도중에는 프로젝트 생성, 코드 생성 및 DB 변경 등과 같은
			Code Generator 의 기능을
			동시에 수행시킬 수 없으므로 유의하도록 한다.
			(Background 실행을 통한 기능 수행 시) </para>
	</note>
	<note>
		<title>참고 2</title>
		<para>
			CRUD 소스 코드 생성은 Domain 클래스를 기반으로 이루어지는데, 이를 위해 Domain 클래스를 포함한 전체
			프로젝트의
			소스 코드를 컴파일을 한 후 컴파일된 Domain 클래스를 이용하여 코드를 생성한다. 그러므로 프로젝트 내 소스
			코드의 양이 많아
			CRUD 소스 코드 생성 시 컴파일에 걸리는 시간이 많이 소요되는 경우, [Anyframe
			Home]/ide/cli/scripts 폴더 내에 있는 code-generation.xml 파일에서
			"create-crud"
			target 내에 정의된 다음 clean target을 호출해주는 부분을 제거해주도록 한다.
			clean target에서는
			기존에 컴파일된 모든 소스 코드를 삭제한 후 이후 compile target에서 새로 전체
			소스 코드를 컴파일하게 되므로 소스
			코드의 양이 많을 경우 시간이 많이 소요될 수 있다. 속도 향상을 위해서 clean
			target을 제거하는 경우
			incremental
			build를 수행하는 compile target에 의해 변경된 소스 코드만 컴파일되므로 시간이 적게
			소요된다.
				</para>
		<programlisting language="java"><![CDATA[<ant antfile="build.xml" dir="${project.home}" target="clean"/>]]></programlisting>
	</note>
	<note>
		<title>참고 3</title>
		<para>CRUD 소스코드는 정상적으로 생성되었지만 런타임시에 발생할 수 있는 문제에 대해서 해결방법을 알아본다.</para>
		<itemizedlist>
		  <listitem><para>time 타입 데이터가 있는 경우</para>
		  	<itemizedlist>
			  <listitem><para>현상) 입력/수정 화면에서 create/update 할 때 Fali to convert 오류 발생</para></listitem>
			  <listitem><para>원인)Time 타입 데이터(시:분:초)가 request parameter에 String으로 담겨지기 때문에, Domain 클래스와 Binding 될때 데이터 바인딩이 되지 않음</para></listitem>
			  <listitem><para>해결책)Domain 클래스에서 time 타입 컬럼을 string 타입으로 선언하여 사용</para></listitem>
			</itemizedlist>
		  </listitem>
		</itemizedlist>
	</note>
</section>
</chapter>