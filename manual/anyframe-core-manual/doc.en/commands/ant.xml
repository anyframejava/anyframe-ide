<chapter id="commands_ant">
	<title>Ant Commands</title>
	<para>
		Let us constitute Anyframe-based development environment in CLI environment if you adopted Ant as the build tool of the project. 
		This chapter will cover Anyframe Ant Commands first and how to use these commands in detail.
		If Ant environment has not been properly established, check whether the configuration has been properly set referring to <link linkend="installation_ant_configuration">Installation - Anyframe installation and configuration</link> of this manual. 
		
	</para>
	
	<section id="commands_ant_commands">
		<title>Anyframe Ant Commands</title>
		<para>
			Tasks such as installation of Anyframe plugins, generation of projects, generation of domain classes and CRUD source codes, build and execution can be carried out 
			using commands provided by Anyframe in Command Line Interface based on Ant.
			It should be noted that if tasks are carried out executing commands based on CLI(Command Line Interface), 
			they cannot execute properly when values other than command arguments defined in the manual below have been set or essential arguments have been omitted. 
			
		</para>
		
		<section id="commands_ant_commands_list">
			<title>Command list</title>
			<para>
				The following is the list of commands provided by Anyframe, and users can execute the functions they want by entering the following command in the Command window.  
				Options should be entered additionally following the command in the '-{option} {option value}' type. 
			</para>
			<informaltable>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" colwidth="2*"/>
					<colspec colnum="2" colname="col2" colwidth="8*"/>
					<thead>
						<row>
							<entry align="center">Command</entry>
							<entry align="center">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>anyframe create-project</entry>
							<entry>
								It is a command used to generated the basic structure of the sample project to be generated. 
								Based on that it becomes possible to constitute development environment using Anyframe.
								The project generation command has the following options.
								<itemizedlist>
									<listitem>
										<para>
											pjtname: Defines the name of the project. When the name is not assigned, the project is generated with the default name 'myproject'. [optional]
										</para>
									</listitem>
									<listitem>
										<para>
											pjttype: Select the type of the project. When it is selected as 'service', it is generated as a Java project, and when it is selected as 'web', it is generated as a dynamic web project.
											The default value is 'web'. [optional]
										</para>
									</listitem>
									<listitem>
										<para>
											package: Enters the main package name of the project. After that it becomes the name of the source package which becomes the basis of generating source codes. [optional]
										</para>
									</listitem>
									<listitem>
										<para>
											apphome: Assigns the location to generate the project. If the value of this option is not set, basically it is generated in [Anyframe Home]/applications directory. [optional]
										</para>
									</listitem>
									<listitem>
										<para>
											offline: If offline option is set as true when it is difficult to use the network, all commands are executed offline afterwards. 
											Yet, in this case if there is not the required library in Local Repository ([Anyframe Home]/repo), they may not operate properly. [optional, The default is 'false'.]
										</para>
									</listitem>
								</itemizedlist>
							</entry>
						</row>
						<row>
							<entry>anyframe install PLUGIN_NAME</entry>
							<entry>
								Installs the designated plugin based on the generated sample project structure. 
								Designate the name of the plugin to be installed in the location of PLUGIN_NAME.
							</entry>
						</row>
						<row>
							<entry>anyframe uninstall PLUGIN_NAME</entry>
							<entry>
								Deletes the plugins already installed. Designate the name of the plugin to be deleted in PLUGIN_NAME. Anyframe uninstall command has the following option.
								<itemizedlist>
									<listitem>
										<para>
											excludes: Enter the name of the file to be excluded when uninstalling a plugin. 
											For example, to keep context-hibernate-services.xml from being deleted when uninstalling Hibernate Plugin, set the option as -excludes context-hibernate-services.xml. [optional]
										</para>
									</listitem>
								</itemizedlist>
							</entry>
						</row>
						<row>
							<entry>anyframe create-model</entry>
							<entry>
								Generates one domain class for each table. It should be noted that upper and lower case letters are recognized when the table name is designated. In particular, upper and lower case letters should be used according to the relevant DB. 
								For hsqldb and oracle, table names should be in capital letters, and for mysql, table names should be in lower case letters. 
								<itemizedlist>
									<listitem>
										<para>
											table: Defines the table name relevant to generation of domain classes. 
											When there are several tables, use "," as a delimiter.
											Also, if the relevant table is in relations with other tables, always define the tables in relations together. 
											[optional, the default value is '*', and domain classes are generated for all tables.]
										</para>
									</listitem>
									<listitem>
										<para>
											package: Defines the package of the domain class to be generated. [optional, the default value is the main package of the relevant project + ".domain"]
										</para>
									</listitem>
								</itemizedlist>
							</entry>
						</row>
						<row>
							<entry>anyframe create-crud ENTITY</entry>
							<entry>
								Generates source codes that belong to the business layer and the presentation layer that implement basic CRUD functions based on one domain class. 
								Defines the domain class relevant to generating CRUD source codes in the location of ENTITY. 
								If only the class name is defined, the relevant domain class is found under the main package of the relevant project + ".domain". 
								Therefore, if there is the relevant domain class in other packages, the package name of the relevant class should be defined together. 
								<itemizedlist>
									<listitem>
										<para>
											package: Defines the package of CRUD source codes to be generated. [optional, the default value is the main package of the relevant project + {Entity class name entered (lower case letter)}]
										</para>
									</listitem>
									<listitem>
										<para>
											scope: Used to limit the section of CRUD source codes to be generated. 
											if scope is defined as "service", only the CRUD source codes of the business layer section are generated.
											[optional, the default value is "all", and all source codes of the presentation layer and the business layer are generated.]
										</para>
									</listitem>
								</itemizedlist>
							</entry>
						</row>
						<row>
							<entry>anyframe change-db</entry>
							<entry>
								Changes the property information that is affected by the change of DB when the currently used DB is wanted to be changed. 
								(It is executed based on the DB information defined in META-INF/project.mf file of the relevant project.)
								<note>
									<title>Notes</title>
									<para>
										The plugins currently provided by Anyframe provides resources for Oracle, Sybase, MySQL and DB2 in addition to the basic HsqlDB.
									</para>
								</note>
							</entry>
						</row>
						<row>
							<entry>anyframe update-catalog</entry>
							<entry>
								Replaces plugin-catalog-essential.xml and plugin-catalog-optional.xml files that exist in {user.home}/.anyframe directory 
								with the newest plugin catalog files in Anyframe Repository (http://dev.anyframejava.org/maven/repo). 
								Thus, when the list of plugins is searched, the newest information is displayed. 
								It can also be used when there are not the plugin-catalog-essential.xml and plugin-catalog-optional.xml files in {user.home}/.anyframe directory. 
							</entry>
						</row>
						<row>
							<entry>anyframe list</entry>
							<entry>
								Shows the name and the version information of the plugins that can be installed. 
							</entry>
						</row>
						<row>
							<entry>anyframe info PLUGIN_NAME</entry>
							<entry>
								Can search for the details of the designated plugin. The name of the plugin to be searched in the location of PLUGIN_NAME.
							</entry>
						</row>
						<row>
							<entry>anyframe list-update</entry>
							<entry>
								Shows the list of plugins that can update their versions among the plugins installed in the sample project currently generated. 
							</entry>
						</row>
						<row>
							<entry>anyframe installed</entry>
							<entry>
								Shows the current status of the installed plugins and the newest version information of the relevant plugin.
							</entry>
						</row>
						<row>
							<entry>anyframe build</entry>
							<entry>
								Builds the current sample application using Ant. The available options are as follows. 
								<itemizedlist>
									<listitem>
										<para>
											deploy: Can define the project deployment type. Enter "class" or "jar".
											Set the type as class when the project is is deployed under WEB-INF/classes folder in the class type, 
											and set it as jar when it is deployed under WEB-INF/lib folder as jar file type. [optional, the default value is 'class']
										</para>
									</listitem>
									<listitem>
										<para>
											war: If -war option is used, []project name.war file is generated in dist folder under the folder where the project is generated. 
										</para>
									</listitem>
									<listitem>
										<para>
											clean: If -clean option is added, build is executed after the whole dist folder under the folder where the project has been generated is deleted. 
										</para>
									</listitem>
								</itemizedlist>
							</entry>
						</row>
						<row>
							<entry>anyframe run</entry>
							<entry>
								Web applications can be executed based on Jetty by building and deploying the current sample application. 
								Implements web applications after carrying out the application build process previously explained in the same way. 
								Avaliable options are as follows. 
								<itemizedlist>
									<listitem>
										<para>
											deploy: Can define the project deployment type. Enter "class" or "jar".
											Set the type as class when it is deployed in the class type under WEB-INF/classes folder, and set it as jar when it is deployed in the jar file type under WEB-INF/lib folder. [optional, the default value is 'class']
										</para>
									</listitem>
									<listitem>
										<para>
											war: If -war option is used, [project name].war file is generated in dist folder under the folder where the project is generated. 
										</para>
									</listitem>
									<listitem>
										<para>
											clean: If -clean option is added, build is carried out after the whole dist folder under the folder where the project has been generated is deleted. 
										</para>
									</listitem>
								</itemizedlist>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
		</section>
	</section>
	
	<section id="commands_ant_generate">
		<title>Project structure generation</title>
		<para>
			To generate the basic structure of the sample project to be generated, proper Anyframe Archetype should be installed. 
			Based on that it becomes possible to constitute development environment using Anyframe.
			Onwards Anyframe 4.6.0, anyframe-basic-archetype and anyframe-service-archetype are provided, 
			and anyframe-basic-archetype is installed for the 'web' type project, and for the 'service' type project, anyframe-service-archetype is installed.
			In this chapter, explanations will be based on anyframe-basic-archetype. 
			(For Anyframe Archetype, refer to <link linkend="commands_maven_generate_archetype">Archetype</link>.) 
		</para>
		
		<para>
			Let us first install anyframe-basic-archetype.
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					Enter the following command to generate a project in the command window where the configuration parameter information has been set through env.
				</para>
				<para>
					<programlisting language="java"><![CDATA[anyframe create-project]]></programlisting>
					Through this command anyframe-basic-archetype is installed, and the project is generated.
					The location of generating the project can be changed by -appHome option. 
					Here the project is generated in [Anyframe Home]/applications folder, which is the default. 
				</para>
				<para>
					<itemizedlist>
						<listitem>
							<para>e.g. anyframe create-project -pjtname myproject -pjttype web -package com.sds.emp</para>
							<para>
								The above example is a command to generate a web project with the project name myproject that has com.sds.emp as its main package. 
								The information set through options is reflected in META-INF/project.mf file under the relevant project directory, 
								and anyframe-basic-archetype is installed.
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<note>
					<title>
						offline option 
					</title>
					<para>
						If offline option is entered as true when it is not easy to use the network in the project place,  
						the offline value is set as true in META-INF/project.mf file under the relevant project directory, 
						and when commands are executed afterwards, they all run offline.
					</para>
					<para>
						In this case, if there is not the library required by the relevant project in Local Repository ([Anyframe Home]/repo), 
						it may not run properly. 
					</para>
				</note>
			</listitem>
			<listitem>
				<para>
					The following is the basic structure of the sample project created by installing anyframe-basic-archetype. 
					The name of the installed sample project is myproject, which includes directories of various usages under it. 
					
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/ant/myproject_structure.jpg"
								align="center" />
						</imageobject>
					</mediaobject>
				</para>
				<para>
					The generated project has only the structure, and the web type project is generated in the dynamic web project structure, and the service type project is generated in the Java project structure. 
				</para>
				<para>
					Eclipse project related files (.project, .classpath) and the build file (build.xml), and the project configuration file (META-INF/project.mf) are generated in common regardless of the project type. 
					If the generated project configuration file (META-INF/project.mf) is modified, 
					the domain classes and CRUD source codes to be generated afterwards can be generated using the modified configuration value. 
				</para>
			</listitem>
			<listitem>
				<para>
					Check whether the project runs properly referring to <link linkend="commands_ant_run">application execution</link> after it is generated. 
				</para>
			</listitem>
		</orderedlist>
	</section>
	
	<section id="commands_ant_install">
		<title>Plugin installation</title>
		<para>
			Onwards Anyframe 4.6.0, the collection of template-based sample codes that integrated various open sources and reference libraries are called plugin, 
			and various types of plugins are provided. 
		</para>
		<para>
			Anyframe's plugins can be divided into <emphasis role="bold">Essential Plugins</emphasis> and <emphasis role="bold">Optional Plugins</emphasis>.
			Essential plugins include the plugins such as core, spring, datasource and logging that have the functions basically required to run other plugins, 
			and optional plugins include the plugins such as hibernate, cxf-jaxrs and fileupload that provide various functions that can be used for development of applications. 
			(For details on Plugin, refer to <link linkend="plugins_list">Plugin list</link> and <link linkend="plugins_structure">Plugin structure</link>.)
		</para>
		<para>
			Since the following explains basic usage of commands, for Anyframe Commmand Option refer to the explanation of the relevant command in <link linkend="commands_ant_commands_list">Command list</link>.
			
		</para>
		
		<para>
			Anyframe's plugins can set the plugin necessary to run a certain plugin as a dependent plugin. 
			Thus, when dependent plugins have not been installed when a certain plugin is installed, they are automatically installed first. 
		</para>
		<para> 
			Here let us install core plugin, which is an essential plugin that provides the basis for running other Anyframe plugins. 
			If the plugin is installed, libraries related to the plugin are reflected in src/main/webapp/WEB-INF/lib. 
		</para>
		
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					Open the Command window and start hsqldb provided as a sample by double-clicking  start.cmd (or start.sh) file, moving to the [sample project installation folder]/db/hsqldb folder previously installed.  
					If addition of DB data is required to execute the plugin, DB should be started since DB data is added when the selected plugin is installed.  
					If DB has not been started when the selected plugin is installed, directly execute ([sample project installation folder]/db/scripts/{Plugin name-insert-data-db name}.sql), which is the DB script file provided after the Plugin is installed.  
					Also, to install the plugin based on the DB other than hsqldb provided as a sample, refer to <link linkend="commands_ant_db">DB change</link>.
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/ant/start_hsqldb.jpg"
								align="center" />
						</imageobject>
					</mediaobject>
				</para>
				<warning>
					<title>Notes</title>
					<para>
						Execute start.cmd file in CLI in Windows environment, and in Unix environment (e.g. Mac OS, etc.) 
						execute start.sh file (./start.sh) after authorizing the execution of the files under hsqldb folder (chmod 755 *).
						
					</para>
				</warning>
			</listitem>
			<listitem>
				<para>
					Open the Command window and enter the following command, moving to the sample project installation folder (e.g. If a project named myproject has been generated, 
					execute the command in myproject folder.).
					Here, since core plugin will be installed, enter 'core' as PLUGIN_NAME and proceed with installation of core plugin.
				</para>
				<programlisting language="java"><![CDATA[anyframe install core]]></programlisting>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/ant/install_core_plugin.jpg"
								align="center" />
						</imageobject>
					</mediaobject>
				</para>
				<para>
					 As above, when Plugin install command is entered, <emphasis role="bold">the list of plugins to be installed finally is displayed after the dependency of the plugin to be installed and whether it has been installed in the current project 
					 are identified, and authorization of the user is awaited.</emphasis>
					Since datasource, logging, spring plugins are required to run core plugin, the above message will be shown. 
					To continue with installation, enter 'y'.
					<note id="commands_ant_install_essential">
						<title>Essential Plugins</title>
						<para>
							Core, datasource, logging, and spring plugins are essential plugins,  
							and datasource, logging, spring plugins cannot be installed independently,  
							and if core is installed, all four plugins are installed. 
						</para>
					</note>
				</para>
			</listitem>
			<listitem>
				<para>
					After finishing the installation of Plugins, check whether they run properly referring to <link linkend="commands_ant_run">application execution</link>.
				</para>
			</listitem>
			<listitem>
				<para>
					Open the Command window and enter the following command, moving to the sample project installation folder, 
					and the list of plugins added in the sample project can be checked.  
				</para>
				<programlisting language="java"><![CDATA[anyframe installed]]></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="../image/commands/ant/show_plugin_installed.jpg"
							align="center" />
					</imageobject>
				</mediaobject>
				<para>
					If the Plugin has been properly installed, the plugin sample source codes will have been generated in the designated package,  
					and libraries related to the plugin will have been installed in src/main/webapp/WEB-INF/lib.
				</para>
			</listitem>
		</orderedlist>
		<para>
			Other plugins can be additionally installed in the same way as core plugin.
		</para>
		<para>
			The plugin already installed can be <emphasis role="bold">replaced with another version by adding version option in install command</emphasis> as follows.
			In this case, other plugins referenced by the plugin (Dependent Plugins) can also be replaced with a compatible version.  
			It should be noted that the version of the related reference libraries can also change due to the change of the Plugin version.
			<programlisting language="java"><![CDATA[anyframe install core -version ...]]></programlisting>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../image/commands/ant/install_plugin_version.jpg"
						align="center" />
				</imageobject>
			</mediaobject>
		</para>
	</section>
	
	<section id="commands_ant_uninstall">
		<title>Plugin uninstallation</title>
		<para>
			The plugins installed in the sample project can be deleted.  
			Yet, they cannot be deleted when they are being used by other plugins.  
			In this case, the plugins should be deleted after deleting dependent plugins first. 
		</para>
		<para>
			When it is requested to delete a certain plugin, all folders and files that contain the name of the plugin will be deleted from the project.  
			Therefore, it is recommended to check before deleting a certain plugin whether the resources added during development are included in the deletion. 
		</para>
		<orderedlist>
			<listitem>
				<para>
					Open the Command window and enter the following plugin uninstallation command, moving to the sample project installation folder as follows.  
				</para>
				<programlisting language="java"><![CDATA[anyframe uninstall PLUGIN_NAME]]></programlisting>
				<itemizedlist>
					<listitem>
						<para>e.g. anyframe uninstall hibernate</para>
						<para>
							The above example is a command that deletes the samples and libraries of hibernate plugin. 
							There will be no problem in its deletion if the plugin is not being used by other plugins. 
						</para>
					</listitem>
				</itemizedlist>
				<para>
					Through excludes option, the files to be excluded from deletion when the plugin is deleted can be designated.
				</para>
				<para>
					There will be no problem in deleting it if the plugin is not being used by other plugins. 
				</para>
			</listitem>
			<listitem>
				<para>
					Open the Command window, and enter the following command, moving to the sample project installation folder, 
					and it can be checked whether the plugin has been properly deleted.  
				</para>
				<programlisting language="java"><![CDATA[anyframe installed]]></programlisting>
			</listitem>
		</orderedlist>
		<para>
			The files and directories related to the deleted plugin can be recovered since they are backed up in the directory under '[sample project root folder]/uninstalled' 
			at each point when the plugin is deleted.
		</para>
	</section>
	
	<section id="commands_ant_list">
		<title>Plugin list search</title>
		<para>
			To search for the list of plugins that can be installed, use the following command. 
			<programlisting language="java"><![CDATA[anyframe list]]></programlisting>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../image/commands/ant/show_plugin_list.jpg"
						align="center" />
				</imageobject>
			</mediaobject>
		</para>
		<para>
			The list of plugins that can be installed is searched based on the Plugin Catalog file, 
			and Anyframe first checks whether the file exists in '{user.home}/.anyframe' directory, 
			and if there is the file, Anyframe uses the plugin information defined in the file. 
			If the file does not exist in '{user.home}/.anyframe' directory, 
			plugin-catalog-essential.xml and plugin-catalog-optional.xml files in http://dev.anyframejava.org/maven/repo/, which is Anyframe Repository,  
			are downloaded in '{user.home}/.anyframe' directory, and these files are used. 
			To synchronize the plugin catalog fine in Local once downloade with the newest plugin catalog file in Anyframe Repository,  
			refer to <link linkend="commands_ant_update_catalog">Plugin Catalog Update</link>.
		</para>
	</section>
	
	<section id="commands_ant_installed">
		<title>Installed plugin list search</title>
		<para>
			The names and versions of the plugins installed in the sample project and the newest version information of each plugin can be checked by executing the following command.
		</para>
		<programlisting language="java"><![CDATA[anyframe installed]]></programlisting>
		<mediaobject>
			<imageobject>
				<imagedata fileref="../image/commands/ant/show_plugin_installed.jpg"
					align="center" />
			</imageobject>
		</mediaobject>
		<para>
			The information of the installed plugin is recorded in META-INF/plugin-installed.xml file under the sample project. 
		</para>
	</section>
	
	<section id="commands_ant_info">
		<title>Plugin information search</title>
		<para>
			Use the following command to search for the detailed information of a certain plugin. 
			<programlisting language="java"><![CDATA[anyframe info PLUGIN_NAME]]></programlisting>
		</para>
		<para>
			For example, the following is displayed when the detailed information of core plugin is searched. 
			<programlisting language="java"><![CDATA[[info]  Name		: core
[info]  GroupId	: org.anyframe.plugin
[info]  ArtifactId	: anyframe-core-pi
[info]  Latest Version	: x.x.x
[info]  Samples	: Included
[info]  Releases	: 1.0.0,1.0.0.RC1,1.0.0,1.0.1, 1.0.1, ...
[info]  Dependencies	: datasource(1.0.0<=*),logging(1.0.0<=*),spring(1.0.0<=*)
[info]  Description	: Core Plugin is the basic plugin which is the basis of all
[info]		plugins provided by Anyframe, and consists of sample code
[info]		to guide how to use Spring MVC, Spring, etc. and reference
[info]		libraries to use these open sources.]]></programlisting>
		</para>
	</section>
	
	<section id="commands_ant_update_catalog">
		<title>Plugin Catalog Update</title>
		<para>
			As mentioned above, Anyframe defines the list of plugins that can be installed in plugin-catalog-essential.xml and plugin-catalog-optional.xml files.  
			Anyframe searches the list of plugins that can be installed based on these files.
			It first checks whether the file exists in '{user.home}/.anyframe' directory,  
			and if there is the file, it uses the plugin information defined in the file. 
			If there is not the file in '{user.home}/.anyframe' directory, 
			plugin-catalog-essential.xml and plugin-catalog-optional.xml files in http://dev.anyframejava.org/maven/repo/, which is Anyframe Repository,  
			are downloaded in '{user.home}/.anyframe' directory and these files are used. 
			Since only the Plugin Catalog file in Local is used after they are downloaded under '{user.home}/.anyframe' of the user,  
			they may not match the newest plugin catalog file in Anyframe Repository as time passes.  
			Therefore, to synchronize it with the newest Plugin Catalog file, the following process is required. 				
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					The newest plugin catalog file can be downloaded in Local by opening the Command windown and entering the following command, moving to the the location of the sample project. 
				</para>
				<programlisting language="java"><![CDATA[anyframe update-catalog]]></programlisting>				
			</listitem>
			<listitem>
				<para>
					Check whether the newest plugin catalog has been properly reflected by entering the following command. 
				</para>	
				<programlisting language="java"><![CDATA[anyframe list]]></programlisting>
			</listitem>
		</orderedlist>
	</section>
	
	<section id="commands_ant_list_update">
		<title>Updatable plugin list search</title>
		<para>
			Use the following command to check whether there are plugins that can update their versions among the plugins installed in the sample project.
			<programlisting language="java"><![CDATA[anyframe list-update]]></programlisting>
		</para>
		<para>
			Yet, the exact information can be checked only after the plugin catalog file in Local is updated with the newest version.  
			For how to update Local Plugin Catalog, refer to <link linkend="commands_ant_update_catalog">Plugin Catalog Update</link> of this document. 
		</para>
		<para>
			If the version of the plugin installed in the currently constituted sample project is not the newest version, 
			the newest version can be applied to the plugin of an older version.  
			To do this, refer to <link linkend="commands_ant_install">Plugin installation</link>. 
		</para>
	</section>
	
	<section id="commands_ant_db">
		<title>DB change</title>
		<para>
			As mentioned previously, the sample project generated by installing the Plugin is basically constituted to run based on hsqldb. 
			To change the execution DB of the sample project, the following tasks should be done.  
			(Anyframe plugins that currently provide samples are supported to run only for hsqldb, oracle, sysbase, db2, and mysql DB.)		
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					Open META-INF/project.mf file under the installed sample project installation folder and modify the previously defined DB information. 
				</para>
				<programlisting language="java">db.type=hsqldb
db.name=sampledb
db.schema=PUBLIC
db.server=localhost
db.port=-1
db.driver=org.hsqldb.jdbcDriver
db.url=jdbc:hsqldb:hsql://localhost/sampledb
db.userId=SA
db.password=
db.lib=db/hsqldb/hsqldb-2.0.0.jar
db.dialect=org.hibernate.dialect.HSQLDialect

db.groupId=hsqldb
db.artifactId=hsqldb
db.version=2.0.0</programlisting>	
				<para>
					Each property presented above has the following meaning. 
					<informaltable>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="1*"/>
							<colspec colnum="2" colname="col2" colwidth="5*"/>
							<thead>
								<row>
									<entry align="center">Property</entry>
									<entry align="center">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>db.type</entry>
									<entry>
										Defines the main name of the DB.
										Used to execute the script ({plugin name}-insert-data-{db.type}.sql, {plugin name}-delete-data-{db.type}.sql) file that contains the db.type value 
										if there is a DB script to be executed when a certain plugin is installed. 
										(For example, if Security Plugin is installed when db.type is oracle, security-insert-data-oracle.sql file is executed.)  								
									</entry>
								</row>
								<row>
									<entry>db.name</entry>
									<entry>
										Defines the name of the DB.
									</entry>
								</row>	
								<row>
									<entry>db.schema</entry>
									<entry>
										Defines the Schema of the DB.
									</entry>
								</row>		
								<row>
									<entry>db.server</entry>
									<entry>
										Defines the IP of the server that has the DB.
									</entry>
								</row>	
								<row>
									<entry>db.port</entry>
									<entry>
										Defines the port of the server for the DB. 
									</entry>
								</row>																				
								<row>
									<entry>db.driver</entry>
									<entry>Defines the name of Driver Class for the DB.</entry>
								</row>	
								<row>
									<entry>db.url</entry>
									<entry>Defines URL of the DB.</entry>
								</row>
								<row>
									<entry>db.userId</entry>
									<entry>Defines User ID to access the DB.</entry>
								</row>
								<row>
									<entry>db.password</entry>
									<entry>Defines Password to access the DB.</entry>
								</row>
								<row>
									<entry>db.lib</entry>
									<entry>
										Defines the location of DB Library that should be referenced to connect with the DB. 
										(It can be defined as an absolute path or an relative path based on the location of the sample project. 
										When the relative path is defined, it should be defined in the types such as './src/main/..' or 'src/main/..'. 
										If it is defined in the type such as '/src/main/..', it may be recognized as an absolute path and the relevant file may not be found.)
										It is recommended to be stored in [sample project installation folder]/src/main/webapp/WEB-INF/lib folder so that DB Library can be recognized when the sample application is executed.  
										
									</entry>
								</row>	
								<row>
									<entry>db.dialect</entry>
									<entry>Defines Hibernate Dialect class of the DB.</entry>
								</row>
								<row>
									<entry>db.schema.use</entry>
									<entry>Defines whether to use DB Schema information when the User information is set as the property to be designated when the DB is Sybase DB.
										Yet, it should be noted that the property value can change depending on the version of Sybase. (default=false)
									</entry>								
								</row>																																																												
							</tbody>
						</tgroup>
					</informaltable>
				</para>				
			</listitem>
			<listitem>
				<para>
					All the DB related resources of the plugins installed thus far can be modified according to the previously modified DB information by opening the Command window and entering the following command, moving to the location of the sample project. 
					
				</para>
				<programlisting language="java"><![CDATA[anyframe change-db]]></programlisting>
			</listitem>
			<listitem>
				<para>
					Check whether the DB related configuration information has been properly changed. 
				</para>
				<para>
					Check whether DataSource Service configuration information, and Hibernate and Query Service related information in the project codes have been changed. 
				</para>
			</listitem>
		</orderedlist>
	</section>
		
	<section id="commands_ant_source_domain">
		<title>Domain source code generation</title>
		<para>
			Onwards Anyframe 4.6.0, in addition to installing the provided plugins that have been already made,  
			Domain classes can be generated based on the DB table constituted for applications to be developed. 
			(Since the following explanation only mentions the basic usage of commmands, for details on Anyframe Commmand Option, refer to the explanation of the relevant command presented in <link linkend="commands_ant_commands_list">Command list</link>.)
		</para>
		<para>
			Let us generate Domain classes for all the tables included in SampleDB provided by Anyframe.
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					Domain classes can be generated that can be mapped with a specific table by opening the Command window and entering the following command, moving to the location of the sample project.
					
				</para>
				<programlisting language="java"><![CDATA[anyframe create-model]]></programlisting>
				<itemizedlist>
					<listitem>
						<para>e.g. anyframe create-model -table "*" -package com.sds.emp.domain</para>
						<para>
							The above example is a command that generates domain classes for all tables in the domain package under main packages designated when the project was generated (e.g. com.sds.emp).
							
						</para>
					</listitem>
				</itemizedlist>
				<para>
					To generate domain classes for specific tables, not the whole tables included in the DB, directly enter -table {table name} as follows.  
					
				</para>
				<programlisting language="java"><![CDATA[anyframe create-model -table BOARD_MASTER,BOARD]]></programlisting>
				<para>
					Also, when there is a domain class already generated in the table, it will be asked to overwrite as follows. 
					Not to overwrite, generation of the domain class can be stopped by entering "N".
					
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/ant/create_model_overwrite.jpg"
								align="center" />
						</imageobject>
					</mediaobject>
				</para>
			</listitem>
			<listitem>
				<para>Check whether Domain classes have been properly generated.</para>
				<para>
					If there is a domain class with the table name in camelcase in the package assigned when the domain class was generated, it has been properly generated.  
					The following is part of Board.java code that is mapped with BOARD table. 
				</para>
				<programlisting language="java">@Entity
@Table(name = "BOARD")
<emphasis role="bold">//The schema property of @Table is defined  
//when sybase DB and hibernate dao framework are used using the default template.
//The catalog property of @Table is defined when the catalog information exists.</emphasis>
public class Board implements Serializable {
    private BoardId id = new BoardId();
    private BoardMaster boardMaster;
    private String boardName;
    ...
    public BoardId getId() {
        return this.id;
    }
    public void setId(BoardId id) {
        this.id = id;
    }
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BOARD_MASTER_ID", nullable = false, 
                insertable = false, updatable = false)
    public BoardMaster getBoardMaster() {
        return this.boardMaster;
    }
    public void setBoardMaster(BoardMaster boardMaster) {
        this.boardMaster = boardMaster;
    }
    @Column(name = "BOARD_NAME", nullable = false, length = 150)
    public String getBoardName() {
        return this.boardName;
    }
    public void setBoardName(String boardName) {
        this.boardName = boardName;
    }	  
}</programlisting>
			</listitem>
			<listitem>
				<para>For domain class source codes automatically generated, template files can be modified and used according to each user or the project situation. </para>
				<para>
					For details on expansion of templates, refer to <link linkend="commands_maven_source_crud_template_customizing">Template Customizing</link>. 
					In the case of Ant, template files exist in '[Anyframe installation folder]/templates' directory,  
					Among them, the template files for domain classes are in [template name]/source/model folder under templates, so they can be used for modification (Pojo.ftl, etc.).
				</para>
			</listitem>		
		</orderedlist>
	</section>
	
	<section id="commands_ant_source_crud">
		<title>CRUD source code generation</title>
		<para>
			The source codes that perform the basic CRUD functions can be generated through domain classes generated based on DB table. 
			(Since the following explanation only mentions basic usage of commands, for details on Anyframe Commmand Option, refer to the explanation of each command in the <link linkend="commands_ant_commands_list">Command list</link>.)
		</para>
		<para>
			Let us generate CRUD source codes selecting one of the domain classes previously generated. 
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					The source codes that perform basic CRUD functions based on a specific domain can be generated by opening the Command window and entering the following command, moving to the location of the sample project. 
				</para>
				<programlisting language="java"><![CDATA[anyframe create-crud ENTITY]]></programlisting>
				<para>
					For example, if 'anyframe create-crud Board' is executed, source codes that can CRUD Board object are generated.  
				</para>	
				<para>
					If there are CRUD source codes already generated for the domain class, it will be asked to overwrite as follows. 
					Generation of CRUD source codes can be stopped by entering "N" not to overwrite.
					
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="../image/commands/ant/create_crud_overwrite.jpg"
							align="center" />
					</imageobject>
				</mediaobject>
				<para>
					Also, to generate only the business layer codes, the command can be executed by adding -scope option as follows. 
				</para>
				<programlisting language="java"><![CDATA[anyframe create-crud Board -scope service]]></programlisting>
				<para>
					For details on scope option, refer to <link linkend="commands_ant_commands_list">Command list</link>.
				</para>
			</listitem>
			<listitem>
				<para>
					Check whether the business layer codes (service interface, service implementation class, DAO implementation class and mapping query statements) have been properly generated.  
				</para>
				<para>The following is part of java codes and property files generated based on the domain class Board.java.</para>	
				<itemizedlist>
					<listitem>
						<para>Service interface (src/main/java/{main package}/{package}/service/{Entity class name}Service.java)</para>
						<programlisting language="java">public interface BoardService{
    void create(Board board) throws Exception;
    void remove(BoardId id) throws Exception;
    ...
}</programlisting>
					</listitem>
					<listitem>
						<para>Service implementation class (src/main/java/{main package}/{package}/service/impl/{Entity class name}ServiceImpl.java)</para>
						<programlisting language="java">@Service("boardService")
@Transactional(rollbackFor = {Exception.class}, propagation = Propagation.REQUIRED)
public class BoardServiceImpl implements BoardService {
	    
    @Inject
    @Named("boardDao")
    private BoardDao boardDao;
	    
    public void create(Board board) throws Exception {
        this.boardDao.create(board);
    }
        
    public void remove(BoardId id) throws Exception {
        this.boardDao.remove(id);
    }
    ...        
}</programlisting>
					</listitem>
					<listitem>
						<para>DAO class (src/main/java/{main package}/{package}/service/impl/{Entity class name}Dao.java)</para>
					<programlisting language="java">@Repository("boardDao")
public class BoardDaoQueryImpl extends SimpleJdbcDaoSupport {

    @Value("#{contextProperties['pageSize'] ?: 10}")
    int pageSize;
    
    @Value("#{contextProperties['pageUnit'] ?: 10}")
    int pageUnit;
    
    @Inject
    public void setJdbcDaoDataSource(DataSource dataSource) throws Exception {
        super.setDataSource(dataSource);
    }
    
    public void create(Board board) throws Exception {
        String sql = "INSERT INTO BOARD (BOARD_ID, BOARD_DESC, BOARD_MASTER_ID, BOARD_NAME, BOARD_ORDER, BOARD_TOPICS, REG_DATE) "
                              + "VALUES (?, ?, ?, ?, ?, ?, ?)";
        this.getSimpleJdbcTemplate().update(
                                    sql,
                                    new Object[] {board.getId().getBoardId(), board.getBoardDesc(), board.getId().getBoardMasterId(), 
                                    board.getBoardName(), board.getBoardOrder(), board.getBoardTopics(), board.getRegDate()});
    }
        
    public void remove(BoardId id) throws Exception {
        String sql = "DELETE FROM BOARD WHERE BOARD_ID = ? AND BOARD_MASTER_ID = ?";
        this.getSimpleJdbcTemplate().update(sql, new Object[] {id.getBoardId(), id.getBoardMasterId()});
    }
    ...
}</programlisting>
					</listitem>
					<listitem>
						<para>MessageSoruce (src/main/resources/message/message-generation.properties)</para>
						<programlisting># -- Board-START
board.id.boardId=Board Id
board.id.boardMasterId=Board Master Id
board.boardDesc=Board Desc
board.boardName=Board Name
board.boardOrder=Board Order
board.boardTopics=Board Topics
board.regDate=Reg Date

# -- success messages -- 
success.board.create=Board has been added successfully.
success.board.update=Board has been updated successfully.
success.board.delete=Board has been deleted successfully.

# -- error messages --
error.boardserviceimpl.create=Board data not created
error.boardserviceimpl.create.solution=Enter correct data for mandatory field 
or enter data according to formats means date format as yyyy-mm-dd
error.boardserviceimpl.create.reason=Entered incorrect data for Board
...</programlisting>
					</listitem>
					<listitem>
						<para>Integrated test case (src/test/java/{main package}/{package}/service/{Entity class name}ServiceTest.java)</para>
						<programlisting language="java">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "file:./src/main/resources/spring/context-*.xml" })
public class BoardServiceTest{

    @Inject
    @Named("boardService")
    private BoardService boardService;

    @Test
    @Rollback(value=true)    
    public void manageBoard() throws Exception {
        //1. create a new board
        Board board = getBoard();
        
        if(boardService.get(board.getId()) != null)
            boardService.remove(board.getId());
        
        boardService.create(board);
        ...
    }
    ...
}</programlisting>
					</listitem>
				</itemizedlist>
				<note>
					<title>Notes 1</title>
					<para>
						If the project.daoframework value in META-INF/project.mf has not been changed, 
						springjdbc is set as the basic DAO Framework. 
						(The DAO implementation class shown above is set as springjdbc.) DAO Frameworks that can be set are springjdbc, query, hibernate and ibatis2.
					</para>
					<para>
						If Hibernate is adopted as DAO Framework, setting the project.daoframework value as "hibernate" in META-INF/project.mf, 
						the generated CRUD source codes will use Hibernate. 
						Yet, the generated codes can run properly only when Anyframe Hibernate Plugin has been installed. 
					</para>
					<para>
						Likewise, if the template type of the source codes to be generated by Anyframe IDE is to be set as the value other than the default value,   
						the generated project can run properly only when related Anyframe Plugins have been installed. 
					</para>
					<para>
						For example, if source codes are to be generated selecting 'miplatform' as the Template type, 
						not only the value of project.template in the project configuration file (project.mf) should be changed to miplatform, but also 
						Anyframe's miplatform Plugin should be installed. 
					</para>
				</note>
			</listitem>
			<listitem>
				<para>Check whether the presentation layer codes (controller class, JSP, etc. to communicate with Business Service) have been properly generated.</para>
				<para>The following is part of the controller, JSP generated based on the domain class Board.java.</para>	
				<itemizedlist>
					<listitem>
						<para>Controller (src/main/java/{main package}/{package}/web/{Entity class name}Controller.java)</para>
						<programlisting language="java">@Controller
@RequestMapping("/board.do")
public class BoardController {

    @Inject
    @Named("boardService")
    private BoardService boardService;

    ...    

    @RequestMapping(params = "method=createView")  
    public String createView(Model model) throws Exception {
        model.addAttribute(new Board());

        return "generation/board/form";        
    }
}</programlisting>
					</listitem>
					<listitem>
						<para>JSP (src/main/webapp/WEB-INF/jsp/generation/{Entity class name}/*.jsp)</para>
						<programlisting><![CDATA[<%@ page language="java" errorPage="/sample/common/error.jsp" pageEncoding="UTF-8" contentType="text/html;charset=utf-8" %>
<%@ include file="/sample/common/top.jsp"%>
		<div class="location"><a href="<c:url value='/anyframe.jsp'/>">Home</a> &gt; <a href="<c:url value='/boardF.do?method=list'/>">Board</a></div>
    </div>
    <hr />
<script type="text/javascript" src="<c:url value='/sample/javascript/CommonScript.js'/>"></script>    
<script type="text/javascript">
	function fncCreateBoardView() {
		document.location.href="<c:url value='/board.do?method=createView'/>";
	}	
...]]></programlisting>
					</listitem>
					<listitem>
						<para>Unit test case (src/test/java/{main package}/{package}/web/{Entity class name}ControllerTest.java)</para>
						<programlisting language="java">@RunWith(JMock.class)
public class BoardControllerTest {

    private BoardController controller;
    private String SUCCESS_CREATEVIEW = "generation/board/form";
    private String SUCCESS_CREATE = "redirect:/board.do?method=list";
    private String SUCCESS_GET = "generation/board/form";
    private String SUCCESS_UPDATE = "redirect:/board.do?method=list";
    private String SUCCESS_LIST = "generation/board/list";
    private String SUCCESS_REMOVE = "redirect:/board.do?method=list";
    private Mockery context = new JUnit4Mockery();
    private BoardService mockService = null;
	
    @Before   
    public void setUp() throws Exception {
        System.setProperty("log4j.configuration", "log4j-test.xml");

        this.mockService = context.mock(BoardService.class);
        this.controller = new BoardController();
        this.controller.setBoardService(this.mockService);
    }
    
    public void setBoardController(BoardController controller) {
        this.controller = controller;
    }
        
    @Test
    public void testCreateView() throws Exception{
        String viewName = this.controller.createView(new ExtendedModelMap());
        
        assertEquals("returned correct view name", SUCCESS_CREATEVIEW, viewName);
   }
...</programlisting>
					</listitem>
				</itemizedlist>
			</listitem>
			<note>
				<title>When CRUD source codes are not generated automatically</title>
				<para>
					If CRUD source codes are not properly generated, there can be a problem in the source code template file in {user.home}/.anyframe/templates.  
					Thus, it is recommended to execute the anyframe:create-crud command after deleting this directory. 
				</para>
			</note>
			<listitem>
				<para>
					After generating CRUD source codes, check whether they run properly referring to <link linkend="commands_ant_run">application execution</link>. 
				</para>
			</listitem>
		</orderedlist>
		<note>
			<title>Notes 2</title>
			<para>
				CRUD source codes are generated based on domain classes, 
				and to do this, generate the codes using the compiled domain classes after compiling the source codes of 
				the whole project including domain classes. 
				Therefore, if it takes a lot of time to compile them when CURD source codes are generated with a lot of source codes in the project, 
				, delete the part that calls the following clean target defined in "create-crud" target in code-generation.xml file in [Anyframe Home]/ide/cli/scripts folder. 
				Since clean target will delete all the source codes previously compiled, 
				and then compile target will newly compile the whole source codes, 
				it can take a lot of time when the amount of source codes is big. 
				If clean target is deleted to increase the speed, 
				it will take less time since only the source codes changed by compile target that executes incremental are compiled. 
				
			</para>
			<programlisting language="java"><![CDATA[<ant antfile="build.xml" dir="${project.home}" target="clean"/>]]></programlisting>
		</note>
		<warning>
			<title>Notes</title>
			<para>
			For <emphasis role="bold">service type projects</emphasis> generated by anyframe-service-archetype 
			related configuration files (context-*.xml) are not installed when hibernate or miplatform plugin are installed.  
			Thus, when source codes are generated using hibernate as dao framework or miplatform as the template type, 
			the automatically generated test case can show errors when executed since there are not related property files. 
			If "Fail to ApplicationContext..." error occurs, add hibernate or miplatform spring configuration files. 
			</para>
		</warning>
		<section id="commands_ant_source_crud_note">
			<title>Tip for solving errors that occur during run time after generation of CRUD source codes</title>
			<para>
				The solutions to the errors that can occur during run time when CRUD source codes have been properly generated are the same as the solutions to the errors that occur during Maven-based development.
				Refer to [<link linkend="commands_maven_source_crud_note">Tips for solving errors that occur during run time after CRUD source code generation</link>].
			</para>
		</section>
		<section id="commands_ant_source_crud_template_customizing">
			<title>Template Customizing</title>
			<para>
			    For Ant, template files exist in '[Anyframe installation folder]/templates' directory,  
				and the template files related to CRUD source code generation are in [template name]/source folder under templates, which can be used for modification. 
				The domain classes or CRUD source codes created by Anyframe IDE	are generated automatically based on FreeMarker Template,  
				and this template can be modified and used according to the user or the project situation.  
				Since the way to expand Templates are the same as the one for Maven-based development, 
				refer to [<link linkend="commands_maven_source_crud_template_customizing">Template Customizing</link>].
			</para>
		</section>
	</section>
	
	<section id="commands_ant_build">
		<title>Application and project build</title>
		
		<section id="commands_ant_build_application">
			<title>Application build</title>
			<para>
				Builds applications using the commands provided by Anyframe in CLI environment. 
			</para>
			<orderedlist inheritnum="inherit">
				<listitem>
					<para>
						After opening the Command window, enter the following command, moving to the location of sample project installation folder. 
					</para>
					<programlisting><![CDATA[anyframe build]]></programlisting>
				</listitem>
				<listitem>
					<para>
						A deployment folder in the project name is generated in dist folder under the folder where the project has been generated, 
						and the deployment type and whether to create war files are determined according to options. 
						<itemizedlist>
							<listitem>
								<para>e.g. anyframe build -deploy jar -war</para>
								<para>The above example is a command that generates the deployment file by packaging the project in the jar file type 
								and creates war file. </para>
							</listitem>
							<listitem>
								<para>e.g. anyframe build -deploy class</para>
								<para>
									The above example is used when the result of compiling the project source codes is deployed in the class file type under WEB-INF/classes folder after the whole application is built.
									The result of the build is checked in WEB-INF/classes, and compiled java codes, configuration file, and mapping query statements are generated under WEB-INF/classes.
								</para>
							</listitem>
							<listitem>
								<para>e.g. anyframe build -deploy jar</para>
								<para>
									The above example is used when the result of compiling project source codes is deployed in the jar file type under WEB-INF/lib folder after the whole application is built.
									The result of the build is checked in WEB-INF/lib, and a jar file is generated with one project name (e.g. myproject).
								</para>
							</listitem>
							<listitem>
								<para>e.g. anyframe build -war</para>
								<para>
									The above example is used when war file is generated after the whole application is built. 
									The result of the build is checked under the 'folder where the project is generated/dist/' folder. 
									In the 'folder where the project is generated/dist' folder war file in the project name is generated (e.g. myproject.war).
								</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
			</orderedlist>
			<note>
				<title>Notes</title>
				<para>
					Currently, Anyframe IDE manages build scripts related to application build in [Anyframe Home]/ide/cli/scripts/application-build.xml file.
					When the name of the target is "build" in this file, it builds applications. 
				</para>
				<programlisting language="xml"><![CDATA[<target name = "build" depends = "clean, dist, war"/>
	...]]></programlisting>
				<para>
					If you want to change some of the application build process, application-build.xml file should be changed. 
				</para>
			</note>
		</section>
		
		<section id="commands_ant_build_project">
			<title>Project build</title>
			<para>
				Build can be executed using the build command provided by Anyframe in CLI environment, 
				but the build for the project can also be executed by directly executing the ant command using build.xml.
			</para>
			<orderedlist inheritnum="inherit">
				<listitem>
					<para>
						Check whether there is build.xml file for execution of ant in the installed project, 
						and enter the following command after opening the Command window and moving to the location of the sample project installation folder. 
					</para>
					<programlisting><![CDATA[ant]]></programlisting>
					<itemizedlist>
						<listitem>
							<para>e.g. ant all</para>
							<para>
								The above example can execute the project build process, 
								selecting one of the targets below as an ant command that executes the target 'all' for the project.  
								When only ant is executed without entering the target, "default' is executed, which is the default target.
							</para>
						</listitem>
					</itemizedlist>
					<informaltable>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="2*"/>
							<colspec colnum="2" colname="col2" colwidth="6*"/>
							<thead>
								<row>
									<entry>target</entry>
									<entry>description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>default</entry>
									<entry>Executes the basic build process for the project such as initialization, compiling and packaging. </entry>
								</row>
								<row>
									<entry>deploy</entry>
									<entry>Deploys the folder, which has extracted war file, under dist folder for web type projects after default target is executed.</entry>
								</row>									
								<row>
									<entry>all</entry>
									<entry>
										In addition to the build process executed by "default" target explained above, 
										reporting code quality check such as test case execution, source code coverage and CheckStyle/JDepend/FindBugs/Code Duplication is additionally carried out. 
										
									</entry>
								</row>
								<row>
									<entry>Others</entry>
									<entry>
										Since one ant target is constituted for each task of the build process such as "clean", "init", "resources", "compile", "test-resources", 
										"test-compile", "package", "emma-jars", "test", "report" and "deploy", 
										they can be used when the build for each task other than "default" and "all" targets explained above is required. 
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
				</listitem>
			</orderedlist>
			<note>
				<title>Notes</title>
				<para>
					Currently, Anyframe IDE manages the project build scripts in [Anyframe Home]/ide/cli/scripts/project-build.xml file. 
					(project-build.properties is provided together.)
					As "shared:" is added in front of the target names as a prefix in this build file, 
					the build file (build.xml) in the project actually generated executes the actual project build by calling the target name of this common project build file 
					(project-build.xml), and the build process specialized for each project can also be added.
				</para>
				<para>
					If you want to change the build process in all the remaining projects by changing the common project build file, 
					chnage project-build.xml file. 
				</para>
			</note>
		</section>
		
	</section>
	
	<section id="commands_ant_run">
		<title>Application execution</title>
		<para>
			To check whether the sample application that was constituted after a certain plugin was installed or as a result of automatic code generation runs properly,  
			the command can be directly entered in the Command window or Eclipse can be used. 
		</para>	
		<para>
			The following will cover how to start the sample application by directly entering commands or using Eclipse.
			(In this document, it will be explained based on Jetty and Tomcat.)
		</para>		
		<para>
			To check whether the sample application works properly, first the DB to be used should be started. 
			The sample project constituted by installing Anyframe Plugin is basically constituted to use hsqldb. 
			Thus, start DB by double-clicking [sample project installation folder]/db/hsqldb/start.cmd (or start.sh) file.  
			(To use DB other than hsqldb, refer to <link linkend="commands_ant_db">DB change</link>.)
			The sqltool.cmd (or sqltool.sh) file provided in [sample project installation folder]/db/hsqldb folder 
			is provided to start SQL Editor for hsqldb. It will be useful when you want to check the result of working with DB.
		</para>
		
		<section id="commands_ant_run_jetty">
			<title>Jetty-based application execution</title>
			<para>
				Build applications and execute web applications using commands provided by Anyframe in CLI environment. 
				This command is available only when the project is in the web type. 
			</para>
			<orderedlist inheritnum="inherit">
				<listitem>
					<para>
						The sample application can be started based on Jetty by opening the Command window and entering the following command, moving to the sample project installation folder. 
					</para>
					<programlisting><![CDATA[anyframe run]]></programlisting>
					<para>	
						Runs web applications after executing the same application build process explained above. 
					</para>
				</listitem>
				<listitem>
					<para>
						If Jetty is properly started, Started Jetty Server, an INFO level log, will be shown in the console window. 
						(If a compile error occurs due to JMock class in TestCase, stop Jetty server using Ctrl+C key, 
						and run Jetty again after installing test plugin by executing 'mvn anyframe:install -Dname=test' in the command window.)
					</para>
				</listitem>
				<listitem>
					<para>
						If WAS has been started properly, check whether the sample application runs properly 
						by opening the web browser and entering http://localhost:8080/myproject (http://localhost:8080/${sample project name}) in the address bar.  
						It should be noted that the port information is <emphasis role="bold">8080</emphasis> in the requested URL.
						The following is the first page of the sample application when only core plugin has been installed. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_initial.jpg"
									align="center" />
							</imageobject>					
						</mediaobject>
					</para>
					<para>
						Every time Plugin is additionally installed, a link will be added in the Installed Plugins cell on the left of the table so that the sample of the added plugin can be checked.  
						If CRUD source codes are automatically generated, a link is added in the Generated CRUD Codes cell on the right of the table 
						so that the created function can be checked. 
					</para>
					<para>
						The following is the page that appears when core link is clicked. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_core_initial.jpg"
									align="center" />
							</imageobject>
						</mediaobject>
					</para>
				</listitem>
				<listitem>
					<para>
						Check Jetty folder.
					</para>
					<para>
						Jetty is run with jetty-temp folder generated under the project dist folder. 
						Reflect class or JAR files and JSP file after deployment, and to recheck with Jetty, deploy it in the relevant location of the folder.  
					</para>
				</listitem>
			</orderedlist>
		</section>
				
		<section id="commands_ant_run_tomcat_wtponly">
			<title>Executing Tomcat-based applications using Eclipse WTP</title>
			<para>
				The sample application can be executed in the general Dynamic Web Project type using Eclipse WTP.
			</para>
			<orderedlist numeration="arabic" inheritnum="inherit">
				
				<listitem>
					<para>
						Check whether there are compile erros in the relevant project after importing the installed sample project to Eclipse.
						(When there are compile errors in TestCase due to JMock class, 
						install test plugin by executing 'anyframe install test' in the command window, and refresh the project in Eclispe.)
						Check whether the sample application runs properly by deploying the application in Tomcat Server 
						by selecting Run As > Run on Server in the context menu for the project by clicking on the right button of the mouse. 
						
					</para>				
				</listitem>
				<listitem>
					<para>
						The following is the first page of the sample application when only core plugin has been installed. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_initial.jpg"
									align="center" />
							</imageobject>					
						</mediaobject>
					</para>
					<para>
						Every time a Plugin is additionally installed, a link will be added in the Installed Plugins cell on the left of the table 
						so that the sample of the added plugin can be checked.  
						When CRUD source codes are automatically generated, a link is added in the Generated CRUD Codes cell on the right of the table 
						so that the created function can be checked. 
					</para>
					<para>
						The following is the page that appears when core link is clicked. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_core_initial.jpg"
									align="center" />
							</imageobject>		
						</mediaobject>
					</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
	
</chapter>