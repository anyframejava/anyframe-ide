<chapter id="app_server_configurations_weblogic">
	<title>WebLogic</title>
	<para>
		Anyframe의 plugin이 설치된 샘플 어플리케이션을 WebLogic에 deploy할 경우 주의해야 할 설정에 대해서 알아보자.
	</para>
	<note id="app_server_configurations_weblogic_ie8">
		<title>WebLogic + IE8</title>
		<para>
			아래에 나열된 WebLogic 서버에 샘플 어플리케이션을 deploy하여 테스트할 때, 웹 브라우저로 Internet Explorer 를 이용할 경우 
			'http://localhost:8080/myproject'처럼 URL에 'localhost'를 사용하면 Session 유지가 안되는 문제가 존재한다.
			이 경우 테스트 URL을 http://127.0.0.1:8080/myproject와 같이 IP를 사용할 것을 권장한다.
		</para>
	</note>
	<section id="app_server_configurations_weblogic_core">
		<title>core plugin 사용 시</title>
		<itemizedlist>
			<listitem>
				<para>10.1(10g) : JavaEE 5를 지원하는 WebLogic 10.1에서는 JPA 1.0 라이브러리가 표준으로 포함되어 있기 때문에, 다음과 같은
					문제가 발생할 수 있다.
				</para>
				<para>
					Core Plugin 설치로 생성된 샘플 프로젝트는 JSR-303 Annotation 기반의 Model Validation 기능을 수행하기 위해 
					Hibernate Validator 4.1.0 라이브러리를 활용하고 있으며 이 라이브러리는 JPA 2.0 라이브러리를 참조한다.
					그런데 WebLogic 10.1은 JPA 1.0 라이브러리를 기준으로 PersistenceProvider를 제공하고 있어서 Model Validation 기능 사용 시
					java.lang.AbstractMethodError at javax.persistence.Persistence$1.isLoaded 에러가 발생한다.
				</para>
				<para>
					아래와 같은 방법으로 해당 문제점을 회피할 수 있다.
				</para>
				<itemizedlist>
					<listitem>
						<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
						<programlisting language="xml"><![CDATA[myproject.ear/ META-INF
	         / myproject]]></programlisting>
	             	</listitem>
	             	<listitem>
						<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
   "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Myproject</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
					</listitem>
					<listitem>
						<para>
							META-INF 폴더에 weblogic-application.xml 파일을 배포한다. javax.persistence package에 대해서 WEB-INF/lib 폴더 내에 있는 
							라이브러리를 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.
						</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application>
    <prefer-application-packages>
	    <package-name>javax.persistence.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>     						 
			     	</listitem>
					<listitem>
						<para>
							myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내 라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다.
							아래 내용을 예시로 참고한다.
						</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app>
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
					</listitem>
					<listitem>
						<para>
							myproject 폴더 내 WEB-INF/lib에서 hibernate-jpa-2.0-api-1.0.0.Final.jar 파일을 제거하고 대신 javax.persistence_2.0.1.vxxx.jar 파일을 배포하도록 한다. 
			     			이 jar 파일은 <ulink url="http://www.eclipse.org/eclipselink/">EclipseLink(Eclipse Persistence Services Project, http://www.eclipse.org/eclipselink/) 사이트</ulink>에서
			     			다운로드 받아서 사용하도록 한다. EclipseLink 2.x 버전 Installer Zip 파일을 다운로드 받은 후 압축을 풀면 JAR 파일을 확인할 수 있다.
			     		</para>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>10.3.6(11g) : JavaEE 6를 지원하는 WebLogic 10.3.6에서는 JPA 1.0 라이브러리가 표준으로 포함되어 있기 때문에, 다음과 같은
					문제가 발생할 수 있다.
				</para>
				<para>
					Core Plugin 설치로 생성된 샘플 프로젝트는 JSR-303 Annotation 기반의 Model Validation 기능을 수행하기 위해
					Hibernate Validator 4.1.0 라이브러리를 활용하고 있으며 이 라이브러리는 JPA 2.0 라이브러리를 참조한다.
					그런데 WebLogic 10.3.6은 JPA 1.0 라이브러리를 기준으로 PersistenceProvider를 제공하고 있어서 Model Validation 기능 사용 시
					java.lang.AbstractMethodError at javax.persistence.Persistence$1.isLoaded 에러가 발생한다.
				</para>
				<para>
					아래와 같은 방법으로 해당 문제점을 회피할 수 있다.
				</para>
				<itemizedlist>
					<listitem>
						<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
						<programlisting language="xml"><![CDATA[myproject.ear/ META-INF
	         / myproject]]></programlisting>
	             	</listitem>
	             	<listitem>
						<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
   "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Myproject</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
					</listitem>
					<listitem>
						<para>
							META-INF 폴더에 weblogic-application.xml 파일을 배포한다. javax.persistence package에 대해서 WEB-INF/lib 폴더 내에 있는
							라이브러리를 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.
						</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application>
    <prefer-application-packages>
	    <package-name>javax.persistence.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>
			     	</listitem>
					<listitem>
						<para>
							myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내 라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다.
							아래 내용을 예시로 참고한다.
						</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app>
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
					</listitem>
					<listitem>
						<para>
							myproject 폴더 내 WEB-INF/lib에서 hibernate-jpa-2.0-api-1.0.0.Final.jar 파일을 제거하고 대신 javax.persistence_2.0.1.vxxx.jar 파일을 배포하도록 한다.
			     			이 jar 파일은 <ulink url="http://www.eclipse.org/eclipselink/">EclipseLink(Eclipse Persistence Services Project, http://www.eclipse.org/eclipselink/) 사이트</ulink>에서
			     			다운로드 받아서 사용하도록 한다. EclipseLink 2.x 버전 Installer Zip 파일을 다운로드 받은 후 압축을 풀면 JAR 파일을 확인할 수 있다.
			     		</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
		<para>
			WebLogic 기반에서 샘플 어플리케이션을 실행할 때 해당 어플리케이션의 WEB-INF/lib 폴더 내에 slf4j-log4j-x.x.x.jar 파일이 한 개 임에도 불구하고,
			"SLF4J: Class path contains multiple SLF4J bindings."로 시작하는 경고 메시지가 나타날 수 있다.
			이는 <ulink url="http://bugzilla.slf4j.org/show_bug.cgi?id=138">SLF4J 내에 존재하는 알려진 버그</ulink>이나, 어플리케이션 실행에는 영향을
			미치지 않으므로 무시하도록 한다.
		</para>
	</section>
	
	<section id="app_server_configurations_weblogic_cxf">
		<title>cxf plugin 사용 시</title>
		<para>
			Apache CXF는 JDK 1.5 이상을 지원하므로 WebLogic 서버의 경우, WebLogic 9.2(JDK 1.5), 10.1(JDK 1.5), 10.3(JDK 1.6) 버전의 서버가 대상이 된다.
			WebLogic 서버에 대한 설명 및 다운로드는 <ulink url="http://www.oracle.com/appserver/index.html">이곳</ulink>을 참고하도록 한다.
		</para>
     	<para>
			단, Plugin 설치로 생성된 샘플 어플리케이션일 경우, 오픈소스 활용을 위한 WAS별 조치 사항을 확인하기 위해 먼저 설치된 각 Plugin 별 유의사항
			을 참고하도록 한다.
     	</para>
     	<itemizedlist>
     		<listitem>
     			<para>
     				9.2(9i) : cxf-jaxws plugin 설치 시 라이브러리 문제로 인해 아래와 같이 추가 작업이 필요하며,
     				<emphasis role="bold">EAR 파일로 웹어플리케이션을 구성하는 방법[방법 1]</emphasis> 혹은
				<emphasis role="bold">geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 복사하는 방법[방법 2]</emphasis> 중에서 선택할 수 있다.
     			</para>
     			<itemizedlist>
     				<listitem>
     					<para>[방법 1] EAR 파일로 웹어플리케이션을 구성하는 방법</para>
     					<itemizedlist>
							<listitem>
								<para>
									Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, WebLogic을 활용할 경우에는 샘플 어플리케이션의
									cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{Weblogic 사용 포트}/...'로 변경해주어야 한다.
								</para>
							</listitem>
							<listitem>
								<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
									<programlisting language="xml"><![CDATA[myproject.ear/ META-INF
			         / myproject]]></programlisting>
							</listitem>
							<listitem>
								<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
								<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
    "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Sample</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>/myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
							</listitem>
							<listitem>
								<para>
									META-INF 폴더에 weblogic-application.xml 파일을 배포한다. javax.jws package에 대해서 WEB-INF/lib 폴더 내에 있는
									라이브러리를 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.  weblogic-application.xml 작성 방법은
								<ulink
									url="http://cwiki.apache.org/CXF20DOC/application-server-specific-configuration-guide.html#ApplicationServerSpecificConfigurationGuide-WebLogic">이곳</ulink>
								을 참고하도록 한다.
								</para>
								<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application xmlns="http://www.bea.com/ns/weblogic/90">
    <prefer-application-packages>
	    <package-name>javax.jws.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>
							</listitem>
							<listitem>
								<para>myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내
									라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.</para>
								<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app xmlns="http://www.bea.com/ns/weblogic/90">
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
							</listitem>
							<listitem>
								<para>
									myproject 폴더 내 WEB-INF/lib 폴더 내에 있는 xmlbeans-x.x.x.jar 파일을 제거한다.
								</para>
							</listitem>
						</itemizedlist>
     				</listitem>
     				
     				<listitem>
     					<para>[방법 2] geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 복사하는 방법</para>
     					<itemizedlist>		
							<listitem>
								<para>
									JDK_HOME/jre/lib/endorsed 폴더에 geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 복사한다.
								</para>
							</listitem>
							<listitem>					
								<para>
									WebLogic 서버 설치 시 설정했던 JDK 1.5의 위치를 확인하여 JDK_HOME/jre/lib 폴더 하위에 endorsed 폴더를 생성하고, 현재 배포하려고 하는
									웹 어플리케이션의 WEB-INF/lib 폴더 하위의 geronimo-ws-metadata_2.0_spec-1.1.2.jar 파일을 endorsed 폴더 하위로 복사해
									넣도록 한다.
				          		</para>
				          		<para>[참고사항] 이 경우, 위 작업 내용이 WebLogic 서버 전체에 영향을 미치므로 주의하도록 한다.</para>
				          	</listitem>
						</itemizedlist>
     				</listitem>
     			</itemizedlist>
     		</listitem>
     		
     		<listitem>
     			<para>
     				10.1(10g) : cxf-jaxws plugin 설치 시 라이브러리 문제로 인해 아래와 같이 추가 작업이 필요하다.
     			</para>
     			<itemizedlist>
					<listitem>
						<para>
							Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, WebLogic을 활용할 경우에는 샘플 어플리케이션의
							cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{Weblogic 사용 포트}/...'로 변경해주어야 한다.
						</para>
					</listitem>
					<listitem>
						<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
							<programlisting language="xml"><![CDATA[myproject.ear/ META-INF
	             / myproject]]></programlisting>
					</listitem>
					<listitem>
						<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
    "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Sample</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>/myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
					</listitem>
					<listitem>
						<para>
							META-INF 폴더에 weblogic-application.xml 파일을 배포한다. javax.jws package에 대해서 WEB-INF/lib 폴더 내에 있는
							라이브러리를 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.
						</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application>
    <prefer-application-packages>
    	<package-name>javax.persistence.*</package-name>
	    <package-name>javax.jws.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>
					</listitem>
					<listitem>
						<para>myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내
							라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app>
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
					</listitem>	
					<listitem>
						<para>
							myproject 폴더 내 WEB-INF/lib 폴더 내에 있는 xmlbeans-x.x.x.jar 파일을 제거한다.
						</para>
					</listitem>
				</itemizedlist>
     		</listitem>
     		
     		<listitem>
     			<para>
					10.3.6(11g) : cxf-jaxws plugin 설치 시 라이브러리 문제로 인해 아래와 같이 추가 작업이 필요하다.
				</para>
				<itemizedlist>
					<listitem>
						<para>
							Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, WebLogic을 활용할 경우에는 샘플 어플리케이션의
							cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{Weblogic 사용 포트}/...'로 변경해주어야 한다.
						</para>					
					</listitem>			
					<listitem>
						<para>EAR Folder를 구성한다. 예를 들어 myproject라는 이름의 프로젝트를 ear로 작업한다면 다음과 같이 2개의 폴더 형태로 구성할 수 있다.</para>
							<programlisting language="xml"><![CDATA[myproject.ear/ META-INF
	         / myproject]]></programlisting>     						  
					</listitem>
					<listitem>
						<para>META-INF 폴더에 application.xml을 배포한다. 아래 내용을 예시로 참고한다.</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application PUBLIC "-//Sun Microsystems,Inc.//DTD J2EE Application 1.3//EN"
    "http://java.sun.com/dtd/application_1_3.dtd">
<application>
    <display-name>Sample</display-name>
    <module>
        <web>
            <web-uri>myproject</web-uri>
            <context-root>/myproject</context-root>
        </web>
    </module>
</application>]]></programlisting>
					</listitem>
					<listitem>
						<para>
							META-INF 폴더에 weblogic-application.xml 파일을 배포한다. 아래 내용을 예시로 참고한다.
						</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-application>
    <prefer-application-packages>
    	<package-name>javax.persistence.*</package-name>
    </prefer-application-packages>
</weblogic-application>]]></programlisting>
					</listitem>
					<listitem>
						<para>myproject 폴더 내 WEB-INF에 weblogic.xml 파일을 배포한다. 웹 어플리케이션 내
							라이브러리 및 클래스 파일들을 우선 참조하도록 설정한다. 아래 내용을 예시로 참고한다.</para>
						<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<weblogic-web-app>
  	 <container-descriptor>
	     <prefer-web-inf-classes>true</prefer-web-inf-classes>
	 </container-descriptor>
</weblogic-web-app>]]></programlisting>
					</listitem>	
					<listitem>
						<para>
							myproject 폴더 내 WEB-INF/lib 폴더 내에 있는 xmlbeans-x.x.x.jar 파일과 geronimo-stax-api_1.0_spec-x.x.x.jar 파일을 제거한다.
						</para>
					</listitem>
					<listitem>
						<para>
							[참고] Apache CXF 2.3 사용 시: 현재 배포되는 Anyframe cxf-jaxws plugin은 Apache CXF 2.3 버전을 사용하고 있다. 
							이 경우 WEB-INF/lib 폴더 내에 있는 xercesImpl-x.x.x.jar 파일을 제거하고, 사용하려는 Weblogic 도메인 하위의 lib 폴더에 배포시키도록 한다. 
	   					</para>
						<para>
							[참고] Apache CXF 2.2.7 사용 시: 이전 버전의 Anyframe cxf plugin은 Apache CXF 2.2.7 버전을 사용하고 있다. 이 경우 WEB-INF/lib 폴더 내에 있는
							xercesImpl-x.x.x.jar, stax-api-x.x.jar 파일을 제거하고 이중 xercesImpl-x.x.x.jar 파일만을 사용하려는 Weblogic 도메인 하위의 lib 폴더에 배포시키도록
							한다. 
	   					</para>   					
					</listitem>				
				</itemizedlist>
     		</listitem>
     		<listitem>
     			<para>
					12.1.1(12c) : cxf-jaxws plugin 설치 시 port 정보만 변경해 주면 문제 없이 실행 가능하다.
				</para>
				<itemizedlist>
					<listitem>
						<para>
							Anyframe에서 제공하는 Plugin들은 Jetty 기반으로 구성되어 있으므로 기본적으로 8080 포트를 이용한다. 따라서, WebLogic을 활용할 경우에는 샘플 어플리케이션의
							cxf-jaxws-servlet.xml 파일을 열고, 'http://localhost:8080/...' 부분을 'http://localhost:{Weblogic 사용 포트}/...'로 변경해주어야 한다.
						</para>
					</listitem>
				</itemizedlist>
     		</listitem>	
		</itemizedlist>
	</section>
	
	<section id="app_server_configurations_weblogic_hibernate">
		<title>hibernate plugin 사용 시</title>
		<itemizedlist>
   			<listitem>
   				<para>
   					10.1(10g) : JavaEE 5를 지원하는 WebLogic 10.1에서는 JPA 1.0 라이브러리가 표준으로 포함되어 있기 때문에, 다음과 같은
   					문제가 발생할 수 있다.
   				</para>
				<para>
					Hibernate Plugin 설치로 생성된 샘플 어플리케이션 프로젝트는 Hibernate 기반 Movie 관리 정보를 수행하기 위해 
					Hibernate 3.6.0 라이브러리를 활용하고 있으며 이 라이브러리는 JPA 2.0 라이브러리를 참조한다.
					그런데 WebLogic 10.1은 JPA 1.0 라이브러리를 기준으로 동작하므로 javax.persistence.OneToMany.orphanRemoval() 실행 시, 
					NoSuchMethodException이 발생한다.     		     						
				</para>
				<para>
					이는 weblogic.xml 에서 prefer-web-inf-classes을 true로 조정하여도 별다른 효과가 없으므로, 
					위의 <link linkend="app_server_configurations_weblogic_core">core plugin 사용 시</link>
   					의 내용을 참고하여 해당 문제점을 회피할 수 있다.
   				</para>			    			
     		</listitem>
   			<listitem>
   				<para>
   					10.3.6(11g) : JavaEE 6를 지원하는 WebLogic 10.3.6에서는 JPA 1.0 라이브러리가 표준으로 포함되어 있기 때문에, 다음과 같은
   					문제가 발생할 수 있다.
				</para>
  				<para>
					Hibernate Plugin 설치로 생성된 샘플 어플리케이션 프로젝트는 Hibernate 기반 Movie 관리 정보를 수행하기 위해 
					Hibernate 3.6.0 라이브러리를 활용하고 있으며 이 라이브러리는 JPA 2.0 라이브러리를 참조한다.
 					그런데 WebLogic 10.1은 JPA 1.0 라이브러리를 기준으로 동작하므로 javax.persistence.OneToMany.orphanRemoval() 실행 시, 
  					NoSuchMethodException이 발생한다.     		     						
   				</para>
   				<para>
     				위의 <link linkend="app_server_configurations_weblogic_core">core plugin 사용 시</link>
   					의 내용을 참고하여 해당 문제점을 회피할 수 있다.
     			</para>
     		</listitem>
     	</itemizedlist>
	</section>
	
	<section id="app_server_configurations_weblogic_tiles">
		<title>tiles plugin 사용 시</title>
		<itemizedlist>
			<listitem>
				<para>
					9.2(9i) : tiles plugin의 샘플 어플리케이션은 화면이 Tiles 기반으로 구성되어 있으며 
					Tiles 정의시 EL(Expression Language)를 사용할 수 있도록 하기 위해 tiles-config_2_1.dtd를 채택하고 있다. 
					그런데 이는 Servlet Spec. 2.5 이후부터 지원되는 기능이며 WebLogic 9.2는 Servlet Spec. 2.4를 구현한 WAS이므로 
					이 기능 처리에 문제가 있다. 
					따라서 샘플 프로젝트 하위의 src/main/resources/spring/tiles-servlet.xml 파일을 열고, 
					'tilesConfigurer' Bean 정의에서 tilesInitializer 속성 정의를 Servlet Spec. 2.4 용으로 변경하고 
					<ulink url="http://seam-forum.googlecode.com/files/el-api.jar">el-api.jar</ulink>를 샘플 어플리케이션 하위의 WEB-INF/lib에 추가한다.
					수정된 'tilesConfigurer' Bean의 속성은 다음과 같다.
					<programlisting language="xml"><![CDATA[<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
    <property name="tilesInitializer">
        <bean class="anyframe.web.tiles2.Servlet24ELTilesInitializer">
            <property name="definitions">
                <list>
                    <value>/WEB-INF/tiles-views.xml</value>
                </list>
            </property>
        </bean>
    </property>
</bean>]]></programlisting>
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section id="app_server_configurations_weblogic_jquery">
		<title>jQuery plugin 사용 시</title>
		<itemizedlist>
			<listitem>
				<para>
					Weblogic과 인터넷 익스플로러 환경 : jQuery plugin은 파일 업로드 구현을 위해 jQuery기반의 uploadify를 사용한다. uploadify는 Flash를 사용하여 파일 업로드를 지원하는데,
					Weblogic과 인터넷 익스플로러를 사용하는 경우 내부에 정의한 flash 파일(uploadify.swf)이 정상적으로 재생되지 않는 현상이 있다. 
				</para>
				<para>
					이 경우 아래의'mime-mapping'을 web.xml에 추가해 주면 정상 동작한다.
				</para>
				<programlisting language="xml"><![CDATA[
<mime-mapping>
	<extension>swf</extension>
	<mime-type>application/x-shockwave-flash</mime-type>
</mime-mapping>]]></programlisting>
			</listitem>
			<listitem>
				<para>
					War로 패키징하여 배포하는 경우 파일 업로드 경로를 못 가져오는 현상
				</para>
				<para>
					upload경로를 읽어오기 위해 request.getSession().getServletContext().getRealPath() 매소드를 사용한다.
					Weblogic에 War로 패키징하여 웹 어플리케이션을 배포하는 경우 getRealPath() 매소드 호출의 결과가 Null이 된다. 
					Weblogic 관리자 화면에서 '아카이브된 실제 경로 사용'을 선택 하면 정상 동작한다. 
					(User Domain 선택 -> '웹 응용 프로그램' 탭 클릭 -> '아카이브된 실제 경로 사용' 체크 박스 선택)
				</para>
			</listitem>
		</itemizedlist>
	</section>
</chapter>