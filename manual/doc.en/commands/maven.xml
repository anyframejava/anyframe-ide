<chapter id="commands_maven">
	<title>Maven Commands</title>
	<para>
		Let us create a development environment based on Anyframe using CLI for the case Maven is adopted as a buid tool in the project. 
		This chapter will first cover what is Anyframe Maven Command and how to use the Command in detail.
		In case the Maven environment is not established, check whether the configuration is properly set by referring to <link linkend="installation_maven_configuration">Installation - Maven installation and configuration</link> in this manual.
		
	</para>
	
	<section id="commands_maven_commands">
		<title>Anyframe Maven Commands</title>
		<para>
			Anyframe supports installing/deleting/searching various <link linkend="plugins_list">Anyframe Plugins</link> registered in Anyframe Repository after downloading and generating Domain/CRUD source codes by providing Maven Plugin named 'anyframe-maven-plugin' developed on its own.  
			 
		</para>
		
		<section id="commands_maven_commands_check">
			<title>anyframe-maven-plugin definition check</title>
			<para>
				To use anyframe-maven-plugin in a Maven-based project, maven plugin should be followed within the pom.xml file under the project folder as follows.
			</para>
			<programlisting language="xml"><![CDATA[<project>
    ...
    <build>
        <plugins>
           ...						
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                    <artifactId>anyframe-maven-plugin</artifactId>
                    <version>x.x.x</version>
                    <dependencies>
                        <dependency>
                            <groupId>hsqldb</groupId>
                            <artifactId>hsqldb</artifactId>
                            <version>2.0.0</version>
                        </dependency>       
                    </dependencies>
            </plugin>
        </plugins>
    </build>
</project>]]></programlisting>		
		</section>
	
		<section id="commands_maven_commands_list">
			<title>Command list</title>
			<para>
				anyframe-maven-plugin is composed of various Maven Mojo(Maven-old-java-object) classes developed to execute Anyframe's own unique functions,  
				and each Mojo is mapped with one Goal. Goal here is a term used in Maven and a certain functional unit performed with one execution. 
				The following is the list of Goals that constitute anyframe-maven-plugin, and users can execute wanted functions by entering the command such as <emphasis role="bold">mvn anyframe:{goal}</emphasis> in the Command window. 
				Option can be added after entering the commands in the form of -D{option}=....
			</para>
			<informaltable>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" colwidth="1*"/>
					<colspec colnum="2" colname="col2" colwidth="5*"/>
					<thead>
						<row>
							<entry align="center">Goal</entry>
							<entry align="center">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>help</entry>
							<entry>shows the list of available Commands
								<para>
									command : Input the name of the Goal to search for in detail.[optional]
								</para>
							</entry>
						</row>
						<row>
							<entry>install</entry>
							<entry>
								Installs the plugin assigned based on the sample project structure generated after installing anyframe-basic-archetype (or anyframe-service-archetype).
								It has the following options.
								<para>
									name: Assigns the name of the plugin to be installed. [required]
								</para>		
								<para>
									version: Assigns the plugin version to be installed. [optional]
								</para>
							</entry>
						</row>
						<row>
							<entry>uninstall</entry>
							<entry>
								Deletes the installed plugin. It has the following options.
								<para>
									name: Assigns the name of the plugin to be deleted. [required]
								</para>		
								<para>
									excludes: Assigns certain files not to be deleted when the Plugin is deleted. [optional]
								</para>
							</entry>
						</row>
						<row>
							<entry>create-model</entry>
							<entry>
								Generates one domain class per table. 
								When a table name is assigned, it should be noted that capital and lower case letters are distinguished. In particular, capital or lower case letters should be used in line with the relevant DB. 
								For hsqldb and oracle, the table name should be in capital letters, and for mysql the table name should be in lower case letters.
								<para>
									table: Defines the table name for Domain class generation. When there are several tables, use "," as a delimiter.
									Also, if the table is in relation with other tables, the tables that are in relation should be also defined.
									[optional, the default value is '*', and domain classes are generated for all tables.]
								</para>		
								<para>
									package: Defines the package of the domain class to be generated. [optional, the default value is the main package of the relevant project + ".domain"]
								</para>																 
							</entry>
						</row>
						<row>
							<entry>create-crud</entry>
							<entry>
								Generates source codes that belong to the business layer and the presentation layer that implement basic CRUD fuctions based on one Domain class.
								<para>
									entity: Defines the relevant Domain class for CRUD source code generation. When only the class name is defined, the relevant domain class is found under the main package of the relevant project + ".domain".
									Thus, the relevant domain class exists in other packages, the name of the package in the class should also be defined. [required]
								</para>
								<para>
									package: Defines the package of the CRUD source codes to be generated. [optional, the default value is the main package of the project + {the name of the input Entity class (lower case)}]
								</para>	
								<para>
									scope: Is used in limiting the CRUD source code section to be generated. When scope is defined as "service", only the CRUD source codes in the business layer are generated.
									[optional, the default value is "all", and all source codes in the presentation layer and the business layer are generated.]
								</para>								
							</entry>							
						</row>		
						<row>
							<entry>change-db</entry>
							<entry>
								Changes the properties information affected by the change in DB when the currently used DB is wanted to be changed. (Runs based on the DB information defined in the META-INF/project.mf file in the relevant project.)
								<note>
									<title>Reference</title>
									<para>
										The plugins currently provided by Anyframe provides the resources for Oracle, Sybase, MySQL and DB2 in addition to HsqlDB provided as the default.
									</para>
								</note>
							</entry>
						</row>	
						<row>
							<entry>inplace</entry>
							<entry>
								Download all reference libraries necessary to execute Sample Application in the src/main/webapp/WEB-INF/lib folder under the generated sample project 
								based on the pom.xml file.
							</entry>
						</row>									
						<row>
							<entry>update-catalog</entry>
							<entry>
								Replaces the plugin-catalog-essential.xml file and the plugin-catalog-optional.xml file that exist in the {user.home}/.anyframe directory 
								with the most recent plugin catalog file in Anyframe Repository (http://dev.anyframejava.org/maven/repo).
								Thus, when the Plugin list is searched, the newest information can be shown.
								It can also be used when there is not the plugin-catalog-essential.xml and the plugin-catalog-optional.xml files in the {user.home}/.anyframe directory.
							</entry>
						</row>
						<row>
							<entry>list</entry>
							<entry>
								Shows the name and the version information of the plugins that can be installed.
							</entry>
						</row>
						<row>
							<entry>info</entry>
							<entry>
								Can search detailed information of the designated Plugin.
								<para>
									name: Assigns the name of the plugin to search. [required]
								</para>
							</entry>
						</row>
						<row>
							<entry>list-update</entry>
							<entry>
								Shows the list of the plugins that can update the version among the plugins installed in the sample project currently generated.
							</entry>
						</row>
						<row>
							<entry>installed</entry>
							<entry>
								Shows the status of the installed plugin and the newest version information of the plugin.
							</entry>
						</row>																																					
					</tbody>
				</tgroup>
			</informaltable>		
		</section>		
	</section>
		
	<section id="commands_maven_generate">
		<title>Generation of the project structure</title>
		<para>
			A proper Anyframe Archetype should be installed to generate the basic structure of the sample project to be generated. 
			Based on that it is possible to constitute the development environment that uses Anyframe.
			Since Anyframe 4.6.0, anyframe-basic-archetype and anyframe-service-archetype are provided, 
			and for 'web' type projects anyframe-basic-archetype is installed, and for 'service' type projects anyframe-service-archetype is installed. 
			In this chapter explanation will be based on anyframe-basic-archetype. 
			(Refer to  <link linkend="commands_maven_generate_archetype">Archetype</link> for Anyframe Archetype.) 
		</para>
		<para>
			Let us install anyframe-basic-archetype first.
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					Start installation of anyframe-basic-archetype by opening the Command window and entering the following command. 
				</para>
				<programlisting language="java"><![CDATA[mvn archetype:generate 
    	-DarchetypeCatalog="http://dev.anyframejava.org/maven/repo/archetype-catalog.xml"]]></programlisting>			
				<para>
					When the command is entered as above, the Maven Archetype list will be provided that is defined in the http://dev.anyframejava.org/maven/repo/archetype-catalog.xml file defined in the Command window as the property value of archetypeCatalog.  
					 
				</para>
				<programlisting language="java"><![CDATA[Choose archetype:
1: http://dev.anyframejava.org/maven/repo/archetype-catalog.xml -> anyframe.plugin.foundation (foundation plugin (latest release is 4.2.0))
2: http://dev.anyframejava.org/maven/repo/archetype-catalog.xml -> anyframe-basic-archetype (anyframe basic archetype (latest stable 4.6.1))
3: http://dev.anyframejava.org/maven/repo/archetype-catalog.xml -> anyframe-service-archetype (anyframe service archetype (latest stable 1.0.1))
4: http://dev.anyframejava.org/maven/repo/archetype-catalog.xml -> anyframe-basic-archetype (anyframe basic archetype (latest stable x.x.x))
5: http://dev.anyframejava.org/maven/repo/archetype-catalog.xml -> anyframe-service-archetype (anyframe service archetype (latest stable x.x.x))
Choose a number: : 4]]></programlisting>
				<para>			
				The archetype named anyframe-basic-archetype defined in the archetype-catalog.xml file is shown in the Command window as can be seen above.
				Select the number ('4') that corresponds to the newest anyframe-basic-archetype among the presented	Maven Archetype list. 				
				</para>
			</listitem>
			<listitem>
				<para>
					When there are several versions of anyframe-basic-archetype registered in the archetype-catalog.xml file,  
					the version list will be presented so that the version can be selected as below.
					Select the number that corresponds to the version of anyframe-basic-archetype to be installed.
					(When there is one registered version of anyframe-basic-archetype, the version list is not presented and the next stage will follow.)
				</para>
				<programlisting language="java"><![CDATA[Choose version:
1: 5.0.0.RC1
2: 5.0.0
Choose a number: 2: 2]]></programlisting>				
			</listitem>
			<listitem>
				<para>				
					Enter the value for each parameter to generate Sample Project as follows.
		<programlisting language="java"><![CDATA[Define value for property 'groupId': : myapp
Define value for property 'artifactId': : myproject
Define value for property 'version': 1.0-SNAPSHOT: 1.0.0
Define value for property 'package': myapp: anyframe
Confirm properties configuration:
groupId: myapp
artifactId: myproject
version: 1.0.0
package: anyframe
Y: y]]></programlisting>
				</para>
				<informaltable>
					<tgroup cols="3">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="5*"/>
						<colspec colnum="3" colname="col3" colwidth="2*"/>
						<thead>
							<row>
								<entry align="center">Parameter</entry>
								<entry align="center">Description</entry>
								<entry align="center">Default Value</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>groupId</entry>
								<entry>groupId of the project to be installed</entry>
								<entry>N/A</entry>
							</row>
							<row>
								<entry>artifactId</entry>
								<entry>artifactId of the project to be installed, which is the name of the folder where the project will be installed and the name of the project</entry>
								<entry>N/A</entry>
							</row>
							<row>
								<entry>version</entry>
								<entry>version of the project to be installed</entry>
								<entry>1.0-SNAPSHOT</entry>
							</row>
							<row>
								<entry>package</entry>
								<entry>main package name for the source codes of the project to be installed</entry>
								<entry>value defined by groupId</entry>
							</row>																					
						</tbody>
					</tgroup>
				</informaltable>
				<para>
					When anyframe-basic-archetype-x.x.x.jar library does not exist in Maven Local Repository, it can be downloaded from Anyframe Repository 
					defined previously in the settings.xml file, and Sample Project will be generated based on the input property value.
					(If <![CDATA[<localRepository></localRepository>]]> in the settings.xml file is not defined separately, basically {user.home}/.m2/repository becomes Maven Local Repository.)						
				</para>
			</listitem>
			<listitem>
				<para>
					The following is the basic form of the sample project generated by the installation of anyframe-basic-archetype. 
					The name of the sample project installed is myproject, and it includes folders of various usage under it.
					
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/maven/myproject_structure.jpg"
								align="center" />
						</imageobject>
					</mediaobject>
				</para>
			</listitem>
			<listitem>
				<para>
					After completing the installation of anyframe-basic-archetype, check whether it runs properly by referrring to <link linkend="commands_maven_run">application execution</link>.
				</para>
			</listitem>
		</orderedlist>
		<section id="commands_maven_generate_archetype">
			<title>Archetype</title>
			<para>
				Let us look at the structure of Anyframe archetype that should be installed in advance to generate the structure of the development project.
				(Since Anyframe 4.6.0, <link linkend="plugins_archetype_basic">anyframe-basic-archetype</link> for generation of the structure of the web project and <link linkend="plugins_archetype_service">anyframe-service-archetype</link> for generation of the structure of the service project are provided.)
			</para>
			
			<section id="plugins_archetype_basic">
				<title>anyframe-basic-archetype</title>
				<para>
					anyframe-basic-archetype is Maven Archetype that defines the basic structure of the web project composed of the presentation layer and the business layer. 
					Therefore, using the command mvn archetype:generate, the web project structure defined within anyframe-basic-archetype is generated in the assigned location.
					
				</para>
				<para>
					The following is a picture of main components located under src/main/resources of anyframe-basic-archetype.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="../image/plugins/basic_archetype_structure.jpg" align="center" />
					</imageobject>
				</mediaobject>	
				<para>
					archetype-resources has the following sub-folders along with the pom.xml file as the folders to manage resource templates.
					In the pom.xml file, Maven Plugins are defined that are necessary for executing the sample application generated after installing anyframe-basic-archetype and reporting the results of reviewing the quality of source codes.
					The following is explanation of main sub-folders/files that constitute the archetype-resources folder. 
				</para>
				<informaltable>
					<tgroup cols="2">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="5*"/>
						<thead>
							<row>
								<entry align="center">Folder</entry>
								<entry align="center">Description</entry>
							</row>
						</thead>
						<tbody>	
							<row>
								<entry>META-INF</entry>
								<entry>
									Has Plugin plugin-installed.xml file to manage Plugin installation information and project.mf file to manage various Meta information including sample projects and DB information. 
									
								</entry>
							</row>	
							<row>
								<entry>.settings</entry>
								<entry>Manages the information of Eclipse projects</entry>
							</row>
							<row>
								<entry>db/hsqldb</entry>
								<entry>Sample DB necessary to execute the Sample Application</entry>
							</row>	
							<row>
								<entry>src/main/java</entry>
								<entry>
									Has the folder to manage source codes
								</entry>
							</row>	
							<row>
								<entry>src/main/resources</entry>
								<entry>
									Has folders to manage the property definition file for execution of applications based on Spring and SpringMVC, the message file, and the mapping xml file that defines query statements.
									
								</entry>
							</row>	
							<row>
								<entry>src/main/webapp</entry>
								<entry>Has folders to manage web resources (*.jsp, *.css, *.js ...) for web applications</entry>
							</row>
							<row>
								<entry>src/test/java</entry>
								<entry>Has folders to manage test codes</entry>
							</row>	
							<row>
								<entry>src/test/resources</entry>
								<entry>Has folders to manage resources necessary to execute test codes</entry>
							</row>																																									
						</tbody>
					</tgroup>
				</informaltable>
				<para>META-INF is a folder to manage Meta information of resource templates of anyframe-basic-archetype and has the following sub-folders.</para>
				<informaltable>
					<tgroup cols="2">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="5*"/>
						<thead>
							<row>
								<entry align="center">Folder</entry>
								<entry align="center">Description</entry>
							</row>
						</thead>
						<tbody>	
							<row>
								<entry>maven</entry>
								<entry>
									Has archetype-metadata.xml file that manages Meta information necessary when Sample Project is generated using resource templates.
								</entry>
							</row>	
						</tbody>
					</tgroup>
				</informaltable>			
			</section>	
			<section id="plugins_archetype_service">
				<title>anyframe-service-archetype</title>
				<para>
					anyframe-service-archetype is Maven Archetype that defines the basic structure of the service project composed only of the business layer. Thus, using the command mvn archetype:generate, 
					the service project structure defined in anyframe-service-archetype is generated in the assigned location.
				</para>
				<note>
					<title>Notes</title>
					<para>
						As for the service project generated by anyframe-service-archetype it should be noted that even though Anyframe Plugin is installed for the project, 
						selected plugin related sample codes/property files are not added but only the reference library is added.
					</para>
				</note>
				<para>
					The following is the picture of main components located under src/main/resources of anyframe-service-archetype.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="../image/plugins/service_archetype_structure.jpg" align="center" />
					</imageobject>
				</mediaobject>	
				<para>
					archetype-resources has the following sub-folders along with pom.xml file as folders to manage resource templates.
					In pom.xml file Maven Plugins are defined necessary for executing the sample application generated after installing anyframe-service-archetype and reporting the results of reviewing the quality of source codes.
					The following is explanation of main sub-folders/files that constitute the archetype-resources folder. 
				</para>
				<informaltable>
					<tgroup cols="2">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="5*"/>
						<thead>
							<row>
								<entry align="center">Folder</entry>
								<entry align="center">Description</entry>
							</row>
						</thead>
						<tbody>	
							<row>
								<entry>META-INF</entry>
								<entry>
									Has plugin-installed.xml file to manage Plugin installation information and project.mf file to manage various Meta information including the sample project and DB information. 
									
								</entry>
							</row>	
							<row>
								<entry>.settings</entry>
								<entry>Manages Eclipse project information</entry>
							</row>
							<row>
								<entry>db/hsqldb</entry>
								<entry>Sample DB necessary to execute the sample application.</entry>
							</row>	
							<row>
								<entry>src/main/java</entry>
								<entry>
									Has the folder to manage source codes. It includes the basic Exception class and the Aspect class necessary for application development.
								</entry>
							</row>	
							<row>
								<entry>src/main/resources</entry>
								<entry>
									Has the folder to manage the property definition file for execution of applications based on Spring and SpringMVC, the message file, and mapping xml files that define query statements.
									It includes the basic property definition file necessary in common for application development.
								</entry>
							</row>	
							<row>
								<entry>src/test/java</entry>
								<entry>Has the folder to manage test codes.</entry>
							</row>	
							<row>
								<entry>src/test/resources</entry>
								<entry>
									Has the folder to manage resources necessary to execute test codes. 
									It includes XML files to manage sample data information to be used when CRUD source codes are generated.</entry>
							</row>																																									
						</tbody>
					</tgroup>
				</informaltable>
				<para>META-INF is a folder to manage Meta information of resource templates of anyframe-service-archetype and has the following sub-folders.</para>
				<informaltable>
					<tgroup cols="2">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="5*"/>
						<thead>
							<row>
								<entry align="center">Folder</entry>
								<entry align="center">Description</entry>
							</row>
						</thead>
						<tbody>	
							<row>
								<entry>maven</entry>
								<entry>
									Has archetype-metadata.xml file that manages Meta information necessary when a sample project is generated using resource templates.
								</entry>
							</row>	
						</tbody>
					</tgroup>
				</informaltable>		
			</section>
		</section>
	</section>
	
	<section id="commands_maven_install">
		<title>Plugin installation</title>
		<para>
			Since Anyframe 4.6.0, the aggregation of sample codes based on templates that integrate various open sources and reference libraries is named Plugin, and various types of plugins are provided.
		</para>
		<para>
			Anyframe's Plugins are divided into <emphasis role="bold">Essential Plugins</emphasis> and <emphasis role="bold">Optional Plugins</emphasis>.
			Essential Plugins include plugins that has basic functions necessary to run other plugins such as core, spring, datasource and logging, 
			and Optional Plugins include plugins that provide various functions that can be used when applications are developed such as hibernate, cxf-jaxrs and fileupload.
			(For details on Plugin, refer to <link linkend="plugins_list">Plugin list</link> and <link linkend="plugins_structure">Plugin structure</link>.)
		</para>
		<para>
			The following paragraphs explains the basic usage of Command, and for Anyframe Commmand Option, refer to the explanation of the relevant Command presented in <link linkend="commands_maven_commands_list">Command list</link>.
			
		</para>		
		
		<para>
			Anyframe's Plugin can set the plugin necessary to run a certain plugin as Dependent Plugin. 
			When Dependent Plugin has not been installed when a certain plugin is installed, Anyframe automatically installs it.
		</para>
		<para>
			Let us here install core plugin, which is an essential plugin that provides that basis for running other Anyframe Plugins. 
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					Open the Command window and start hsqldb provided as a sample by moving to the [sample project installation folder]/db/hsqldb folder previously installed and double-clicking start.cmd (or start.sh) file. 
					When addition of DB data is necessary for execution of the Plugin, DB should be started since DB data addtion is carried out when the selected Plugin is installed. 
					If DB has not been started when the selected Plugin is installed, execute the DB script file ([sample project installation folder]/db/scripts/{plugin name-insert-data-db name}.sql) provided after installation of Plugin.
					Also, when you want to install Plugin on the basis of other DBs, not hsqldb provided as a sample,  
					refer to <link linkend="commands_maven_db">DB change</link>.
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/maven/start_hsqldb.jpg"
								align="center" />
						</imageobject>
					</mediaobject>
				</para>
				<warning>
					<title>Notes</title>
					<para>
						In Windows environment, execute start.cmd file using CLI, and in Unix environment (e.g. Mac OS, etc.) 
						execute start.sh file (./start.sh) after authorizing execution of the files under hsqldb folder first (chmod 755 *).
						
					</para>
				</warning>				
			</listitem>
			<listitem>
				<para>
					Enter the following command by opening the Command window and moving to the sample project installation folder (e.g. If a project named myproject has been generated, 
					execute command in myproject folder.)
					Since core plugin will be installed here, proceed with the installation of core plugin by entering 'core' as the name option value.
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:install -Dname=core]]></programlisting>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/maven/install_core_plugin.jpg"
								align="center" />
						</imageobject>
					</mediaobject>
				</para>
				<para>
					As above, when Plugin install command is entered, <emphasis role="bold">dependency of the Plugin to be installed and the installation in the current project is identified,  
					and the list of Plugins to be installed finally is shown and the authorization of the user is awaited.</emphasis>
					For operation of core, datasource, logging, and spring Plugin are required and thus it will be shown as above.
					When you want to continue installation, enter 'y'.
					<note id="commands_maven_install_essential">
						<title>Essential Plugins</title>
						<para>
							The core, datasource, logging, and spring plugins are essential plugins,  
							and the datasource, logging, and spring plugins cannot be installed alone.  
							If core is intalled, all of the four plugins are installed.
						</para>
					</note>
				</para>
			</listitem>
			<listitem>
				<para>
					After completing the installation of Plugin, check whether it runs properly by referring to <link linkend="commands_maven_run">application execution</link>.
				</para>
			</listitem>
			<listitem>
				<para>
					The list of installed plugins in the sample project can be checked by opening the Command window and entering the following command, moving to the sample project installation folder. 
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:installed]]></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="../image/commands/maven/show_plugin_installed.jpg"
							align="center" />
					</imageobject>
				</mediaobject>
			</listitem>
		</orderedlist>
		<para>
			Other plugins can be additionally installed in the same way as in core plugin.
		</para>
		
		<para>
			Also, the already installed Plugin can be <emphasis role="bold">replaced with another version by adding the version option in the command</emphasis> as follows.
			In this case, other plugins (dependent plugins) referred to by the relevant plugin can also be replaced with compatible versions. 
			It should be noted that by the change in the Plugin version related reference libraries can also change.
			<programlisting language="java"><![CDATA[mvn anyframe:install -Dname=... -Dversion=...]]></programlisting>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../image/commands/maven/install_plugin_version.jpg"
						align="center" />
				</imageobject>
			</mediaobject>
		</para>
		
		<important>
			<title>Notes for the exisiting Maven users</title>
			<para>
				Anyframe deploys libraries to Anyframe Repository disconnecting reference relationhip among libraries 
				to prevent all of Anyframe's libraries and 3rd party libraries in the reference relations from being downloaded at one time 
				when libraries related to Anyframe are downloaded based on Maven. 
				Thus, for the exisiting Maven users errors can occur when Anyframe is installed 
				due to the problems in the reference relationship of 3rd party libraries that already exist in Local Repository. 
				Therefore, it is recommended that Anyframe be reinstalled after deleting Local Repository when a problem occurs during installation.
			</para>
		</important>
	</section>
	
	<section id="commands_maven_uninstall">
		<title>Plugin deletion</title>
		<para>
			The plugins installed for Sample Project can be deleted. 
			Yet, the plugins that are wanted to be deleted cannot be deleted when other plugins are using them. 
			In this case, the dependent plugins should be deleted first and then the plugin that is wanted to be deleted can be deleted.
		</para>	
		<para>
			When it is requested that a certain plugin be deleted, all the folders and files that include the name of the plugin to be deleted will be deleted from the relevant project. 
			Thus, it is recommended to check whether the resources added during development are not included in the deletion before the certain plugin is deleted.
		</para>
		<orderedlist>
			<listitem>
				<para>
					Open the Command window and enter the following command, moving the the sample project installation folder. 
				</para>		
				<programlisting language="java"><![CDATA[mvn anyframe:uninstall -Dname=...]]></programlisting>
				<para>
					Using the excludes option, the files that will be excluded from deletion when the plugin is deleted can be designated.
				</para>
				<para>
					If the plugin that is wanted to be deleted is not being used by other plugins, it will be deleted without any problem.
				</para>	
			</listitem>
			<listitem>
				<para>
					It can be checked whether the plugin has been properly deleted by opening the Command window and entering the following command, moving to the sample project installation folder. 
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:installed]]></programlisting>
			</listitem>
		</orderedlist>
		<para>
			The files and directories related to the deleted plugin are backed up under '[sample project root folder]/uninstalled'  
			at the point when the relevant plugin is deleted, and thus they can be recovered.
		</para>	
	</section>
	
	<section id="commands_maven_list">
		<title>Plugin list search</title>
		<para>
			To search for the list of plugins that can be installed, use the following command.
			<programlisting language="java"><![CDATA[mvn anyframe:list]]></programlisting>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../image/commands/maven/show_plugin_list.jpg"
						align="center" />
				</imageobject>
			</mediaobject>
		</para>
		<para>
			The list of plugins that can be installed is searched based on the Plugin Catalog file, and Anyframe first checks whether the relevant file exists in '{user.home}/.anyframe' directory  
			and when there is one, the plugin information defined in the file is used. If the file does not exist in '{user.home}/.anyframe' directory, 
			the plugin-catalog-essential.xml and plugin-catalog-optional.xml file in http://dev.anyframejava.org/maven/repo/, which is Anyframe Repository, is downloaded in  
			'{user.home}/.anyframe' directory and that file is used.
			To synchronize the Plugin Catalog file in Local, which has been once download, with the newest Plugin Catalog file in Anyframe Repository, 
			refer to <link linkend="commands_maven_update_catalog">Plugin Catalog Update</link>.
		</para>
	</section>
	
	<section id="commands_maven_installed">
		<title>Installed Plugin list search</title>
		<para>
			By executing the following command, the names and versions of the plugins installed in the sample project and the newest version information of each plugin can be checked.
		</para>
		<programlisting language="java"><![CDATA[mvn anyframe:installed]]></programlisting>
		<mediaobject>
			<imageobject>
				<imagedata fileref="../image/commands/maven/show_plugin_installed.jpg"
					align="center" />
			</imageobject>
		</mediaobject>
		<para>
			The information of the installed plugin is recorded in META-INF/plugin-installed.xml file under the sample project.
		</para>
	</section>
	
	<section id="commands_maven_info">
		<title>Plugin information search</title>
		<para>
			When the detailed information of a certain Plugin is wanted to be searched, the following command can be used.
			<programlisting language="java"><![CDATA[mvn anyframe:info -Dname=...]]></programlisting>
		</para>
		<para>
			For example, when the detailed information of core plugin is requested, the following is shown.
			<programlisting language="java"><![CDATA[ Name		: core
 GroupId		: org.anyframe.plugin
 ArtifactId		: anyframe-core-pi
 Latest Version	: x.x.x
 Samples		: Included
 Releases		: 1.0.0-SNAPSHOT,1.0.0.RC1,1.0.0,1.0.1-SNAPSHOT, 1.0.1, ...
 Dependencies	: datasource(1.0.0-SNAPSHOT<=*),logging(1.0.0-SNAPSHOT<=*),spring(1.0.0-SNAPSHOT<=*)
 Description	: Core Plugin is the basic plugin which is the basis of all
                   plugins provided by Anyframe, and consists of sample code
                   to guide how to use Spring MVC, Spring, etc. and reference
                    libraries to use these open sources.]]></programlisting>
		</para>
	</section>
	
	<section id="commands_maven_update_catalog">
		<title>Plugin Catalog Update</title>
		<para>
			As mentioned above, Anyframe defines the list of plugins that can be installed in the plugin-catalog-essential.xml and the plugin-catalog-optional.xml file. 
			Anyframe searches the list of plugins that can be installed, based on these files. 
			First it is checked whether the relevant file exists in '{user.home}/.anyframe' directory, 
			and when there is the file, the plugin information defined in that file is used. 
			If the file does not exist in '{user.home}/.anyframe' directory, 
			the plugin-catalog-essential.xml and the plugin-catalog-optional.xml file, which exist in http://dev.anyframejava.org/maven/repo/, which is Anyframe Repository, 
			are downloaded in '{user.home}/.anyframe' directory, and this file is used..
			After it is once downloaded under '{user.home}/.anyframe' of the user, only the Plugin Catalog file in Local is used. 
			Thus, if time passes, it may not match the newest Plugin Catalog file in Anyframe Repository. 
			Therefore, for synchronization with the newest Plugin Catalog file, the following process is required.
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					After opening the Command window, move to the location where the sample project is located, and the newest Plugin Catalog file can be downloaded in Local by entering the Maven command as follows.
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:update-catalog]]></programlisting>				
			</listitem>
			<listitem>
				<para>
					Check whether the newest Plugin Catalog has been properly reflected, by entering the Maven command as follows.
				</para>	
				<programlisting language="java"><![CDATA[mvn anyframe:list]]></programlisting>
			</listitem>
		</orderedlist>			
	</section>
	
	<section id="commands_maven_list_update">
		<title>Updatable plugin list search</title>
		<para>
			Use the following command to check whether there are plugins that can update their versions among the plugins that are installed for the sample project.
			<programlisting language="java"><![CDATA[mvn anyframe:list-update]]></programlisting>
		</para>
		<para>
			Yet, the exact information can be checked only after the Plugin Catalog file in Local is updated as the newest version. 
			For how to update Local Plugin Catalog, refer to <link linkend="commands_maven_update_catalog">Plugin Catalog Update</link> of this document.
		</para>
		<para>
			Anyframe supports applying the newest version to the plugin of older version when the version of the plugin installed in the sample project currently made is not the newest one. 
			For this, refer to <link linkend="commands_maven_install">Plugin installation</link>. 
		</para>
	</section>
	
	<section id="commands_maven_db">
		<title>DB change</title>
		<para>
			As mentioned above, the sample project created by the installation of the Plugin is basically constituted to operate based on hsqldb. 
			If it is wanted that the execution DB of the sample project is changed, the following process is required.
			(Anyframe plugins, which currently provide samples, are supported to operate only for hsqldb, oracle, sysbase, db2, and mysql DB.)
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					Open META-INF/project.mf file under the installed sample project installation folder and modify the DB information previously defined.
				</para>
				<programlisting language="java">db.type=hsqldb
db.name=sampledb
db.schema=PUBLIC
db.server=localhost
db.port=-1
db.driver=org.hsqldb.jdbcDriver
db.url=jdbc:hsqldb:hsql://localhost/sampledb
db.userId=SA
db.password=
db.lib=db/hsqldb/hsqldb-2.0.0.jar
db.dialect=org.hibernate.dialect.HSQLDialect

db.groupId=hsqldb
db.artifactId=hsqldb
db.version=2.0.0</programlisting>	
				<para>
					Each property presented above has the following meaning.					
				</para>
				<para>
					<informaltable>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="1*"/>
							<colspec colnum="2" colname="col2" colwidth="5*"/>
							<thead>
								<row>
									<entry align="center">Property</entry>
									<entry align="center">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>db.type</entry>
									<entry>
										Defines the main name of the appropriate DB. If there is a DB script to be executed when a certain Plugins is installed, it is used to execute the script file that includes db.type value 
										({plugin name}-insert-data-{db.type}.sql, {plugin name}-delete-data-{db.type}.sql).
	               						(For example, if db.type is oracle, security-insert-data-oracle.sql file is executed when security plugin is installed.)  								
									</entry>
								</row>
								<row>
									<entry>db.name</entry>
									<entry>
										Defines the name of the appropriate DB.
									</entry>
								</row>	
								<row>
									<entry>db.schema</entry>
									<entry>
										Defines the Schema of the appropriate DB.
									</entry>
								</row>		
								<row>
									<entry>db.server</entry>
									<entry>
										Defines the IP of the server that has the appropriate DB.
									</entry>
								</row>	
								<row>
									<entry>db.port</entry>
									<entry>
										Defines the port of the server for the appropriate DB.
									</entry>
								</row>																				
								<row>
									<entry>db.driver</entry>
									<entry>Defines the name of Driver Class for the appropriate DB.</entry>
								</row>	
								<row>
									<entry>db.url</entry>
									<entry>Defines the URL for the appropriate DB.</entry>
								</row>
								<row>
									<entry>db.userId</entry>
									<entry>Defines User ID to access the appropriate DB.</entry>
								</row>
								<row>
									<entry>db.password</entry>
									<entry>Defines Password to access the appropriate DB.</entry>
								</row>
								<row>
									<entry>db.lib</entry>
									<entry>
										Defines the location of DB Library to refer to to get Connection by accessing the relevant DB. 
										(Based on the absolute path or the location of the sample project, it can be defined as a relative path. When the relative path is defined, it should be defined in the types such as 
										'./src/main/..' and 'src/main/..' If it is defined in the type '/src/main/..', it may be recognized as an absolute path, and the relevant file may not be found.)
										It is recommended it be stored in the [sample project installation folder]/src/main/webapp/WEB-INF/lib folder so that DB Library can be recognized when the sample application is executed.
										
									</entry>
								</row>	
								<row>
									<entry>db.dialect</entry>
									<entry>Defines Hibernate Dialect class of the appropriate DB.</entry>
								</row>	
								<row>
									<entry>db.groupId</entry>
									<entry>Defines groupID of the Library of the appropriate DB that exisits in Maven Repository. (only when Maven is used.)</entry>							
								</row>		
								<row>
									<entry>db.artifactId</entry>
									<entry>Defines artifactId of the Librarhy of the appropriate DB that exists in Maven Repository. (only when Maven is used.)</entry>							
								</row>	
								<row>
									<entry>db.version</entry>
									<entry>Defines the version of the Library of the appropriate DB that exists in Maven Repository. (only when Maven is used.)</entry>							
								</row>	
								<row>
									<entry>db.schema.use</entry>
									<entry>a property that needs to be defined when the appropriate DB is Sybase DB. It defines whether the DB Schema information will be used when User information is set.
										Yet, it should be noted that depending on the version of Sybase, the property value can be changed. (default=false)
									</entry>								
								</row>																																																																						
							</tbody>
						</tgroup>
					</informaltable>
				</para>				
			</listitem>
			<listitem>
				<para>
					All the DB-related resources of the plugins installed thus far can be modified in line with the DB information modified previously by opening the Command window and entering Maven command as follows, moving to the location of the sample project. 
					
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:change-db]]></programlisting>
			</listitem>
			<listitem>
				<para>
					Check whether the DB-related properteis have been properly changed.
				</para>
				<para>
					Check whether the properties of DataSource Service within the project codes and the information related to Hibernate and Query Service have been changed. 
				</para>
			</listitem>
		</orderedlist>		
		
	</section>
	
	<section id="commands_maven_source_domain">
		<title>Domain source code generation</title>
		<para>
			It is a newly added function since Anyframe 4.6.0, and it can generate Domain class based on the DB table created for the application to be newly developed 
			in addition to installing the plugins that are already made and provided. 
			(Since only the basic usage of Command is mentioned in the following explanation, for details on Anyframe Commmand Option, refer to the explanation on the relevant Command presented in <link linkend="commands_maven_commands_list">Command list</link>.)
		</para>
		<para>
			Let us generate Domain class for all the tables included in SampleDB provided by Anyframe.
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					The Domain class that is mapped with a specific table can be generated by opening the Command window and entering the following Maven command, moving to the location of the sample project.
					
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:create-model]]></programlisting>
				<itemizedlist>
					<listitem>
						<para>e.g. mvn anyframe:create-model -Dtable="*" -Dpackage=com.sds.emp.domain</para>
						<para>
							The example above is a command that generates Domain Class for all tables in the domain package under the main package (e.g. com.sds.emp) designated when the project is made. 
							
						</para>
					</listitem>
				</itemizedlist>
				<para>
					When it is wanted that the domain class is generated only for specific tables, not for all the tables that belong to the relevant DB, -Dtable={table name} can be directly input as follows. 
					
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:create-model -Dtable=BOARD_MASTER,BOARD]]></programlisting>
				<para>
					Also, when there is a domain class that was already generated in the relevant table, it will be asked whether to overwrite as follows. If it is not wanted to overwrite, 
					generating the Domain class can be stopped by entering "N".
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/maven/create_model_overwrite.jpg"
								align="center" />
						</imageobject>					
					</mediaobject>
				</para>					
			</listitem>
			<listitem>
				<para>Check whether the Domain class has been properly generated.</para>
				<para>
					If the domain class with the table name that applied camelcase exists within the package designated when the Domain class is generated, it is properly generated. 
					The following is part of the Board.java code that is mapped with the BOARD table.
				</para>
				<programlisting language="java">@Entity
@Table(name = "BOARD")
<emphasis role="bold">//The property of schema of @Table is defined 
//when sybase DB and hibernate dao framework are used, using the default template.
//The property of catalog of @Table is defined when there is catalog information.</emphasis>
public class Board implements Serializable {
    private BoardId id = new BoardId();
    private BoardMaster boardMaster;
    private String boardName;
    ...
    public BoardId getId() {
        return this.id;
    }
    public void setId(BoardId id) {
        this.id = id;
    }
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BOARD_MASTER_ID", nullable = false, 
                insertable = false, updatable = false)
    public BoardMaster getBoardMaster() {
        return this.boardMaster;
    }
    public void setBoardMaster(BoardMaster boardMaster) {
        this.boardMaster = boardMaster;
    }
    @Column(name = "BOARD_NAME", nullable = false, length = 150)
    public String getBoardName() {
        return this.boardName;
    }
    public void setBoardName(String boardName) {
        this.boardName = boardName;
    }	  
}</programlisting>					
			</listitem>
			<listitem>
				<para>For the domain class source codes generated automatically, template files can be modified according to each developer or the status of the project.</para>
				<para>
					For details on extention of the template, refer to <link linkend="commands_maven_source_crud_template_customizing">Template Customizing</link>. 
					In the case of Maven, template files, which exist in '{user.home}/.anyframe/templates' directory,  
					and the template files on Domain class among them, which are in the [template name]/source/model folder under templates, can be used for modification. (Pojo.ftl, etc.)
				</para>
			</listitem>
		</orderedlist>
	</section>
		
	<section id="commands_maven_source_crud">
		<title>CRUD source code generation</title>
		<para>
			Through the Domain class generated based on the DB table, the source codes that perform the basic CRUD functions can be generated.
			(Since the following explanation only mentions basic usage of Command, for details on Anyframe Commmand Option, refer to the explanation of the relevant Command presented in <link linkend="commands_maven_commands_list">Command list</link>.)
		</para>
		<para>
			Let us generate CRUD source code, selecting one of the domain classes generated previously.
		</para>
		<orderedlist numeration="arabic" inheritnum="inherit">
			<listitem>
				<para>
					The source codes that perform basic CRUD functions for a specific domain can be generated by opening the Command window and entering the following Maven command, moving to the location of the sample project.  
					Also, using the package option, the package of the CRUD-related codes to be generated can be designated.
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:create-crud -Dentity=...]]></programlisting>
				<para>
					For example, when 'mvn anyframe:create-crud -Dentity=Board' is executed, the source codes that can CRUD the Board object are generated. 
				</para>	
				<para>
					When there are CRUD source codes already generated in the relevant Domain class, it will be asked whether to overwrite as follows. 
					If it is not wanted to overwrite, generation of CRUD source codes can be stopped by entering "N".
				
				</para>
				<para>	
					<mediaobject>
						<imageobject>
							<imagedata fileref="../image/commands/maven/create_crud_overwrite.jpg"
								align="center" />
						</imageobject>					
					</mediaobject>
				</para>
				<para>
					Also, it is wanted that only the business layer codes are generated, the command can be executed by adding the -scope option as follows.
				</para>
				<programlisting language="java"><![CDATA[mvn anyframe:create-crud -Dentity=Board -Dscope=service]]></programlisting>
				<para>
					For details on the scope option, refer to <link linkend="commands_maven_commands_list">Command list</link>.
				</para>
			</listitem>			
			<listitem>
				<para>
					Check whether the business layer codes (service interface, service implementation class, DAO implementation class, etc.) have been properly generated. 
				</para>
				<para>The following is part of java codes and properties file generated based on the domain class Board.java.</para>	
				<itemizedlist>
					<listitem>
						<para>Service interface (src/main/java/{main package}/{package}/service/{Entity class name}Service.java)</para>
						<programlisting language="java">public interface BoardService{
    void create(Board board) throws Exception;
    void remove(BoardId id) throws Exception;				
    ...        
}</programlisting>
					</listitem>
					<listitem>
						<para>Service implementation class (src/main/java/{main package}/{package}/service/impl/{Entity class name}ServiceImpl.java)</para>
						<programlisting language="java">@Service("boardService")
@Transactional(rollbackFor = {Exception.class}, propagation = Propagation.REQUIRED)
public class BoardServiceImpl implements BoardService {
	    
    @Inject
    @Named("boardDao")
    private BoardDao boardDao;
	    
    public void create(Board board) throws Exception {
        this.boardDao.create(board);
    }
        
    public void remove(BoardId id) throws Exception {
        this.boardDao.remove(id);
    }
    ...        
}</programlisting>
					</listitem>						
					<listitem>
						<para>DAO class (src/main/java/{main package}/{package}/service/impl/{Entity class name}Dao.java)</para>
					<programlisting language="java">@Repository("boardDao")
public class BoardDao extends SimpleJdbcDaoSupport {

    @Value("#{contextProperties['pageSize'] ?: 10}")
    int pageSize;
    
    @Value("#{contextProperties['pageUnit'] ?: 10}")
    int pageUnit;
    
    @Inject
    public void setJdbcDaoDataSource(DataSource dataSource) throws Exception {
        super.setDataSource(dataSource);
    }
    
    public void create(Board board) throws Exception {
        String sql = "INSERT INTO BOARD (BOARD_ID, BOARD_DESC, BOARD_MASTER_ID, BOARD_NAME, BOARD_ORDER, BOARD_TOPICS, REG_DATE) "
                              + "VALUES (?, ?, ?, ?, ?, ?, ?)";
        this.getSimpleJdbcTemplate().update(
                                    sql,
                                    new Object[] {board.getId().getBoardId(), board.getBoardDesc(), board.getId().getBoardMasterId(), 
                                    board.getBoardName(), board.getBoardOrder(), board.getBoardTopics(), board.getRegDate()});
    }
        
    public void remove(BoardId id) throws Exception {
        String sql = "DELETE FROM BOARD WHERE BOARD_ID = ? AND BOARD_MASTER_ID = ?";
        this.getSimpleJdbcTemplate().update(sql, new Object[] {id.getBoardId(), id.getBoardMasterId()});
    }
    ...
}</programlisting>
					</listitem>
					<listitem>
						<para>MessageSoruce (src/main/resources/message/message-generation.properties)</para>
						<programlisting># -- Board-START
board.id.boardId=Board Id		
board.id.boardMasterId=Board Master Id		
board.boardDesc=Board Desc
board.boardName=Board Name
board.boardOrder=Board Order
board.boardTopics=Board Topics
board.regDate=Reg Date

# -- success messages -- 
success.board.create=Board has been added successfully.
success.board.update=Board has been updated successfully.
success.board.delete=Board has been deleted successfully.

# -- error messages --
error.boardserviceimpl.create=Board data not created
error.boardserviceimpl.create.solution=Enter correct data for mandatory field 
or enter data according to formats means date format as yyyy-mm-dd
error.boardserviceimpl.create.reason=Entered incorrect data for Board
...</programlisting>
					</listitem>
					<listitem>
						<para>Integrated test case (src/test/java/{main package}/{package}/service/{Entity class name}ServiceTest.java)</para>
						<programlisting language="java">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "file:./src/main/resources/spring/context-*.xml" })
public class BoardServiceTest{

    @Inject
    @Named("boardService")
    private BoardService boardService;

    @Test
    @Rollback(value=true)    
    public void manageBoard() throws Exception {
        //1. create a new board
        Board board = getBoard();            
        
        if(boardService.get(board.getId()) != null)
            boardService.remove(board.getId());
        
        boardService.create(board);
        ...
    }
    ...
}</programlisting>
					</listitem>						
				</itemizedlist>	
				<note>
					<title>Notes</title>
					<para>
						When the project.daoframework value has not been changed in META-INF/project.mf, the basic DAO Framework is set as springjdbc. 
						(The DAO implementation class shown above is when it is set as springjdbc.) 
						There are springjdbc, query, hibernate, and ibatis2 as DAO Framework that can be set.
					</para>
					<para>
						When the project.daoframework value is set as "hibernate" in META-INF/project.mf, and Hibernate is adopted as DAO Framework,
						the generated CRUD source codes will use Hibernate. Yet, only when Anyframe Hibernate Plugin has been installed, the generated codes can run properly.
					</para>
					<para>
						Likewise, when it is wanted to set the template type of the source codes to be generated through Anyframe IDE as the value other than the default value,   
						the generated project can run properly only when related Anyframe Plugins have been installed.
					</para>
					<para>
						For example, when it is wanted that the source codes are generated using 'miplatform' as Template type, the value of project.template of the project configuration file (project.mf) should be changed into miplatform, 
						and also Anyframe's miplatform Plugin should be installed.
					</para>
				</note>
			</listitem>
			<listitem>
				<para>Check whether the presentation layer code (controller class, JSP, etc. to communicate with the business service) has been properly generated.</para>
				<para>The following is part of the controller, JSP, etc. generated based on the domain class Board.java.</para>	
				<itemizedlist>
					<listitem>
						<para>Controller (src/main/java/{main package}/{package}/web/{Entity class name}Controller.java)</para>
						<programlisting language="java">@Controller
@RequestMapping("/board.do")
public class BoardController {

    @Inject
    @Named("boardService")
    private BoardService boardService;

    ...    

    @RequestMapping(params = "method=createView")  
    public String createView(Model model) throws Exception {
        model.addAttribute(new Board());

        return "generation/board/form";        
    }
}</programlisting>
					</listitem>
					<listitem>
						<para>JSP (src/main/webapp/WEB-INF/jsp/generation/{Entity class name (lower case)}/*.jsp)</para>
						<programlisting><![CDATA[<%@ page language="java" errorPage="/sample/common/error.jsp" pageEncoding="UTF-8" contentType="text/html;charset=utf-8" %>
<%@ include file="/sample/common/top.jsp"%>
		<div class="location"><a href="<c:url value='/anyframe.jsp'/>">Home</a> &gt; <a href="<c:url value='/boardF.do?method=list'/>">Board</a></div>
    </div>
    <hr />
<script type="text/javascript" src="<c:url value='/sample/javascript/CommonScript.js'/>"></script>    
<script type="text/javascript">
	function fncCreateBoardView() {
		document.location.href="<c:url value='/board.do?method=createView'/>";
	}	
...]]></programlisting>
					</listitem>
					<listitem>
						<para>Unit test case (src/test/java/{main package}/{package}/web/{Entity class name}ControllerTest.java)</para>
						<programlisting language="java">@RunWith(JMock.class)
public class BoardControllerTest {

    private BoardController controller;
    private String SUCCESS_CREATEVIEW = "generation/board/form";
    private String SUCCESS_CREATE = "redirect:/board.do?method=list";
    private String SUCCESS_GET = "generation/board/form";
    private String SUCCESS_UPDATE = "redirect:/board.do?method=list";
    private String SUCCESS_LIST = "generation/board/list";
    private String SUCCESS_REMOVE = "redirect:/board.do?method=list";
    private Mockery context = new JUnit4Mockery();
    private BoardService mockService = null;
	
    @Before   
    public void setUp() throws Exception {
        System.setProperty("log4j.configuration", "log4j-test.xml");

        this.mockService = context.mock(BoardService.class);                
        this.controller = new BoardController();
        this.controller.setBoardService(this.mockService);       
    }
    
    public void setBoardController(BoardController controller) {
        this.controller = controller;
    }
        
    @Test
    public void testCreateView() throws Exception{
        String viewName = this.controller.createView(new ExtendedModelMap());
        
        assertEquals("returned correct view name", SUCCESS_CREATEVIEW, viewName);
   }
...</programlisting>
					</listitem>
				</itemizedlist>
			</listitem>
			<note>
				<title>In case CRUD source codes are not generated automatically</title>
				<para>
					If CRUD source codes are not properly generated, there can be problems in the source code template file 
					that exists in {user.home}/.anyframe/templates. Thus, it is recommended that anyframe:create-crud command be executed again after this directory is deleted.
				</para>
			</note>
			<listitem>
				<para>
					After the CRUD source codes are generated, check whether they run properly by referring to <link linkend="commands_maven_run">application execution</link>. 
				</para>
			</listitem>				
		</orderedlist>
		<warning>
			<title>Notes</title>
			<para>
			In the case of <emphasis role="bold">service-type project</emphasis> generated by anyframe-service-archetype, 
			related spring configuration file (context-*.xml) is not installed when hibernate or miplatform plugins are installed. 
			Therefore, when source codes are generated with dao framework set as hibernate, or miplatform selected for the source code template type, 
			the related property file does not exist and error occur when the automatically generated test case is executed.
			If the error "Fail to ApplicationContext..." occurs, the spring configuration file in hibernate or miplatform plugin should be added.
			</para>
		</warning>
		
		<section id="commands_maven_source_crud_note">
			<title>Tip for solving errors that occur during runtime after generation of CRUD source codes</title>
			<para>Let us check the solutions for the problems that can occur during runtime even though CRUD source codes have been properly generated.</para>
			<itemizedlist>
			  <listitem><para>When there is timestamp-type data when map source code template + oracle DB + query dao framework are used</para>
			  	<itemizedlist>
				  <listitem><para>status) The 'ORA-01843 : not a valid month' error occurs curing create/update in the create/update page.</para></listitem>
				  <listitem><para>cause) The timestamp-type format should be assigned in the query statement.</para></listitem>
				  <listitem><para>solution)Apply the following format in the timestamp-type column of the create/update query.</para>
				  <programlisting language="xml"><![CDATA[to_timestamp(timestamp type column,'yyyy-mm-dd hh24:mi:ssxff')]]></programlisting>
				  </listitem>				  
				</itemizedlist>
			  </listitem>
			  <listitem><para>When there is bit-type data when map source code template + hsqldb DB are used</para>
			  	<itemizedlist>
				  <listitem><para>status) The 'java.sql.SQLException' error occurs during create/update on the create/update page.</para></listitem>
				  <listitem><para>cause) The value of the bit-type column should be stored as 1 or 0 in DB, but since true/false (or null) value is used on the view, invalid character value for cast exception occurs.</para></listitem>
				  <listitem><para>solution) The logic that changes the value transferred as true/false (or null) by controller or service for the bit-type column to 1 or 0 should be added.</para>
				  <programlisting><![CDATA[// when j column is in the bit type						
if (hashMapModel.getMap().get("j") != null && hashMapModel.getMap().get("j").equals("true"))
    hashMapModel.getMap().put("j", "1");
else
    hashMapModel.getMap().put("j", "0");]]></programlisting>
				  </listitem>
				</itemizedlist>
			  </listitem>
			  <listitem><para>When there is time-type data</para>
			  	<itemizedlist>
				  <listitem><para>status) The 'Fail to convert' error occurs during create/update on the create/update page.</para></listitem>
				  <listitem><para>cause) Since the Time-type data (hour:minute:second) is put as String in the request parameter, data binding is not carried out when it is bound with Domain class.</para></listitem>
				  <listitem><para>solution) Use the time-type column in the Domain class declaring it as the string type.</para></listitem>
				</itemizedlist>
			  </listitem>
			</itemizedlist>
		</section>
		
		<section id="commands_maven_source_crud_template_customizing">
			<title>Template Customizing</title>
		
			<para>
				In the case of Maven, template files, which exist in '{user.home}/.anyframe/templates' directory, and  
					 the template files related to CRUD source code generation, which are in the [template name]/source folder under templates, can be used for modification.
					
				In the templates folder, it can be seen that there are default, map, 
				and miplatform folders and under them are source folders for each as below.
			</para>
			<para>
				Extending source code templates means that the domain class generated by Anyframe IDE and CRUD source codes can be modified and used 
				according to each developer or the status of the project, and here source code templates can be extended by modifying FreeMarker Template.
				For details on FreeMarker, refer to <ulink url="http://freemarker.org/">FreeMarker site</ulink>.
				
			</para>
			<para>
				The method of extending source code templates is the same regardless of the project type (Web/Service) information. 
				Yet, type information should be divided separately when the template file list is made. 
			</para>
		
			<section id="templatesextensions_sourcecode_sec001">
				<title>Template folder generation</title>
				<para>
					The templates for source codes generated automatically by modifying FreeMarker Template(*.ftl) files can be extended.
					Let us create the ext template by extending the default template. 
					Copy the whole [Template Home]/default folder and make [Template Home]/ext folder by changing the name to ext. 
					Check whether there is template.config file under the [Template Home]/ext/source folder.
				</para>
			</section>
			<section id="templatesextensions_sourcecode_sec002">
				<title>Template file list generation (template.config)</title>
				<para>
					Open template.config file and make the list of template files necessary to create source codes. 
					The information written in template.config file is the information on the list of code templates necessary when source codes are generated. 
					The template information provided by the default template is shown in the following table. 
					It is explanation on the template files for each type, and only when it is written as a template list in the template.config file, 
					the result code is generated when CRUD source codes are generated. 
					The service type template is a template used when the Business Layer codes are generated, 
					and the web type template is used when the Presentation Layer codes are generated.
				</para>
				<para>
					The following contents should be written when the template information is registered in the template.config file.
				</para>
				<itemizedlist>
					<listitem>
						<para>type: service, web type</para>
					</listitem>
					<listitem>
						<para>ftl: freemarker template file</para>
					</listitem>
					<listitem>
						<para>src: file name of the source codes to be generated</para>
						<itemizedlist>
							<listitem><para>{basepkg-name}: main package</para></listitem>
							<listitem><para>{class-name}: entity class name</para></listitem>
						</itemizedlist>		
					</listitem>
					<listitem>
						<para>mergeSrc: name of the file that will reflect the generated source codes</para>
					</listitem>
					<listitem>
						<para>mergeKey: location information key that will reflect the generated source codes</para>
					</listitem>
					<listitem>
						<para>share: set whether sample db data is shared as true or false</para>
					</listitem>
					<listitem>
						<para>dao: set dao framework among springjdbc, query, hibernate and ibatis2  dao framework</para>
					</listitem>
					<listitem>
						<para>description: explanation on templates</para>
					</listitem>
				</itemizedlist>
				<table>
					<title>Examples of Service Type template configuration (source codes)</title>
		
					<tgroup cols="8">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="1*"/>
						<colspec colnum="3" colname="col3" colwidth="2*"/>
						<colspec colnum="4" colname="col4" colwidth="2*"/>
						<colspec colnum="5" colname="col5" colwidth="2*"/>
						<colspec colnum="6" colname="col6" colwidth="1*"/>
						<colspec colnum="7" colname="col7" colwidth="1*"/>
						<colspec colnum="8" colname="col8" colwidth="2*"/>
						<thead>
							<row>
								<entry align="center">type</entry>
								<entry align="center">ftl</entry>
								<entry align="center">src</entry>
								<entry align="center">mergeSrc</entry>
								<entry align="center">mergeKey</entry>
								<entry align="center">share</entry>
								<entry align="center">dao</entry>
								<entry align="center">description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>service</entry>
								<entry>service/service-test.ftl</entry>
								<entry>src/test/java/{basepkg-name}/service/{class-name}ServiceTest.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>true</entry>
								<entry>N/A</entry>
								<entry>Integrated test case for service</entry>
							</row>
							<row>
								<entry>service</entry>
								<entry>service/service.ftl</entry>
								<entry>src/main/java/{basepkg-name}/service/{class-name}Service.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>service interface class</entry>
							</row>
							<row>
								<entry>service</entry>
								<entry>service/service-impl.ftl</entry>
								<entry>src/main/java/{basepkg-name}/service/impl/{class-name}ServiceImpl.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>service implementation class</entry>
							</row>
							<row>
								<entry>service</entry>
								<entry>dao/springjdbc/dao.ftl</entry>
								<entry>src/main/java/{basepkg-name}/service/impl/{class-name}Dao.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>springjdbc</entry>
								<entry>spring jdbc dao implementation class</entry>
							</row>					
							<row>
								<entry>service</entry>
								<entry>dao/hibernate/dao.ftl</entry>
								<entry>src/main/java/{basepkg-name}/service/impl/{class-name}Dao.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>hibernate</entry>
								<entry>hibernate dao implementation class</entry>
							</row>
							<row>
								<entry>service</entry>
								<entry>dao/query/dao.ftl</entry>
								<entry>src/main/java/{basepkg-name}/service/impl/{class-name}Dao.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>query</entry>
								<entry>query dao implementation class</entry>
							</row>
							<row>
								<entry>service</entry>
								<entry>dao/ibatis2/dao.ftl</entry>
								<entry>src/main/java/{basepkg-name}/service/impl/{class-name}Dao.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>ibatis2</entry>
								<entry>ibatis2 dao implementation class</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
				<table>
					<title>Examples of Service Type template configuration (configuration files)</title>
		
					<tgroup cols="8">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="1*"/>
						<colspec colnum="3" colname="col3" colwidth="2*"/>
						<colspec colnum="4" colname="col4" colwidth="2*"/>
						<colspec colnum="5" colname="col5" colwidth="2*"/>
						<colspec colnum="6" colname="col6" colwidth="1*"/>
						<colspec colnum="7" colname="col7" colwidth="1*"/>
						<colspec colnum="8" colname="col8" colwidth="2*"/>
						<thead>
							<row>
								<entry align="center">type</entry>
								<entry align="center">ftl</entry>
								<entry align="center">src</entry>
								<entry align="center">mergeSrc</entry>
								<entry align="center">mergeKey</entry>
								<entry align="center">share</entry>
								<entry align="center">dao</entry>
								<entry align="center">description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>service</entry>
								<entry>dao/sample-data.ftl</entry>
								<entry>merge/{class-name}-sample-data.xml</entry>
								<entry>/src/test/resources/sample-data.xml</entry>
								<entry>&lt;!--{class-name}-START--&gt;</entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>test sample db data</entry>
							</row>
							<row>
								<entry>service</entry>
								<entry>dao/hibernate/dynamic-hibernate.ftl</entry>
								<entry>src/main/resources/hibernate/dynamic-hibernate-{class-name}.xml
								</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>hibernate</entry>
								<entry>hibernate dynamic hql mapping xml file</entry>
							</row>
							<row>
								<entry>service</entry>
								<entry>dao/query/mapping-query.ftl</entry>
								<entry>src/main/resources/sql/query/mapping-query-{class-name-lower}.xml
								</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>query</entry>
								<entry>query service mapping xml file</entry>
							</row>					
							<row>
								<entry>service</entry>
								<entry>web/ApplicationResources.ftl</entry>
								<entry>merge/{class-name}-ApplicationResources.properties</entry>
								<entry>/src/main/resources/message/message-generation.properties</entry>
								<entry># -- {class-name}-START</entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>message source properties file</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
		
				<table>
					<title>Examples of Web Type template configuration</title>
		
					<tgroup cols="8">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="1*"/>
						<colspec colnum="3" colname="col3" colwidth="2*"/>
						<colspec colnum="4" colname="col4" colwidth="2*"/>
						<colspec colnum="5" colname="col5" colwidth="2*"/>
						<colspec colnum="6" colname="col6" colwidth="1*"/>
						<colspec colnum="7" colname="col7" colwidth="1*"/>
						<colspec colnum="8" colname="col8" colwidth="2*"/>
						<thead>
							<row>
								<entry align="center">type</entry>
								<entry align="center">ftl</entry>
								<entry align="center">src</entry>
								<entry align="center">mergeSrc</entry>
								<entry align="center">mergeKey</entry>
								<entry align="center">share</entry>
								<entry align="center">dao</entry>
								<entry align="center">description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>web</entry>
								<entry>web/spring/controller-test.ftl</entry>
								<entry>src/test/java/{basepkg-name}/web/{class-name}ControllerTest.java</entry>
								<entry></entry>
								<entry></entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>spring mvc controller class test case</entry>
							</row>
							<row>
								<entry>
									web
										</entry>
								<entry>
									web/spring/controller.ftl											
										</entry>
								<entry>src/main/java/{basepkg-name}/web/{class-name}
									Controller.java
										</entry>
										<entry></entry>
										<entry></entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>spring mvc controller class</entry>
							</row>
							<row>
								<entry>
									web
										</entry>
								<entry>
		
									web/spring/list-view.ftl
													
										</entry>
								<entry>src/main/webapp/WEB-INF/jsp/generation/{class-name-lower}/list.jsp
								</entry>
								<entry></entry>
										<entry></entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>list view jsp page</entry>
							</row>
							<row>
								<entry>
									web
										</entry>
								<entry>
		
									web/spring/form-view.ftl
													
										</entry>
								<entry>src/main/webapp/WEB-INF/jsp/generation/{class-name-lower}/form.jsp
								</entry>
								<entry></entry>
										<entry></entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>detail view jsp page</entry>
							</row>
							<row>
								<entry>
									web
										</entry>
								<entry>
		
									web/menu.ftl
													
										</entry>
								<entry>merge/{class-name}-menu.jsp
										</entry>
										<entry>/src/main/webapp/sample/layouts/gen/left-gen.jsp</entry>
										<entry>&lt;!--{class-name}-START--&gt;</entry>
								<entry>false</entry>
								<entry>N/A</entry>
								<entry>menu jsp page</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
		
			</section>


			<section id="templatesextensions_sourcecode_sec003">
				<title>Template file (*.ftl) modification</title>
				<para>
					Select and modify the ftl files to extend under the [Template Home]/ext/source folder.
					
						</para>
				<para>
					The ftl files under source folder can be grouped into wanted folders. 
					Currently, there are four folders (model, service, dao and web)as can be seen in the table below, and they can be changed as wanted. 
					Yet, when the folder name and the ftl file name are changed, the contents of the ftl item within template. config file explained above should also be changed.
					
				</para>
				<table >
					<title>template folder</title>
					<tgroup cols="2">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="5*"/>
						<thead>
							<row>
								<entry align="center">folder name</entry>
								<entry align="center">description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									model
										</entry>
								<entry>
									Has ftls used when the domain class is generated
										</entry>
							</row>
							<row>
								<entry>
									service
										</entry>
								<entry>
									Has service class/test case and Spring bean configuration file ftls
										</entry>
							</row>
							<row>
								<entry>
									dao
										</entry>
								<entry>
									Has sample data, hibernate/query dao classes and Spring bean configuration file ftls
										</entry>
							</row>
							<row>
								<entry>
									web
										</entry>
								<entry>
									Has menu, message resource, spring mvc class/test case, Spring bean configuration file, and JSP ftls
									
										</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>
					For example, let us add methods other than basic CRUD methods when service is generated. 
						</para>
				<itemizedlist>
					<listitem>
						<para>
							Open [Template Home]/ext/source/service/service.ftl file and add getProcedureList method as follows.
							
								</para>
						<para>
							It should be noted that since the return type of getProcedureList is List, an import statement should be added at the top of the class.
							
								</para>
						<programlisting><![CDATA[package ${package}.service;

]]><emphasis role="bold">import java.util.List;</emphasis><![CDATA[

import anyframe.common.Page;
import anyframe.common.util.SearchVO;
...
import ${pojo.packageName}.${pojo.shortName};


public interface ${pojo.shortName}Service{

	void create(${pojo.shortName} ${pojoNameLower}) throws Exception;     
	]]><emphasis role="bold">List getProcedureList(SearchVO searchVO) throws Exception;</emphasis><![CDATA[   
}]]></programlisting>
						<para>
							In this ftl statement, the names of class, method, etc. or the contents can be changed. 
							It should be noted that when the contents of service interface(service.ftl) class is modified, 
							the contents on service implementation(service-impl.ftl) class should also be modified. 
							</para>
					</listitem>
					<listitem>
						<para>
							Open [Template Home]/ext/source/service/service-impl.ftl file and add getProcedureList method. 
							
								</para>
						<para>
							It should be noted that since the return type of getProcedureList is List, the import statement should be added at the top of the class.
							
								</para>
						<programlisting><![CDATA[<#assign pojoNameLower = pojo.shortName.substring(0,1).toLowerCase()+
	pojo.shortName.substring(1)>
package ${package}.service.impl;

]]><emphasis role="bold">import java.util.List;</emphasis><![CDATA[
import anyframe.common.Page;
import anyframe.common.util.SearchVO;
import ${package}.service.${pojo.shortName}Service;
중략...
public class ${pojo.shortName}ServiceImpl implements ${pojo.shortName}Service {
  
    @Inject
    @Named("${pojoNameLower}Dao")
    ${pojo.shortName}Dao ${pojoNameLower}Dao;

    public void create(${pojo.shortName} ${pojoNameLower}) throws Exception {
        this.${pojoNameLower}Dao.create(${pojoNameLower});
    }	       
	
    ]]><emphasis role="bold">public List getProcedureList(SearchVO searchVO) throws Exception{
    중략...
    }
	</emphasis><![CDATA[   
}]]></programlisting>
					</listitem>
				</itemizedlist>
		
			</section>
		
			<section id="templatesextensions_sourcecode_sec004">
				<title>Template file (*.ftl) parameters</title>
				<para>
					To modify template files (*.ftl), the names of class or method can be changed by changing the general string itself, 
					and using the parameters that are used in the template files (${parameter name}), templates can be extended more variously when modified.
				</para>
				<para>The following is a table of explanation on the parameters used frequently in template files.  
				</para>
		
				<table>
					<title>List of parameters in FTL files</title>
		
					<tgroup cols="2">
						<thead>
							<row>
								<entry align="center">name</entry>
								<entry align="center">description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									pojo.shortName
								</entry>
								<entry>
									Name of the domain class to be CRUD (e.g. Board)
								</entry>
							</row>
							<row>
								<entry>
									pojoNameLower
								</entry>
								<entry>
									Lower case type of the name of the domain class to be CRUD (e.g. board)
								</entry>
							</row>
							<row>
								<entry>
									pojo.packageName
								</entry>
								<entry>
									Name of the package of the domain class to be CRUD
								</entry>
							</row>
							<row>
								<entry>
									package
								</entry>
								<entry>
									Parent package of the class generated when sources codes are made. Name of the main package of the application.
								</entry>
							</row>
							<row>
								<entry>
									pojo.identifierProperty.name
								</entry>
								<entry>
									Property name which is the Primary Key of Domain Class
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
		
				<para> The following is the table of explanation on the logic used through Freemarker statement in the template file used as below.
					It is used in <![CDATA[<# />]]> statement.
					
				</para>
				<para>
					For FreeMarker grammar such as foreach, if, lt and assign, refer to <ulink url="http://freemarker.org/"> FreeMarker site</ulink>.
					
				</para>
				<programlisting><![CDATA[<#foreach field in pojo.getAllPropertiesIterator()>    
    <#foreach column in field.getColumnIterator()>
        <#if field.equals(pojo.identifierProperty) && !column.nullable 
            && !c2h.isCollection(field) && !c2h.isManyToOne(field) 
            && !c2j.isComponent(field)>
            <#lt/><form:option value="${field.name}">
            <anyframe:message code="${pojoNameLower}.${field.name}"/>
            </form:option>     
        </#if>
    </#foreach>    
    <#if field.equals(pojo.identifierProperty) && !c2h.isCollection(field) 
 	    && !c2h.isManyToOne(field) && c2j.isComponent(field)>
       <#lt/>       
       <#assign pojoIdentifier = pojo.identifierProperty.getValue() >       		
       <#foreach idfield in pojoIdentifier.getPropertyIterator()>               		 	
           <#lt/><form:option value="${field.name}.${idfield.name}">
           <anyframe:message code="${pojoNameLower}.${field.name}.${idfield.name}"/>
           </form:option>            	
       </#foreach>     		
    </#if>
</#foreach>]]></programlisting>
				<table>
					<title>Logic within the FTL file</title>
		
					<tgroup cols="2">
						<thead>
							<row>
								<entry align="center">logic</entry>
								<entry align="center">description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									pojo.getAllPropertiesIterator()
								</entry>
								<entry>
									Returns all the property information of Domain Class
								</entry>
							</row>
							<row>
								<entry>
									c2j.isComponent(pojo.identifierProperty)
								</entry>
								<entry>
									Returns whether the property that is the Primary Key of Domain Class is composed of Composite Key Class
									
								</entry>
							</row>
							<row>
								<entry>
									c2j.isComponent(field)
								</entry>
								<entry>
									Returns whether the relevant field property of Domain Class is composed of primitive class, not primitive type
									
								</entry>
							</row>
							<row>
								<entry>
									c2h.isCollection(field)
								</entry>
								<entry>
									Returns whether the relevant field property of Domain Class is composed of Collection Class
								</entry>
							</row>
							<row>
								<entry>
									c2h.isManyToOne(field)
								</entry>
								<entry>
									Returns whether the relevant field property of Domain Class is in many to one relations
								</entry>
							</row>
							<row>
								<entry>
									dbdata.getSampleDataSet(pojo)
								</entry>
								<entry>
									Returns the sample data value, which is the value of the column of each DB table
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<note>
					<title>Notes</title>
					<para>
				    pojo(POJOClass), c2j(Cfg2JavaTool), c2h(Cfg2HbmTool), data(AnyframeDataHelper), dbdata(AnyframeDBData) and util(StringUtils) are 
					parameters that enable executing logic by calling the methods of each class in template files 
					and are set in Anyframe IDE. 
					Write them by referring to the use in the template files currently provided. 
						</para>
				</note>		
			</section>
		
			<section id="templatesextensions_sourcecode_sec005">
				<title>Applicatino of changed template files (*.ftl)</title>
				<para>
					Try using extended ftl files when creating actual CRUD source codes.</para>
				<para>
					Check whether the template files changed by CRUD source codes generated using CLI or Eclipse Plugin tools 
					have been properly reflected.
					When source codes are generated, there should be no errors, and applications should run propery when executed.
				</para>
			</section>
		</section>
	</section>
	
	<section id="commands_maven_inplace">
		<title>Downloading of reference libraries</title>
		<para>
			Maven-based projects define dependency libraries referenced by the projects in pom.xml, and execute build with the binary files of actual libraries existing in Maven Local Repository.
		</para>
		<para>
			When the following command is executed, all the dependency libraries defined in pom.xml are downloaded in WEB-INF/lib folder.
		</para>
		<programlisting language="java"><![CDATA[mvn anyframe:inplace]]></programlisting>
	</section>
	
	<section id="commands_maven_run">
		<title>Execution of applications</title>
		<para>
			To check whether the sample applications created after installation of a certain Plugin or as a result of automatic code generation properly operate,  
			enter the command directly in the Command window or use Eclipse.	
		</para>	
		<para>
			The following paragraphs explain how to start sample applications entering Maven Command directly or using Eclipse.
			(In this document, the explanation is based on Jetty and Tomcat.)
		</para>		
		<para>
			To check whether sample applications run properly, the DB to be used should be started first. 
			Sample projects created by installing Anyframe Plugin are basically constituted to use hsqldb. 
			Therefore, start DB by double-clicking [sample project installation folder]/db/hsqldb/start.cmd (or start.sh) file.
			(To use a different DB other than hsqldb, refer to <link linkend="commands_maven_db">DB change</link>.)
			The sqltool.cmd (or sqltool.sh) file provided in [sample project installation folder]/db/hsqldb folder is provided to start SQL Editor for hsqldb. 
			It will be useful when you want to check the result of the DB process.
		</para>					
		<section id="commands_maven_run_jetty">
			<title>Execution of Jetty-based applications</title>
			<orderedlist numeration="arabic" inheritnum="inherit">
				<listitem>
					<para>
						The sample application can be started based on Jetty by opening the Command window and entering the following Maven command, moving to the sample project installation folder. 
						
					</para>
					<programlisting language="java"><![CDATA[mvn clean jetty:run]]></programlisting>
				</listitem>	
				<listitem>
					<para>
						If Jetty is executed properly, the INFO-level log named Started Jetty Server will be seen in the console window.
						(If a compiling error occurs due to JMock class in TestCase, stop Jetty Server using Ctrl+C key, 
						and execute Jetty again after installing test Plugin by executing 'mvn anyframe:install -Dname=test' in the Command window.) 
					</para>		
				</listitem>
				<listitem>
					<para>
						If WAS has been started properly, open the web browser and check whether the sample application runs properly by entering http://localhost:8080/myproject (http://localhost:8080/${sample project name}) in the address bar. 
						The following is the initial page of the sample application when only the core plugin has been installed.
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_initial.jpg"
									align="center" />
							</imageobject>
						</mediaobject>
					</para>
					<para>
						Every time Plugin is additionally installed, a link will be added in the Installed Plugins cell on the left of the table so that the samples of the added plugin can be checked. 
						If CRUD source codes are automatically generated, links that enables checking the created functions are added in Generated CRUD Codes cell on the right of the table. 
					</para>
					<para>
						The following is the page that appears when Core link is clicked. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_core_initial.jpg"
									align="center" />
							</imageobject>					
						</mediaobject>	
					</para>		
				</listitem>				
			</orderedlist>		
		</section>
		
		<section id="commands_maven_run_tomcat_m2eclipse">
			<title>Execution of applications based on Tomcat using Eclipse WTP and m2eclipse</title>
			<para>
				When you want to execute sample applications using Eclipse, it is recommended that you install m2eclipse plugin that supports performing Maven-related tasks in Eclipse. 
				If m2eclipse plugin has not been installed, it can be installed from Update Site (m2eclipse core update site : http://m2eclipse.sonatype.org/sites/m2e, m2eclipse extras update site : http://m2eclipse.sonatype.org/sites/m2e-extras).
				To execute sample applications using only Eclipse WTP, not installing m2eclipse plugin, refer to 
				<link linkend="commands_maven_run_tomcat_wtponly">executing applications based on Tomcat using only Eclipse WTP</link> in this document.
			</para>	
			<orderedlist numeration="arabic" inheritnum="inherit">
				<listitem>
					<para>
						Resolve compile errors related to the sample project by selecting Maven > Enable Dependency Management in the context menu by clicking the relevant project on the right button of the mouse after importing the installed sample project to Eclipse.
						(※ Sometimes after Enable Dependency Management has been applied, problems occur with the contents of src/main/resources are excluded in the project's Build Path. 
						In this case, select  src/main/resources의 'Excluded:**' in the Source tab by clicking the relevant project on the right button of the mouse and clicking the Build Path > Configure Build Path... menu in the context menu  
						and undo the exclude setting by clicking the Remove button on the right side. 
						Apply the same process for 'Exclude:**' of src/test/resources/ for TestCase to run properly.)
						(In case compile errors occur due to JMock class in TestCase, install test plugin by executing 'mvn anyframe:install -Dname=test' in the Command window, and Refresh the relevant project in Eclispe.)
					</para>
				</listitem>
				<listitem>
					<para>
						Then, check whether the sample application runs properly by deploying the application in Tomcat Server by clicking the relevant project on the right button of the mouse and selecting Run As > Run on Server in the context menu. 
						
					</para>
				</listitem>	
				<listitem>
					<para>
						The following is the first page of the sample application when only core plugin has been installed.
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_initial.jpg"
									align="center" />
							</imageobject>
						</mediaobject>
					</para>
					<para>
						Every time Plugin is installed additionally, a link will be added in the Installed Plugins cell on the left side of the table so that the samples of the added plugin can be checked.  
						When CRUD source codes are automatically generated, a link is added in the Generated CRUD Codes cell on the right side of the table through which the created functions can be checked. 
					</para>
					<para>
						The following is the page that appears when Core link is clicked. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_core_initial.jpg"
									align="center" />
							</imageobject>					
						</mediaobject>	
					</para>				
				</listitem>		
			</orderedlist>				
		</section>		
		
		<section id="commands_maven_run_tomcat_wtponly">
			<title>Executing Tomcat-based applications using only Eclipse WTP</title>
			<para>
				To execute sample applications in the general Dynamic Web Project type, not Maven Project, using only Eclipse WTP,  
				it is necessary to add necessary libraries in [sample project installation folder]/src/main/webapp/WEB-INF/lib folder so that the relevant application can recognize the reference libraries.
				
			</para>
			<orderedlist numeration="arabic" inheritnum="inherit">
				<listitem>
					<para>
						The libraries referenced by relevant applications can be copied in [sample project installation folder]/src/main/webapp/WEB-INF/lib folder by opening the Command window and entering the following Maven command, moving to the location of the sample project. 
						
					</para>
					<programlisting language="java"><![CDATA[mvn anyframe:inplace]]></programlisting>				
				</listitem>
				<listitem>
					<para>
						Check whether there are compile errors in the relevant project after importing the installed sample project to Eclipse. 
						Then check whether the sample application runs properly by deploying the application in Tomcat Server by clicking 
						the relevant project on the right button of the mouse and selecting Run As > Run on Server in the context menu.  
						
					</para>				
				</listitem>
				<listitem>
					<para>
						The following is the first page of the sample application when only core plugin has been installed. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_initial.jpg"
									align="center" />
							</imageobject>
						</mediaobject>
					</para>
					<para>
						Every time a Plugin is additionally installed, a link will be added in the Installed Plugins cell on the left side of the table 
						so that the samples of the added Plugin can be checked.  
						When CRUD source codes are automatically generated, a link added in the Generated CRUD Codes cell on the right side of the table through which created functions can be checked. 
					</para>
					<para>
						The following is the page that appears when Core link is clicked. 
					</para>
					<para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="../image/commands/maven/sample_core_initial.jpg"
									align="center" />
							</imageobject>					
						</mediaobject>	
					</para>				
				</listitem>
			</orderedlist>
			<para>
				Every time a certain plugin is installed/deleted in the sample application, changes occur in reference libraries. 
				Therefore, it should be noted taht <emphasis role="bold">Maven command (mvn anyframe:inplace) should be executed every time 
				to reflect the changes in the relevant application when Tomcat is executed using only Eclipse WTP</emphasis>. 
				
			</para>
		</section>	
		<para>
			Since the sample projects generated by installing the plugins provided by Anyframe are basically based on Maven, 
			the same functions supported by Maven can be executed. 
			For example, the test code in the sample project can be executed by executing a command such as 'mvn test',  
			and it is possible to package the sample project in the war type by executing a command such as 'mvn package'. 
			In addition, since definitions on various Reporting Plugins are included, 
			the result of analyzing the source coes included in the project currently developed can be received in the HTML type when a command such as 'mvn site' is executed.
		</para>					
	</section>
	
	<section id="commands_maven_activate_plugin">
		<title>Automatic generation of Plugin build file</title>
		<para>
			The project created by using the commands explained above can be registered as Anyframe Plugin. 
			For this, first a configuration file to build it as Anyframe Plugin is needed, 
			and a buid file with the default configuration value can be automatically generated using the activate-plugin command.
		</para>
		<programlisting language="java"><![CDATA[mvn anyframe:activate-plugin]]></programlisting>
		<para>
			When the command above is executed, plugin-build.xml file will be created under the new plugin project root folder.
		</para>
		<para>
			Details on generation and modification of Plugin build files are explained in <link linkend="plugins_creatingplugin_activate_plugin">Automatic generation and modification of plugin build files</link>.
		</para>
	</section>
	
	<section id="commands_maven_package_plugin">
		<title>Execution of Plugin packaging</title>
		<para>Plugin packaging can be conducted through package-plugin command based on the Plugin build file.</para>
		<programlisting language="java"><![CDATA[mvn anyframe:package-plugin]]></programlisting>
		<para>
			For details on Plugin packaging, refer to <link linkend="plugins_creatingplugin_activate_plugin">automatic generation and modification of Plugin build files</link>.
		</para>
	</section>
	
	<section id="commands_maven_install_pluginfile">
		<title>Deploying and checking Plugin in local environment</title>
		<para>Execute the following command to use the plugin file finished with packaging after deploying it in the local developer environment.</para>
		<programlisting language="java"><![CDATA[mvn anyframe:install-pluginfile]]></programlisting>
		<para>If the plugin has been properly deployed in the local environment, a newly registered plugin can be identified by executing mvn anyframe:list command.</para>
		<para>
			For details on deploying Plugin in local environment, refer to <link linkend="plugins_creatingplugin_install_plugin">Deploying and checking Plugin in local environment</link>.
		</para>
	</section>
	
	<section id="commands_maven_deploy_pluginfile">
		<title>Deploying and checking Plugin</title>
		<para>
			To share a new Plugin with others, it can be deployed in the remote Repository by executing deploy-pluginfile command. 
			If it is not deployed in Anyframe's remote Repository(http://dev.anyframejava.org/maven/repo), the repositoryId and url information of the wanted remote Repository should be designated as options when the command is executed.
		</para>
		<programlisting language="java"><![CDATA[mvn anyframe:deploy-pluginfile]]></programlisting>
		<para>
			For details on deploying Plugin, refer to <link linkend="plugins_creatingplugin_deploy_plugin">Deploying and checking Plugin</link>.
		</para>
	</section>
	
</chapter>