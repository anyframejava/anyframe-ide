#macro( getDomainNameLower $domainName )### START getDomainNameLower
${domainName.substring(0,1).toLowerCase()}${domainName.substring(1)}##
#end#### END getDomainNameLower
package ${package}.service.impl;

import java.util.List;

import org.anyframe.pagination.Page;
import org.anyframe.datatype.SearchVO;

import org.apache.ibatis.session.RowBounds;
import org.mybatis.spring.support.SqlSessionDaoSupport;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import ${domain.packageName}.${domain.name};

/**
 * ${domain.name}Dao implementation class with mybatis
 * @author $author
 */
@Repository("#getDomainNameLower(${domain.name})Dao")
public class ${domain.name}Dao extends SqlSessionDaoSupport {
  
  	@Value("#{contextProperties['pageSize'] ?: 10}")
	int pageSize;

	@Value("#{contextProperties['pageUnit'] ?: 10}")
	int pageUnit;
		
	public void create(${domain.name} #getDomainNameLower(${domain.name})) {
		getSqlSession().insert("${domain.name}.insert${domain.name}", #getDomainNameLower(${domain.name}));
	}
	
	public void update(${domain.name} #getDomainNameLower(${domain.name})) {
		getSqlSession().update("${domain.name}.update${domain.name}", #getDomainNameLower(${domain.name}));
	}
	
	public void remove(${domain.name} #getDomainNameLower(${domain.name})) {
		getSqlSession().delete("${domain.name}.delete${domain.name}", #getDomainNameLower(${domain.name}));
	}
	
	public ${domain.name} get(${domain.name} #getDomainNameLower(${domain.name})) {
		return (${domain.name}) getSqlSession().selectOne("${domain.name}.get${domain.name}", #getDomainNameLower(${domain.name}));
	}

	public Page getPagingList(SearchVO searchVO) {
      int pageIndex = searchVO.getPageIndex();		
	 
	  List<${domain.name}> list=getSqlSession().selectList("${domain.name}.get${domain.name}List", searchVO, new RowBounds(pageSize * (pageIndex - 1), pageSize));
	  int rowCount= (Integer)getSqlSession().selectOne("${domain.name}.get${domain.name}ListCnt");
	  
	  return new Page(list, pageIndex, rowCount, pageUnit, pageSize);
  }	
}