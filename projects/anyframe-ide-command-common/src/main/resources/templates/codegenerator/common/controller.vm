#macro( getSimpleType $fieldType )### START getSimpleType
#set($lastDot=$fieldType.lastIndexOf("."))
#set($indexSimpleField=$lastDot + 1)
#if($lastDot > 0)$fieldType.substring($indexSimpleField)##
#else$fieldType##
#end##
#end##### END getSimpleType
#macro( getFieldNameUpper $fieldName )### START getFieldNameUpper
${fieldName.substring(0,1).toUpperCase()}${fieldName.substring(1)}##
#end#### END getFieldNameUpper
#macro( getDomainNameUpper $domainName )### START getDomainNameUpper
${domainName.substring(0,1).toUpperCase()}${domainName.substring(1)}##
#end#### END getDomainNameUpper
#macro( getDomainNameLower $domainName )### START getDomainNameLower
${domainName.substring(0,1).toLowerCase()}${domainName.substring(1)}##
#end#### END getDomainNameLower
package ${package}.web;

import javax.inject.Inject;
import javax.inject.Named;

import ${domain.packageName}.${domain.name};
import ${package}.service.${domain.name}Service;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.support.SessionStatus;

import org.anyframe.pagination.Page;
import org.anyframe.datatype.SearchVO;

/**
 * Controller for ${domain.name}
 * @author $author
 */
@Controller
@RequestMapping("/#getDomainNameLower(${domain.name}).do")
public class ${domain.name}Controller {

	@Inject
	@Named("#getDomainNameLower(${domain.name})Service")
    private ${domain.name}Service #getDomainNameLower(${domain.name})Service;
    
    public void set${domain.name}Service(${domain.name}Service #getDomainNameLower(${domain.name})Service) {
        this.#getDomainNameLower(${domain.name})Service = #getDomainNameLower(${domain.name})Service;
    }
        
    @RequestMapping(params = "method=createView") 
    public String createView(Model model) throws Exception {  
    	model.addAttribute(new ${domain.name}());
        return "generation/#getDomainNameLower(${domain.name})/form";                 
    }
    
    @RequestMapping(params = "method=create")  
    public String create(${domain.name} #getDomainNameLower(${domain.name}), BindingResult results, SessionStatus status) throws Exception {
    	
    	if (results.hasErrors()) {
			return "generation/#getDomainNameLower(${domain.name})/form";
		}
		
        #getDomainNameLower(${domain.name})Service.create(#getDomainNameLower(${domain.name}));   
        status.setComplete();
             
        return "redirect:/#getDomainNameLower(${domain.name}).do?method=list";        
    }

    @RequestMapping(params = "method=get")    
    public String get(${domain.name} input#getDomainNameUpper(${domain.name}), Model model) throws Exception { 	
    
        ${domain.name} #getDomainNameLower(${domain.name}) = #getDomainNameLower(${domain.name})Service.get(input#getDomainNameUpper(${domain.name}));        	
	 	model.addAttribute(#getDomainNameLower(${domain.name}));
        return "generation/#getDomainNameLower(${domain.name})/form";
    }
     
    @RequestMapping(params ="method=update") 
    public String update(${domain.name} #getDomainNameLower(${domain.name}), BindingResult results, SessionStatus status) throws Exception {
    
    	if (results.hasErrors()) {
			return "generation/#getDomainNameLower(${domain.name})/form";
		}
		    	
        #getDomainNameLower(${domain.name})Service.update(#getDomainNameLower(${domain.name}));   
        status.setComplete();
                 	
        return "redirect:/#getDomainNameLower(${domain.name}).do?method=list";
    }
    
    @RequestMapping(params = "method=list")  
    public String list(@ModelAttribute("search") SearchVO searchVO, Model model) throws Exception {
        
        Page resultPage = #getDomainNameLower(${domain.name})Service.getPagingList(searchVO);

		model.addAttribute("#getDomainNameLower(${domain.name})List", resultPage.getList());
        model.addAttribute("resultPage", resultPage);
		        
        return "generation/#getDomainNameLower(${domain.name})/list"; 
    }
    
    @RequestMapping(params = "method=remove") 
    public String remove(${domain.name} #getDomainNameLower(${domain.name})) throws Exception {
    	                                 
        #getDomainNameLower(${domain.name})Service.remove(#getDomainNameLower(${domain.name}));
		
        return "redirect:/#getDomainNameLower(${domain.name}).do?method=list";
    }    
}
