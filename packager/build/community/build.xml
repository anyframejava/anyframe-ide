<?xml version="1.0"?>

<project name="Community Ed. Packaging" default="default" basedir="." xmlns:artifact="urn:maven-artifact-ant">
	<!--
	<property name="build" value="F:/QuickBuild_JDK6_WS/community/nightly/build"/>
	-->
	<property name="build" value="${basedir}/../../build"/>
	
	<import file="${build}/build-common.xml" />
	<import file="${build}/community/anyframe-plugins.xml" />
	<property name="dist" value="${build}/../dist/" />
	<property name="release" value="${build}/../release/" />
	<property name="subv.url.anyframe.community.trunk" value="http://dev.anyframejava.org/subv/anyframe-opensource/anyframe/trunk" />
	<property name="subv.url.anyframe.community.tags" value="http://dev.anyframejava.org/subv/anyframe-opensource/anyframe/tags" />

	<!-- Javadoc -->
	<path id="javadoc.classpath">
		<fileset dir="${dist}/anyframe-core-${anyframe.version}/repo">
			<include name="**/avalon/**/*.jar" />
<!--			<include name="**/jasperreports/**/*.jar" /> -->
			<include name="**/javax/**/*.jar" />
			<include name="**/miplatform/**/*.jar" />
			<include name="**/org/hibernate/**/*.jar" />
<!--			<include name="**/org/apache/struts/**/*.jar" /> -->
			<include name="**/org/apache/tiles/**/*.jar" />
			<include name="**/org/jboss/**/*.jar" />
			<include name="**/org/springframework/**/*.jar" />
			<include name="**/slf4j/**/*.jar" />
			<include name="**/velocity/**/*.jar" />
		</fileset>
	</path>

	<path id="src.path">
		<pathelement path="${build}/temp/service/anyframe-cache/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-chart/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-core/src/main/java" />
<!--		<pathelement path="${build}/temp/service/anyframe-cxf/src/main/java" />	-->
		<pathelement path="${build}/temp/service/anyframe-flex-query/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-generic/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-hibernate/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-idgen/src/main/java" />
<!--		<pathelement path="${build}/temp/service/anyframe-jasperreports/src/main/java" /> -->
<!--		<pathelement path="${build}/temp/service/anyframe-monitoring/src/main/java" /> -->
		<pathelement path="${build}/temp/service/anyframe-mip-query/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-query/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-query-ria/src/main/java" />
<!--		<pathelement path="${build}/temp/service/anyframe-simpleweb/src/main/java" /> -->
<!--		<pathelement path="${build}/temp/service/anyframe-struts/src/main/java" /> -->
		<pathelement path="${build}/temp/service/anyframe-tiles/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-util-system/src/main/java" />
		<pathelement path="${build}/temp/service/anyframe-jdbc-support/src/main/java" />
	</path>
	
	<target name="proxy">
		<property name="proxy.host" value="70.10.15.10"/>
		<property name="proxy.port" value="8080"/>
		<setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
	</target>

	<target name="init">
		<echo>initialize temporary distribution structure</echo>
		<condition property="is.windows">
			<os family="windows" />
		</condition>
		<if>
			<equals arg1="${is.windows}" arg2="true"/>
			<then>
				<property name="userhome" value="${user.home}" />
				<property name="mvn.executable" value="mvn.bat" />
				<property name="m2.repo" value="${userhome}/.m2/repository" />
				<property name="settings.file" value="${build}/maven-settings-local-windows.xml" />
				<!-- <property name="settings.file" value="$${env.MAVEN_HOME}/conf/settings.xml" /> -->
			</then>
			<else>
				<property name="userhome" value="${env.HOME}" />
				<property name="mvn.executable" value="mvn" />
				<property name="m2.repo" value="${userhome}/.m2/repository" />
				<property name="settings.file" value="${build}/maven-settings-local.xml" />
			</else>
		</if>

		<delete dir="${userhome}/temp/repo" />
		<delete dir="${basedir}/temp" />
		<delete dir="${dist}" />

		<mkdir dir="${dist}/anyframe-core-${anyframe.version}/applications" />
		<mkdir dir="${dist}/anyframe-core-${anyframe.version}/repo" />
		<mkdir dir="${dist}/anyframe-core-${anyframe.version}/bin" />
		<mkdir dir="${dist}/anyframe-core-${anyframe.version}/ide/cli/scripts" />
		<mkdir dir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib" />
	</target>

	<target name="make.bin">
		<echo>construct bin folder</echo>
		<copy todir="${dist}/anyframe-core-${anyframe.version}/bin" overwrite="true">
			<fileset dir="${build}/community/template/bin">
				<exclude name="**/.svn/*.*" />
			</fileset>
		</copy>
	</target>

	<target name="make.ide">
		<echo>construct ide folder</echo>
		<echo>construct ide/ant, ide/db, ide/inspection, ide/cli/scripts folder</echo>
		<copy todir="${dist}/anyframe-core-${anyframe.version}/ide" overwrite="true">
			<fileset dir="${build}/community/template/ide">
				<exclude name="**/.svn/*.*" />
			</fileset>
		</copy>

		<antcall target="make.ide.cli" />
	</target>

	<target name="make.ide.cli">
		<echo>construct ide/cli folder</echo>
		<mkdir dir="${build}/temp/src" />
		<if>
			<contains string="${ide.version}" substring="SNAPSHOT" casesensitive="false" />
			<then>
				<svn username="${subv.username}" password="${subv.password}">
					<checkout url="${subv.url.anyframe.community.trunk}/ide/projects/anyframe-ide-command-ant" revision="HEAD" destPath="${build}/temp/src" />
				</svn>
			</then>
			<else>
				<svn username="${subv.username}" password="${subv.password}">
					<checkout url="${subv.url.anyframe.community.tags}/ide/${ide.version}/projects/anyframe-ide-command-ant" revision="HEAD" destPath="${build}/temp/src" />
				</svn>
			</else>
		</if>

		<copy todir="${dist}/anyframe-core-${anyframe.version}/ide/cli/scripts" overwrite="true" flatten="true">
			<fileset dir="${build}/temp/src/">
				<include name="**/scripts/*.*" />
			</fileset>
		</copy>
		<delete dir="${build}/temp/src" />

		<mkdir dir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib-temp" />

		<for list="anyframe-ide-command-maven,anyframe-ide-command-common,anyframe-ide-command-cli,anyframe-ide-command-ant" param="command.project">
			<sequential>
				<if>
					<contains string="${ide.version}" substring="SNAPSHOT" casesensitive="false" />
					<then>
						<svn username="${subv.username}" password="${subv.password}">
							<checkout url="${subv.url.anyframe.community.trunk}/ide/projects/@{command.project}" revision="HEAD" destPath="${build}/temp/src/@{command.project}" />
						</svn>
					</then>
					<else>
						<mkdir dir="${build}/temp/src/@{command.project}" />
						<svn username="${subv.username}" password="${subv.password}">
							<checkout url="${subv.url.anyframe.community.tags}/ide/${ide.version}/projects/@{command.project}" revision="HEAD" destPath="${build}/temp/src/@{command.project}" />
						</svn>
					</else>
				</if>

				<artifact:pom file="${build}/temp/src/@{command.project}/pom.xml" id="anyframe-ide-command-pomfile" settingsFile="${settings.file}" />

				<artifact:dependencies filesetId="anyframe-ide-command-dependencies" useScope="test" settingsFile="${settings.file}">
					<pom refid="anyframe-ide-command-pomfile" />
					<localRepository path="${userhome}/temp/repo" />
				</artifact:dependencies>

				<copy todir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib-temp" overwrite="true">
					<fileset refid="anyframe-ide-command-dependencies" />
					<mapper type="flatten" />
				</copy>

				<delete dir="${build}/temp/src" />
			</sequential>
		</for>

		<copy todir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib" overwrite="true">
			<fileset dir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib-temp">
				<exclude name="**/anyframe-ide-command*.jar" />
				<exclude name="**/anyframe-maven-plugin*.jar" />
				<exclude name="**/emma*.jar" />
				<!--useless-->
				<exclude name="**/ant*-1.6.2.jar" />
				<exclude name="**/ant*-1.8.1.jar" />
				<exclude name="**/antlr-*.jar" />
				<exclude name="**/commons-cli-*.jar" />
				<exclude name="**/commons-digester-*.jar" />
				<exclude name="**/commons-validator-*.jar" />
				<exclude name="**/doxia-*.jar" />
				<exclude name="**/hibernate-core-*.jar" />
				<exclude name="**/hibernate3-maven-plugin-*.jar" />
				<exclude name="**/jta-*.jar" />
				<exclude name="**/oro-*.jar" />
				<exclude name="**/plexus-i18n-*.jar" />
				<exclude name="**/xml-api-*.jar" />
				<exclude name="**/maven-core-*.jar" />
				<exclude name="**/maven-error-diagnostics-*.jar" />
				<exclude name="**/maven-invoker-*.jar" />
				<exclude name="**/maven-monitor-*.jar" />
				<exclude name="**/maven-plugin-descriptor-*.jar" />
				<exclude name="**/maven-plugin-parameter-documenter-*.jar" />
				<exclude name="**/maven-plugin-registry-*.jar" />
				<exclude name="**/maven-reporting-api-*.jar" />
				<exclude name="**/maven-reporting-impl-*.jar" />
				<exclude name="**/jsch-*.jar" />
				<exclude name="**/wagon-http-lightweight-*.jar" />
				<exclude name="**/wagon-http-shared-*.jar" />
				<exclude name="**/wagon-ssh-*.jar" />
				<exclude name="**/wagon-ssh-common-*.jar" />
				<exclude name="**/wagon-ssh-external-*.jar" />
				<exclude name="**/maven-plugin-testing-harness-*.jar" />
				<exclude name="**/wagon-file-1.0-alpha-6.jar" />
			</fileset>
		</copy>

		<delete dir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib-temp" />

		<artifact:dependencies filesetId="anyframe-command-lib" useScope="compile" settingsFile="${settings.file}">
			<dependency groupId="org.anyframe" artifactId="anyframe-ide-command-common" version="${ide.version}" />
			<dependency groupId="org.anyframe" artifactId="anyframe-ide-command-cli" version="${ide.version}" />
			<dependency groupId="org.codehaus.mojo" artifactId="anyframe-maven-plugin" version="${ide.version}" />
			<dependency groupId="org.anyframe" artifactId="anyframe-ide-command-ant" version="${ide.version}" />
			<localRepository path="${userhome}/temp/repo" />
		</artifact:dependencies>

		<copy todir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib" overwrite="true">
			<fileset dir="${userhome}/temp/repo/org/anyframe">
				<include name="**/anyframe-ide-command-ant-${ide.version}.jar" />
				<include name="**/anyframe-ide-command-common-${ide.version}.jar" />
				<include name="**/anyframe-ide-command-cli-${ide.version}.jar" />
			</fileset>
			<fileset dir="${userhome}/temp/repo/org/codehaus/mojo">
				<include name="**/anyframe-maven-plugin-${ide.version}.jar" />
			</fileset>
			<mapper type="flatten" />
		</copy>

		<copy todir="${dist}/anyframe-core-${anyframe.version}/ide/ant/lib" overwrite="true">
			<fileset dir="${userhome}/temp/repo/org/anyframe">
				<include name="**/anyframe-ide-command-aspect-${ide.version}.jar" />
			</fileset>
			<mapper type="flatten" />
		</copy>

		<delete file="${dist}/anyframe-core-${anyframe.version}/ide/ant/lib/ant.jar" />
		<move file="${dist}/anyframe-core-${anyframe.version}/ide/ant/lib/anyframe-ide-command-aspect-${ide.version}.jar" tofile="${dist}/anyframe-core-${anyframe.version}/ide/ant/lib/ant.jar" />

	</target>

	<target name="make.repo">
		<echo message="construct repo folder" />

		<mkdir dir="${build}/temp/src" />
		<mkdir dir="${build}/temp/pomfile" />

		<copy todir="${dist}/anyframe-core-${anyframe.version}/repo" overwrite="true">
			<fileset dir="${build}/community/template/repo">
				<include name="**/archetype-catalog.xml" />
				<include name="**/plugin-catalog-*.xml" />
			</fileset>
		</copy>

		<antcall target="make.repo.archetype" />
		<antcall target="unzip.essential.plugin" />
		<antcall target="unzip.optional.plugin" />
		<antcall target="make.repo.plugin" />

		<echo>Copy provided-scope library to cli/lib</echo>
		<copy todir="${dist}/anyframe-core-${anyframe.version}/ide/cli/lib" overwrite="true" flatten="true">
			<fileset dir="${userhome}/temp/repo">
				<include name="**/servlet-api/**/servlet-api*.jar" />
				<include name="**/jsp-api/**/jsp-api*.jar" />
				<exclude name="**/servlet-api/**/*-sources.jar" />
				<exclude name="**/jsp-api/**/*-sources.jar" />
			</fileset>
		</copy>
	</target>

	<target name="make.repo.archetype">
		<echo>copy dependencies of eache archetype</echo>
		<for list="${archetypes}" param="archetype">
			<sequential>
				<if>
					<contains string="${@{archetype}}" substring="SNAPSHOT" casesensitive="false" />
					<then>
						<svn username="${subv.username}" password="${subv.password}">
							<checkout url="${subv.url.anyframe.community.trunk}/archetype/@{archetype}/projects/anyframe-@{archetype}-archetype" revision="HEAD" destPath="${build}/temp/src/anyframe-@{archetype}-archetype" />
						</svn>
					</then>
					<else>
						<svn username="${subv.username}" password="${subv.password}">
							<checkout url="${subv.url.anyframe.community.tags}/archetype/@{archetype}/${@{archetype}}/projects/anyframe-@{archetype}-archetype" revision="HEAD" destPath="${build}/temp/src/anyframe-@{archetype}-archetype" />
						</svn>
					</else>
				</if>
				<artifact:dependencies filesetId="anyframe-archetype" useScope="compile" settingsFile="${settings.file}">
					<dependency groupId="org.anyframe.archetype" artifactId="anyframe-@{archetype}-archetype" version="${@{archetype}}" />
					<localRepository path="${userhome}/temp/repo" />
				</artifact:dependencies>
				<copy todir="${build}/temp/pomfile" overwrite="true">
					<fileset dir="${build}/temp/src/">
						<include name="**/archetype-resources/pom.xml" />
					</fileset>
				</copy>
				<delete dir="${build}/temp/src" />
			</sequential>
		</for>

		<for param="pomfile" keepgoing="false">
			<path>
				<fileset dir="${build}/temp/pomfile">
					<include name="**/pom.xml" />
				</fileset>
			</path>
			<sequential>
				<echo>processing @{pomfile} plugin</echo>
				
				<exec dir="${build}" executable="${mvn.executable}" failonerror="true">
					<arg line="compile dependency:sources -U -f @{pomfile} -s ${settings.file} -DgroupId=anyframe -DartifactId=anyframe -Dversion=1.0" />
				</exec>
			</sequential>
		</for>

		<delete dir="${build}/temp/pomfile" />
		<mkdir dir="${build}/temp/pomfile" />
		<mkdir dir="${build}/temp/src" />
	</target>

	<target name="unzip.essential.plugin">
		<echo>copy dependencies of each plugin (essential)</echo>
		<for list="${essential-plugins}" param="essential-plugin">
			<sequential>
				<artifact:dependencies filesetId="anyframe-essential-plugin" useScope="compile" settingsFile="${settings.file}">
					<dependency groupId="org.anyframe.plugin" artifactId="anyframe-@{essential-plugin}-pi" version="${@{essential-plugin}}" />
					<localRepository path="${userhome}/temp/repo" />
				</artifact:dependencies>
				<unzip src="${userhome}/temp/repo/org/anyframe/plugin/anyframe-@{essential-plugin}-pi/${@{essential-plugin}}/anyframe-@{essential-plugin}-pi-${@{essential-plugin}}.jar" dest="${build}/temp/pomfile/anyframe-@{essential-plugin}-pi">
					<patternset>
						<include name="**/plugin-resources/pom.xml" />
					</patternset>
				</unzip>
			</sequential>
		</for>
	</target>

	<target name="unzip.optional.plugin">
		<echo>copy dependencies of each plugin (optional)</echo>
		<for list="${optional-plugins}" param="optional-plugin">
			<sequential>
				<artifact:dependencies filesetId="anyframe-optional-plugin" useScope="compile" settingsFile="${settings.file}">
					<dependency groupId="org.anyframe.plugin" artifactId="anyframe-@{optional-plugin}-pi" version="${@{optional-plugin}}" />
					<localRepository path="${userhome}/temp/repo" />
				</artifact:dependencies>
				<unzip src="${userhome}/temp/repo/org/anyframe/plugin/anyframe-@{optional-plugin}-pi/${@{optional-plugin}}/anyframe-@{optional-plugin}-pi-${@{optional-plugin}}.jar" dest="${build}/temp/pomfile/anyframe-@{optional-plugin}-pi">
					<patternset>
						<include name="**/plugin-resources/pom.xml" />
					</patternset>
				</unzip>
			</sequential>
		</for>
	</target>

	<target name="make.repo.plugin">
		<for param="pomfile" keepgoing="false">
			<path>
				<fileset dir="${build}/temp/pomfile">
					<include name="**/pom.xml" />
				</fileset>
			</path>
			<sequential>
				<echo>processing @{pomfile} plugin</echo>
				
				<exec dir="${build}" executable="${mvn.executable}" failonerror="true">
					<arg line="compile dependency:sources -U -f @{pomfile} -s ${settings.file} -Dspring.version=${spring.version}" />
				</exec>

			</sequential>
		</for>

		<copy todir="${dist}/anyframe-core-${anyframe.version}/repo" overwrite="true">
			<fileset dir="${userhome}/temp/repo">
				<exclude name="**/antlr/2.7.6/**/*.*" />
				<exclude name="**/commons-beanutils/1.7.0/**/*.*" />
				<exclude name="**/commons-collections/3.1/**/*.*" />
				<exclude name="**/javassist/3.4.GA/**/*.*" />
				<exclude name="**/hibernate-core/3.3.0.SP1/**/*.*" />
				<exclude name="**/commons-logging/1.1/**/*.*" />
			</fileset>
		</copy>
	</target>

	<target name="make.licenses">
		<echo message="construct licenses folder" />
		<copy todir="${dist}/anyframe-core-${anyframe.version}/licenses" overwrite="true">
			<fileset dir="${release}/community/licenses">
				<exclude name="**/.svn/*.*" />
			</fileset>
		</copy>

		<copy todir="${dist}/anyframe-core-${anyframe.version}" overwrite="true">
			<fileset dir="${release}/community">
				<include name="**/changelog.txt" />
				<include name="**/license.txt" />
				<include name="**/readme.txt" />
			</fileset>
		</copy>
	</target>

	<target name="zip">
		<zip destfile="${dist}/anyframe-core-${anyframe.version}.zip" basedir="${dist}" />
	</target>

	<target name="javadoc">
		<echo message="Make Javadoc API" />

		<for list="${services}" param="service">
			<sequential>
				<mkdir dir="${build}/temp/service" />
				<if>
					<contains string="${@{service}}" substring="SNAPSHOT" casesensitive="false" />
					<then>
						<if>
							<contains string="@{service}" substring="core" casesensitive="false" />
							<then>
								<svn username="${subv.username}" password="${subv.password}">
									<checkout url="${subv.url.anyframe.community.trunk}/plugin/essential/@{service}/projects/anyframe-@{service}" revision="HEAD" destPath="${build}/temp/service/anyframe-@{service}" />
								</svn>
							</then>
							<else>
								<if>
									<contains string="@{service}" substring="monitoring" casesensitive="false" />
									<then>
										<svn username="${subv.username}" password="${subv.password}">
											<checkout url="${subv.url.anyframe.community.trunk}/plugin/optional/@{service}/projects/anyframe-@{service}-client" revision="HEAD" destPath="${build}/temp/service/anyframe-@{service}" />
										</svn>
									</then>
									<else>
										<svn username="${subv.username}" password="${subv.password}">
											<checkout url="${subv.url.anyframe.community.trunk}/plugin/optional/@{service}/projects/anyframe-@{service}" revision="HEAD" destPath="${build}/temp/service/anyframe-@{service}" />
										</svn>
									</else>
								</if>
							</else>
						</if>
					</then>
					<else>
						<if>
							<contains string="@{service}" substring="core" casesensitive="false" />
							<then>
								<svn username="${subv.username}" password="${subv.password}">
									<checkout url="${subv.url.anyframe.community.tags}/plugin/essential/@{service}/${@{service}}/projects/anyframe-@{service}" revision="HEAD" destPath="${build}/temp/service/anyframe-@{service}" />
								</svn>
							</then>
							<else>
								<if>
									<contains string="@{service}" substring="monitoring" casesensitive="false" />
									<then>
										<svn username="${subv.username}" password="${subv.password}">
											<checkout url="${subv.url.anyframe.community.tags}/plugin/optional/@{service}/${@{service}}/projects/anyframe-@{service}-client" revision="HEAD" destPath="${build}/temp/service/anyframe-@{service}" />
										</svn>
									</then>
									<else>
										<svn username="${subv.username}" password="${subv.password}">
											<checkout url="${subv.url.anyframe.community.tags}/plugin/optional/@{service}/${@{service}}/projects/anyframe-@{service}" revision="HEAD" destPath="${build}/temp/service/anyframe-@{service}" />
										</svn>
									</else>
								</if>
							</else>
						</if>
					</else>
				</if>

				<javadoc packagenames="org.anyframe.*" sourcepathref="src.path" destdir="${dist}/anyframe-core-${anyframe.version}/docs/@{service}/${@{service}}/javadoc" author="true" version="true" use="true" Encoding="utf-8" charset="utf-8" docencoding="utf-8" windowtitle="Anyframe @{service} API ${@{service}}">
					<classpath>
						<path refid="javadoc.classpath" />
					</classpath>
					<doctitle>
						<![CDATA[<h1>Anyframe Java Core - @{service} API ${@{service}}</h1>]]>
					</doctitle>
					<bottom>
						<![CDATA[<i>Copyright &#169; 2014, www.anyframejava.org, All Rights Reserved.</i>]]>
					</bottom>
					<tag name="todo" scope="all" description="TODO:" />
					<group title="Anyframe" packages="org.anyframe.*" />
					<link href="http://docs.oracle.com/javase/6/docs/api/" />
					<link href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/" />
				</javadoc>
			</sequential>
		</for>

		<delete dir="${build}/temp/service" />
	</target>

	<target name="default" depends="proxy, init, make.bin, make.ide, make.repo, make.licenses, zip" />

</project>