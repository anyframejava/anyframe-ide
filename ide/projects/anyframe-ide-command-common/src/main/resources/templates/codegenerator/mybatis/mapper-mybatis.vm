##<#assign columnFieldOnlyIdWONestedMap = dbdata.getColumnFieldOnlyIdWithoutNestedPropertyMap(domain) /> 기존 Freemaker 소스부분인데 참고사항으로 남겨둡니다.
#macro( getDomainNameLower $domainName )### START getDomainNameLower
${domainName.substring(0,1).toLowerCase()}${domainName.substring(1)}##
#end#### END getDomainNameLower
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
#set($keyMap = {}) ## PK Map 선언
#set($keyList =[]) ## PK List 선언
#set($listMap = {}) ## 일반 Column List 선언
#foreach($list in $domain.columns)
#set($dummy = $listMap.put($list.columnName, $list.fieldName))
#if($list.isKey)
	#set($dummy = $keyList.add($list.columnName))
	#set($dummy = $keyMap.put($list.columnName, $list.fieldName))
#end
#end
#set($sharp="#") ## '#'을 표시하기 위한 것입니다.
<mapper namespace="${domain.name}">
	
	<cache />
	
	<resultMap id="#getDomainNameLower(${domain.name})Result" type="${domain.name}">  
	  #foreach($key in $keyList)
      <result property="${keyMap.get($key)}" column="$key" />
	  #end
	  #foreach($columnlist in $domain.columns)
	  #if(!$columnlist.isKey)
      <result property="${listMap.get($columnlist.columnName)}" column="${columnlist.columnName}" />
	  #end#end	
	</resultMap>

	<insert id="insert${domain.name}" parameterType="${domain.name}">
		INSERT INTO ${domain.table}
		(#foreach($columnlist in $domain.columns)${columnlist.columnName}#if($velocityHasNext), #end#end) 
		VALUES (#foreach($columnlist in $domain.columns)#{${columnlist.fieldName}}#if($velocityHasNext), #end#end)
     </insert>

	<update id="update${domain.name}" parameterType="${domain.name}">
		UPDATE ${domain.table} SET
		#foreach($columnlist in $domain.columns)#if(!$columnlist.isKey)${columnlist.columnName} = #{${listMap.get($columnlist.columnName)}}#if($velocityHasNext), #end#end#end
		
		WHERE #foreach($key in $keyList)$key = #{${keyMap.get($key)}}#if($velocityHasNext) AND #end#end
    
    </update>

	<delete id="delete${domain.name}" parameterType="${domain.name}">
		DELETE FROM ${domain.table} WHERE #foreach($key in $keyList)$key = #{${keyMap.get($key)}}#if($velocityHasNext) AND #end#end ##주석 columnFieldOnlyIdWONestedMap.get(columnName) -> keyMap.get()
    
    </delete>		
	
	<select id="get${domain.name}" parameterType="${domain.name}" resultMap="#getDomainNameLower(${domain.name})Result">
		SELECT #foreach($columnlist in $domain.columns)${columnlist.columnName}#if($velocityHasNext), #end#end
		FROM ${domain.table}
		WHERE #foreach($key in $keyList)$key = #{${keyMap.get($key)}}#if($velocityHasNext) AND #end#end ##주석 columnOnlyIdWONestedMap.get(columnName) -> keyMap.get()
    
    </select>
    
	<select id="get${domain.name}List" parameterType="${domain.name}" resultMap="#getDomainNameLower(${domain.name})Result">
		SELECT  #foreach($columnlist in $domain.columns)${columnlist.columnName}#if($velocityHasNext), #end#end 
		FROM ${domain.table}
	</select>    
    
	<select id="get${domain.name}ListCnt" parameterType="${domain.name}" resultType="int">
		SELECT count(*)
		FROM ${domain.table}
	</select>
	
</mapper>	