#macro( getSimpleType $fieldType )### START getSimpleType
#set($lastDot=$fieldType.lastIndexOf("."))
#set($indexSimpleField=$lastDot + 1)
#if($lastDot > 0)$fieldType.substring($indexSimpleField)##
#else$fieldType##
#end##
#end##### END getSimpleType
#macro( getFieldNameUpper $fieldName )### START getFieldNameUpper
${fieldName.substring(0,1).toUpperCase()}${fieldName.substring(1)}##
#end#### END getFieldNameUpper
#macro( getDomainNameUpper $domainName )### START getDomainNameUpper
${domainName.substring(0,1).toUpperCase()}${domainName.substring(1)}##
#end#### END getDomainNameUpper
#macro( getDomainNameLower $domainName )### START getDomainNameLower
${domainName.substring(0,1).toLowerCase()}${domainName.substring(1)}##
#end#### END getDomainNameLower
#set($keyMap = {})
## PK List �좎뼵
#set($keyList =[])
#set($listMap = {})
#foreach($list in $domain.columns)
#set($dummy = $listMap.put($list.columnName, $list.fieldName))
#if($list.isKey)
	#set($dummy = $keyList.add($list.columnName))
	#set($dummy = $keyMap.put($list.columnName, $list.fieldName))
#end
#end
#foreach($list in $keyList)
#set($firstIdfield = $keyMap.get($list))
#break
#end
#set($sharp="#")
package ${package}.service.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.sql.DataSource;

import org.anyframe.pagination.Page;
import org.anyframe.datatype.SearchVO;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.simple.ParameterizedRowMapper;
import org.springframework.jdbc.core.support.JdbcDaoSupport;
import org.springframework.stereotype.Repository;

import ${domain.packageName}.${domain.name};


/**
 * ${domain.name}Dao implementation class with Spring JDBC Template
 * @author $author
 */
@Repository("${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}Dao")
public class ${domain.name}Dao extends JdbcDaoSupport {
  
  	@Value("#{contextProperties['pageSize'] ?: 10}")
	int pageSize;

	@Value("#{contextProperties['pageUnit'] ?: 10}")
	int pageUnit;
		
	@Inject
	public void setJdbcDaoDataSource(DataSource dataSource) throws Exception {
		super.setDataSource(dataSource);
	}
	
	public void create(${domain.name} ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}) throws Exception {
		String sql = "INSERT INTO ${domain.table} (#foreach($columnlist in $domain.columns)${columnlist.columnName}#if($velocityHasNext), #end#end) "
			         + "VALUES (#foreach($columnlist in $domain.columns)?#if($velocityHasNext), #end#end)";
				
		this.getJdbcTemplate().update(
				sql,
				new Object[] {#foreach($columnlist in $domain.columns)#set($getterMethodName = ${columnlist.fieldName})${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}.get#getFieldNameUpper(${getterMethodName})()#if($velocityHasNext), #end#end});	## 雅뚯눘苑�GetterMethod筌뤿굞��揶쏉옙議뉛옙�삳뮉 占썩뫁�뷂옙袁⑹뒄 dbdata.getGetterMethodName(columnlist.fieldName)	
	}
	
	public void remove(${domain.name} input#getDomainNameUpper(${domain.name})) throws Exception {
		String sql = "DELETE FROM ${domain.table} WHERE #foreach($key in $keyList)$key = ?#if($velocityHasNext) AND #end#end";
		this.getJdbcTemplate().update(sql, new Object[]  { 
				#set($keyCount = '0')#foreach($columnlist in $domain.columns)#if($columnlist.isKey)#set($getterMethodName = ${columnlist.fieldName})#if($keyCount=="0")input#getDomainNameUpper(${domain.name}).get#getFieldNameUpper(${getterMethodName})()#set($keyCount='1')#elseif($keyCount=="1"), input#getDomainNameUpper(${domain.name}).get#getFieldNameUpper(${getterMethodName})()#end#end#end});					 	
	}
	
	public void update(${domain.name} ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}) throws Exception {
		String sql = "UPDATE ${domain.table} SET #foreach($columnlist in $domain.columns)#if(!$columnlist.isKey)${columnlist.columnName} = ?#if($velocityHasNext), #end#end#end WHERE #foreach($key in $keyList)$key = ?#if($velocityHasNext) AND #end#end";
		this.getJdbcTemplate().update(
				sql,
				new Object[] {#foreach($columnlist in $domain.columns)
							 	  #set($getterMethodName = ${columnlist.fieldName})
#********************************##if(!$columnlist.isKey)
#************************************##getDomainNameLower(${domain.name}).get#getFieldNameUpper(${getterMethodName})()#if($velocityHasNext), #end
#********************************##end#end,
#********************************##set($keyCount = '0')
#********************************##foreach($columnlist in $domain.columns)
#************************************##set($getterMethodName = ${columnlist.fieldName})
#************************************##if($columnlist.isKey)
#****************************************##if($keyCount=="0")
#****************#				      	      #getDomainNameLower(${domain.name}).get#getFieldNameUpper(${getterMethodName})()#set($keyCount = '1')
#****************************************##elseif($keyCount=="1")
#********************************************#, #getDomainNameLower(${domain.name}).get#getFieldNameUpper(${getterMethodName})()#end
#****************************************##end#end

				});
    }

	public ${domain.name} get(${domain.name} input#getDomainNameUpper(${domain.name})) throws Exception {	
		String sql = "SELECT #foreach($columnlist in $domain.columns)${columnlist.columnName}#if($velocityHasNext), #end#end "
		              + "FROM ${domain.table} WHERE #foreach($key in $keyList)$key = ?#if($velocityHasNext) AND #end#end";
		
		return this.getJdbcTemplate().queryForObject(sql,
				new BeanPropertyRowMapper<${domain.name}>(${domain.name}.class) {
					public ${domain.name} mapRow(ResultSet rs, int i)
							throws SQLException {
                        ${domain.name} ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)} = new ${domain.name}();     
#foreach($columnlist in $domain.columns)
	#set($rsGetterMethodName = "get#getSimpleType(${columnlist.fieldType})")
	#if($columnlist.columnType == "INTEGER")
		#set($rsGetterMethodName = 'getInt')
	#elseif($columnlist.columnType == "VARCHAR")
		#set($rsGetterMethodName = 'getString')
	#elseif($columnlist.columnType == "DATE")
		#set($rsGetterMethodName = 'getDate')
	#end
						${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}.set${columnlist.fieldName.substring(0,1).toUpperCase()}${columnlist.fieldName.substring(1)}(rs.${rsGetterMethodName}("$columnlist.columnName"));
#end  
    
						return ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)};
					}
				}, new Object[] { 
					#set($keyCount = '0')#foreach($columnlist in $domain.columns)#if($columnlist.isKey)#set($getterMethodName = ${columnlist.fieldName})#if($keyCount=="0")input#getDomainNameUpper(${domain.name}).get#getFieldNameUpper(${getterMethodName})()#set($keyCount='1')#elseif($keyCount=="1") ,input#getDomainNameUpper(${domain.name}).get#getFieldNameUpper(${getterMethodName})()#end#end#end});				
	}


	/**
	 * [WARNING] Don't use below sample codes in real world because of
	 * performance issue. This is a simple example about how to use spring jdbc
	 * pagination.
	 */
	public Page getPagingList(SearchVO searchVO) throws Exception {
        int pageIndex = searchVO.getPageIndex();
		String columnsSql = " #foreach($columnlist in $domain.columns)${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}.${columnlist.columnName}#if($velocityHasNext), #end#end";
		String fromSql = " FROM ${domain.table} ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}";
		String orderbySql = " ";	
		orderbySql += "order by ";
		#set($keyCount = '0')						
		#foreach($key in $keyList)
		#if($keyCount=="0")orderbySql += "${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}.$key";#set($keyCount='1')#elseif($keyCount=="1")orderbySql += ", ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}.$key";#end
		#end	

		Page result = fetchPage(
				this.getJdbcTemplate(),
				"SELECT count(*)" + fromSql,
				"SELECT " + columnsSql + fromSql + orderbySql, 
				new Object[] { }, pageIndex,
				new ParameterizedRowMapper<${domain.name}>() {
					public ${domain.name} mapRow(ResultSet rs, int i)
							throws SQLException {
                        ${domain.name} ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)} = new ${domain.name}();     
#foreach($columnlist in $domain.columns)
	#set($rsGetterMethodName = "get#getSimpleType(${columnlist.fieldType})")
	#if($columnlist.columnType == "INTEGER")
		#set($rsGetterMethodName = 'getInt')
	#elseif($columnlist.columnType == "VARCHAR")
		#set($rsGetterMethodName = 'getString')
	#elseif($columnlist.columnType == "DATE")
		#set($rsGetterMethodName = 'getDate')
	#end
					${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)}.set${columnlist.fieldName.substring(0,1).toUpperCase()}${columnlist.fieldName.substring(1)}(rs.${rsGetterMethodName}("$columnlist.columnName"));
#end  
						return ${domain.name.substring(0,1).toLowerCase()}${domain.name.substring(1)};
					}
				});

		return result;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	private Page fetchPage(final JdbcTemplate jt, final String sqlCountRows,
			final String sqlFetchRows, final Object args[], final int pageNo,
			final ParameterizedRowMapper<${domain.name}> rowMapper) {

		// determine how many rows are available
		final int rowCount = jt.queryForInt(sqlCountRows, args);

		// create the page object
		final Page page = new Page(new ArrayList<${domain.name}>(), pageNo, rowCount,
				pageUnit, pageSize);

		// fetch a single page of results
		final int startRow = (pageNo - 1) * pageSize;
		jt.query(sqlFetchRows, args, new ResultSetExtractor() {
			public Object extractData(ResultSet rs) throws SQLException,
					DataAccessException {
				final List<${domain.name}> pageItems = (List<${domain.name}>) page.getList();
				int currentRow = 0;
				while (rs.next() && currentRow < startRow + pageSize) {
					if (currentRow >= startRow) {
						pageItems.add(rowMapper.mapRow(rs, currentRow));
					}
					currentRow++;
				}
				return page;
			}
		});
		return page;
	}	
}
